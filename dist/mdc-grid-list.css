/**
 * Creates a rule that will be applied when an MDC Web component is within the context of an RTL layout.
 *
 * Usage Example:
 * ```scss
 * .mdc-foo {
 *   position: absolute;
 *   left: 0;
 *
 *   @include mdc-rtl {
 *     left: auto;
 *     right: 0;
 *   }
 *
 *   &__bar {
 *     margin-left: 4px;
 *     @include mdc-rtl(".mdc-foo") {
 *       margin-left: auto;
 *       margin-right: 4px;
 *     }
 *   }
 * }
 *
 * .mdc-foo--mod {
 *   padding-left: 4px;
 *
 *   @include mdc-rtl {
 *     padding-left: auto;
 *     padding-right: 4px;
 *   }
 * }
 * ```
 *
 * Note that this works by checking for [dir="rtl"] on an ancestor element. While this will work
 * in most cases, it will in some cases lead to false negatives, e.g.
 *
 * ```html
 * <html dir="rtl">
 *   <!-- ... -->
 *   <div dir="ltr">
 *     <div class="mdc-foo">Styled incorrectly as RTL!</div>
 *   </div>
 * </html>
 * ```
 *
 * In the future, selectors such as :dir (http://mdn.io/:dir) will help us mitigate this.
 */
/**
 * Takes a base box-model property - e.g. margin / border / padding - along with a default
 * direction and value, and emits rules which apply the value to the
 * "<base-property>-<default-direction>" property by default, but flips the direction
 * when within an RTL context.
 *
 * For example:
 *
 * ```scss
 * .mdc-foo {
 *   @include mdc-rtl-reflexive-box(margin, left, 8px);
 * }
 * ```
 * is equivalent to:
 *
 * ```scss
 * .mdc-foo {
 *   margin-left: 8px;
 *
 *   @include mdc-rtl {
 *     margin-right: 8px;
 *     margin-left: 0;
 *   }
 * }
 * ```
 * whereas:
 *
 * ```scss
 * .mdc-foo {
 *   @include mdc-rtl-reflexive-box(margin, right, 8px);
 * }
 * ```
 * is equivalent to:
 *
 * ```scss
 * .mdc-foo {
 *   margin-right: 8px;
 *
 *   @include mdc-rtl {
 *     margin-right: 0;
 *     margin-left: 8px;
 *   }
 * }
 * ```
 *
 * You can also pass a 4th optional $root-selector argument which will be forwarded to `mdc-rtl`,
 * e.g. `@include mdc-rtl-reflexive-box(margin, left, 8px, ".mdc-component")`.
 *
 * Note that this function will always zero out the original value in an RTL context. If you're
 * trying to flip the values, use mdc-rtl-reflexive-property().
 */
/**
 * Takes a base property and emits rules that assign <base-property>-left to <left-value> and
 * <base-property>-right to <right-value> in a LTR context, and vice versa in a RTL context.
 * For example:
 *
 * ```scss
 * .mdc-foo {
 *   @include mdc-rtl-reflexive-property(margin, auto, 12px);
 * }
 * ```
 * is equivalent to:
 *
 * ```scss
 * .mdc-foo {
 *   margin-left: auto;
 *   margin-right: 12px;
 *
 *   @include mdc-rtl {
 *     margin-left: 12px;
 *     margin-right: auto;
 *   }
 * }
 * ```
 *
 * A 4th optional $root-selector argument can be given, which will be passed to `mdc-rtl`.
 */
/**
 * Takes an argument specifying a horizontal position property (either "left" or "right") as well
 * as a value, and applies that value to the specified position in a LTR context, and flips it in a
 * RTL context. For example:
 *
 * ```scss
 * .mdc-foo {
 *   @include mdc-rtl-reflexive-position(left, 0);
 *   position: absolute;
 * }
 * ```
 * is equivalent to:
 *
 * ```scss
 *  .mdc-foo {
 *    position: absolute;
 *    left: 0;
 *    right: initial;
 *
 *    @include mdc-rtl {
 *      right: 0;
 *      left: initial;
 *    }
 *  }
 * ```
 * An optional third $root-selector argument may also be given, which is passed to `mdc-rtl`.
 */
/* TODO(sgomes): Figure out what to do about desktop font sizes. */
/* TODO(sgomes): Figure out what to do about i18n and i18n font sizes. */
.lmdc-grid-tile__primary {
  padding-bottom: calc(100% / 1); }

.lmdc-grid-tile {
  margin: 2px 0;
  padding: 0 2px; }

.lmdc-grid-tile__secondary {
  left: 2px;
  width: calc(100% - 4px); }

.lmdc-grid-list__tiles {
  margin: 2px auto; }

.lmdc-grid-list__tiles {
  display: flex;
  flex-flow: row wrap;
  padding: 0; }

.lmdc-grid-list--tile-gutter-1 .lmdc-grid-tile {
  margin: 0.5px 0;
  padding: 0 0.5px; }

.lmdc-grid-list--tile-gutter-1 .lmdc-grid-tile__secondary {
  left: 0.5px;
  width: calc(100% - 1px); }

.lmdc-grid-list--tile-gutter-1 .lmdc-grid-list__tiles {
  margin: 0.5px auto; }

.lmdc-grid-list--tile-aspect-16x9 .lmdc-grid-tile__primary {
  padding-bottom: calc(100% / 1.77778); }

.lmdc-grid-list--tile-aspect-3x2 .lmdc-grid-tile__primary {
  padding-bottom: calc(100% / 1.5); }

.lmdc-grid-list--tile-aspect-2x3 .lmdc-grid-tile__primary {
  padding-bottom: calc(100% / 0.66667); }

.lmdc-grid-list--tile-aspect-4x3 .lmdc-grid-tile__primary {
  padding-bottom: calc(100% / 1.33333); }

.lmdc-grid-list--tile-aspect-3x4 .lmdc-grid-tile__primary {
  padding-bottom: calc(100% / 0.75); }

.lmdc-grid-tile {
  display: block;
  position: relative;
  /* @alternate */
  width: 200px;
  width: var(--mdc-grid-list-tile-width, 200px); }

.lmdc-grid-tile__primary {
  /* @alternate */
  background-color: #fff;
  background-color: var(--mdc-theme-background, #fff);
  /* @alternate */
  color: rgba(0, 0, 0, 0.87);
  color: var(--mdc-theme-text-primary-on-background, rgba(0, 0, 0, 0.87));
  position: relative;
  height: 0; }

.lmdc-grid-tile__primary-content {
  position: absolute;
  top: 0;
  right: 0;
  bottom: 0;
  left: 0;
  width: 100%;
  height: 100%;
  background-repeat: no-repeat;
  background-position: center;
  background-size: cover; }

.lmdc-grid-tile__secondary {
  /* @alternate */
  background-color: #6200ee;
  background-color: var(--mdc-theme-primary, #6200ee);
  /* @alternate */
  color: white;
  color: var(--mdc-theme-text-primary-on-primary, white);
  position: absolute;
  bottom: 0;
  box-sizing: border-box;
  height: 48px;
  padding: 16px; }

.lmdc-grid-tile__title {
  text-overflow: ellipsis;
  white-space: nowrap;
  overflow: hidden;
  display: block;
  margin: 0;
  padding: 0;
  font-size: 1rem;
  font-weight: 500;
  line-height: 1rem; }

.lmdc-grid-tile__support-text {
  font-family: Roboto, sans-serif;
  -moz-osx-font-smoothing: grayscale;
  -webkit-font-smoothing: antialiased;
  font-size: 0.875rem;
  line-height: 1.25rem;
  font-weight: 400;
  letter-spacing: 0.04em;
  text-decoration: inherit;
  text-transform: inherit;
  text-overflow: ellipsis;
  white-space: nowrap;
  overflow: hidden;
  display: block;
  margin: 0;
  margin-top: 4px;
  padding: 0; }

.lmdc-grid-tile__icon, .lmdc-grid-list--with-icon-align-end mdc-icon, .lmdc-grid-list--with-icon-align-start mdc-icon {
  position: absolute;
  top: calc(50% - 24px / 2);
  font-size: 0; }

.lmdc-grid-list--twoline-caption .lmdc-grid-tile__secondary {
  height: 68px; }

.lmdc-grid-list--header-caption .lmdc-grid-tile__secondary {
  top: 0;
  bottom: auto; }

.lmdc-grid-list--with-icon-align-start .lmdc-grid-tile__secondary {
  padding-left: 56px;
  padding-right: 8px; }
  .lmdc-grid-list[dir="rtl"] .lmdc-grid-list--with-icon-align-start .lmdc-grid-tile__secondary,
  [dir="rtl"] .lmdc-grid-list .lmdc-grid-list--with-icon-align-start .lmdc-grid-tile__secondary {
    padding-left: 8px;
    padding-right: 56px; }

.lmdc-grid-list--with-icon-align-start .lmdc-grid-tile__icon, .lmdc-grid-list--with-icon-align-start .lmdc-grid-list--with-icon-align-end mdc-icon, .lmdc-grid-list--with-icon-align-end .lmdc-grid-list--with-icon-align-start mdc-icon, .lmdc-grid-list--with-icon-align-start mdc-icon {
  left: 16px;
  right: initial;
  font-size: 24px; }
  .lmdc-grid-list[dir="rtl"] .lmdc-grid-list--with-icon-align-start .lmdc-grid-tile__icon, .lmdc-grid-list[dir="rtl"] .lmdc-grid-list--with-icon-align-start .lmdc-grid-list--with-icon-align-end mdc-icon, .lmdc-grid-list--with-icon-align-end .lmdc-grid-list[dir="rtl"] .lmdc-grid-list--with-icon-align-start mdc-icon, .lmdc-grid-list[dir="rtl"] .lmdc-grid-list--with-icon-align-start mdc-icon, [dir="rtl"] .lmdc-grid-list .lmdc-grid-list--with-icon-align-start .lmdc-grid-tile__icon, [dir="rtl"] .lmdc-grid-list .lmdc-grid-list--with-icon-align-start .lmdc-grid-list--with-icon-align-end mdc-icon, .lmdc-grid-list--with-icon-align-end [dir="rtl"] .lmdc-grid-list .lmdc-grid-list--with-icon-align-start mdc-icon, [dir="rtl"] .lmdc-grid-list .lmdc-grid-list--with-icon-align-start mdc-icon {
    left: initial;
    right: 16px; }

.lmdc-grid-list--with-icon-align-end .lmdc-grid-tile__secondary {
  padding-left: 16px;
  padding-right: 56px; }
  .lmdc-grid-list[dir="rtl"] .lmdc-grid-list--with-icon-align-end .lmdc-grid-tile__secondary,
  [dir="rtl"] .lmdc-grid-list .lmdc-grid-list--with-icon-align-end .lmdc-grid-tile__secondary {
    padding-left: 56px;
    padding-right: 16px; }

.lmdc-grid-list--with-icon-align-end .lmdc-grid-tile__icon, .lmdc-grid-list--with-icon-align-end mdc-icon, .lmdc-grid-list--with-icon-align-end .lmdc-grid-list--with-icon-align-start mdc-icon, .lmdc-grid-list--with-icon-align-start .lmdc-grid-list--with-icon-align-end mdc-icon {
  left: initial;
  right: 16px;
  font-size: 24px; }
  .lmdc-grid-list[dir="rtl"] .lmdc-grid-list--with-icon-align-end .lmdc-grid-tile__icon, .lmdc-grid-list[dir="rtl"] .lmdc-grid-list--with-icon-align-end mdc-icon, .lmdc-grid-list[dir="rtl"] .lmdc-grid-list--with-icon-align-end .lmdc-grid-list--with-icon-align-start mdc-icon, .lmdc-grid-list--with-icon-align-start .lmdc-grid-list[dir="rtl"] .lmdc-grid-list--with-icon-align-end mdc-icon, [dir="rtl"] .lmdc-grid-list .lmdc-grid-list--with-icon-align-end .lmdc-grid-tile__icon, [dir="rtl"] .lmdc-grid-list .lmdc-grid-list--with-icon-align-end mdc-icon, [dir="rtl"] .lmdc-grid-list .lmdc-grid-list--with-icon-align-end .lmdc-grid-list--with-icon-align-start mdc-icon, .lmdc-grid-list--with-icon-align-start [dir="rtl"] .lmdc-grid-list .lmdc-grid-list--with-icon-align-end mdc-icon {
    left: 16px;
    right: initial; }

.lmdc-grid-tile {
  /* @alternate */
  width: 200px;
  width: var(--mdc-grid-list-tile-width, 200px); }

.lmdc-grid-tile__icon, .lmdc-grid-list--with-icon-align-end mdc-icon, .lmdc-grid-list--with-icon-align-start mdc-icon {
  font-size: 24px; }
