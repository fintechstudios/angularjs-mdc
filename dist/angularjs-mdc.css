@-webkit-keyframes mdc-ripple-fg-radius-in {
  from {
    -webkit-animation-timing-function: cubic-bezier(0.4, 0, 0.2, 1);
            animation-timing-function: cubic-bezier(0.4, 0, 0.2, 1);
    -webkit-transform: translate(var(--mdc-ripple-fg-translate-start, 0)) scale(1);
            transform: translate(var(--mdc-ripple-fg-translate-start, 0)) scale(1); }
  to {
    -webkit-transform: translate(var(--mdc-ripple-fg-translate-end, 0)) scale(var(--mdc-ripple-fg-scale, 1));
            transform: translate(var(--mdc-ripple-fg-translate-end, 0)) scale(var(--mdc-ripple-fg-scale, 1)); } }

@keyframes mdc-ripple-fg-radius-in {
  from {
    -webkit-animation-timing-function: cubic-bezier(0.4, 0, 0.2, 1);
            animation-timing-function: cubic-bezier(0.4, 0, 0.2, 1);
    -webkit-transform: translate(var(--mdc-ripple-fg-translate-start, 0)) scale(1);
            transform: translate(var(--mdc-ripple-fg-translate-start, 0)) scale(1); }
  to {
    -webkit-transform: translate(var(--mdc-ripple-fg-translate-end, 0)) scale(var(--mdc-ripple-fg-scale, 1));
            transform: translate(var(--mdc-ripple-fg-translate-end, 0)) scale(var(--mdc-ripple-fg-scale, 1)); } }

@-webkit-keyframes mdc-ripple-fg-opacity-in {
  from {
    -webkit-animation-timing-function: linear;
            animation-timing-function: linear;
    opacity: 0; }
  to {
    opacity: var(--mdc-ripple-fg-opacity, 0.16); } }

@keyframes mdc-ripple-fg-opacity-in {
  from {
    -webkit-animation-timing-function: linear;
            animation-timing-function: linear;
    opacity: 0; }
  to {
    opacity: var(--mdc-ripple-fg-opacity, 0.16); } }

@-webkit-keyframes mdc-ripple-fg-opacity-out {
  from {
    -webkit-animation-timing-function: linear;
            animation-timing-function: linear;
    opacity: var(--mdc-ripple-fg-opacity, 0.16); }
  to {
    opacity: 0; } }

@keyframes mdc-ripple-fg-opacity-out {
  from {
    -webkit-animation-timing-function: linear;
            animation-timing-function: linear;
    opacity: var(--mdc-ripple-fg-opacity, 0.16); }
  to {
    opacity: 0; } }

.lmdc-ripple-surface--test-edge-var-bug {
  --mdc-ripple-surface-test-edge-var: 1px solid #000;
  visibility: hidden; }
  .lmdc-ripple-surface--test-edge-var-bug::before {
    border: var(--mdc-ripple-surface-test-edge-var); }

/**
 * The css property used for elevation. In most cases this should not be changed. It is exposed
 * as a variable for abstraction / easy use when needing to reference the property directly, for
 * example in a `will-change` rule.
 */
/**
 * The default duration value for elevation transitions.
 */
/**
 * The default easing value for elevation transitions.
 */
/**
 * Applies the correct CSS rules to an element to give it the elevation specified by $z-value.
 * The $z-value must be between 0 and 24.
 * If $color has an alpha channel, it will be ignored and overridden. To increase the opacity of the shadow, use
 * $opacity-boost.
 */
/**
 * Returns a string that can be used as the value for a `transition` property for elevation.
 * Calling this function directly is useful in situations where a component needs to transition
 * more than one property.
 *
 * ```scss
 * .foo {
 *   transition: mdc-elevation-transition-value(), opacity 100ms ease;
 *   will-change: $mdc-elevation-property, opacity;
 * }
 * ```
 */
/* TODO(sgomes): Figure out what to do about desktop font sizes. */
/* TODO(sgomes): Figure out what to do about i18n and i18n font sizes. */
.lmdc-button {
  font-family: Roboto, sans-serif;
  -moz-osx-font-smoothing: grayscale;
  -webkit-font-smoothing: antialiased;
  font-size: 0.875rem;
  line-height: 2.25rem;
  font-weight: 500;
  letter-spacing: 0.04em;
  text-decoration: none;
  text-transform: uppercase;
  --mdc-ripple-fg-size: 0;
  --mdc-ripple-left: 0;
  --mdc-ripple-top: 0;
  --mdc-ripple-fg-scale: 1;
  --mdc-ripple-fg-translate-end: 0;
  --mdc-ripple-fg-translate-start: 0;
  -webkit-tap-highlight-color: rgba(0, 0, 0, 0);
  will-change: transform, opacity;
  display: inline-block;
  position: relative;
  box-sizing: border-box;
  min-width: 64px;
  height: 36px;
  padding: 0 16px;
  border: none;
  outline: none;
  text-align: center;
  -webkit-user-select: none;
     -moz-user-select: none;
      -ms-user-select: none;
          user-select: none;
  -webkit-appearance: none;
  overflow: hidden;
  vertical-align: middle;
  border-radius: 2px; }
  .lmdc-button::before, .lmdc-button::after {
    position: absolute;
    border-radius: 50%;
    opacity: 0;
    pointer-events: none;
    content: ""; }
  .lmdc-button::before {
    transition: opacity 15ms linear;
    z-index: 1; }
  .lmdc-button.lmdc-ripple-upgraded::before {
    -webkit-transform: scale(var(--mdc-ripple-fg-scale, 1));
            transform: scale(var(--mdc-ripple-fg-scale, 1)); }
  .lmdc-button.lmdc-ripple-upgraded::after {
    top: 0;
    left: 0;
    -webkit-transform: scale(0);
            transform: scale(0);
    -webkit-transform-origin: center center;
            transform-origin: center center; }
  .lmdc-button.lmdc-ripple-upgraded--unbounded::after {
    top: var(--mdc-ripple-top, 0);
    left: var(--mdc-ripple-left, 0); }
  .lmdc-button.lmdc-ripple-upgraded--foreground-activation::after {
    -webkit-animation: 225ms mdc-ripple-fg-radius-in forwards, 75ms mdc-ripple-fg-opacity-in forwards;
            animation: 225ms mdc-ripple-fg-radius-in forwards, 75ms mdc-ripple-fg-opacity-in forwards; }
  .lmdc-button.lmdc-ripple-upgraded--foreground-deactivation::after {
    -webkit-animation: 150ms mdc-ripple-fg-opacity-out;
            animation: 150ms mdc-ripple-fg-opacity-out;
    -webkit-transform: translate(var(--mdc-ripple-fg-translate-end, 0)) scale(var(--mdc-ripple-fg-scale, 1));
            transform: translate(var(--mdc-ripple-fg-translate-end, 0)) scale(var(--mdc-ripple-fg-scale, 1)); }
  .lmdc-button::before, .lmdc-button::after {
    top: calc(50% - 100%);
    left: calc(50% - 100%);
    width: 200%;
    height: 200%; }
  .lmdc-button.lmdc-ripple-upgraded::after {
    width: var(--mdc-ripple-fg-size, 100%);
    height: var(--mdc-ripple-fg-size, 100%); }
  .lmdc-button::-moz-focus-inner {
    padding: 0;
    border: 0; }
  .lmdc-button:active {
    outline: none; }
  .lmdc-button:hover {
    cursor: pointer; }
  .lmdc-button:disabled {
    background-color: transparent;
    /* @alternate */
    color: rgba(0, 0, 0, 0.38);
    color: var(--mdc-theme-text-disabled-on-light, rgba(0, 0, 0, 0.38));
    cursor: default;
    pointer-events: none; }
  .lmdc-button:not(:disabled) {
    background-color: transparent; }
  .lmdc-button:not(:disabled) {
    /* @alternate */
    color: #6200ee;
    color: var(--mdc-theme-primary, #6200ee); }
  .lmdc-button::before, .lmdc-button::after {
    /* @alternate */
    background-color: #6200ee; }
    @supports not (-ms-ime-align: auto) {
      .lmdc-button::before, .lmdc-button::after {
        background-color: var(--mdc-theme-primary, #6200ee); } }
  .lmdc-button:hover::before {
    opacity: 0.04; }
  .lmdc-button:not(.lmdc-ripple-upgraded):focus::before, .lmdc-button.lmdc-ripple-upgraded--background-focused::before {
    transition-duration: 75ms;
    opacity: 0.12; }
  .lmdc-button:not(.lmdc-ripple-upgraded)::after {
    transition: opacity 150ms linear; }
  .lmdc-button:not(.lmdc-ripple-upgraded):active::after {
    transition-duration: 75ms;
    opacity: 0.16; }
  .lmdc-button.lmdc-ripple-upgraded {
    --mdc-ripple-fg-opacity: $opacity; }
  .lmdc-button .lmdc-button__icon {
    display: inline-block;
    width: 18px;
    height: 18px;
    margin-right: 8px;
    font-size: 18px;
    line-height: inherit;
    vertical-align: top; }

.lmdc-button--raised:disabled,
.lmdc-button--unelevated:disabled {
  background-color: rgba(0, 0, 0, 0.12);
  /* @alternate */
  color: rgba(0, 0, 0, 0.38);
  color: var(--mdc-theme-text-disabled-on-light, rgba(0, 0, 0, 0.38)); }

.lmdc-button--raised:not(:disabled),
.lmdc-button--unelevated:not(:disabled) {
  /* @alternate */
  background-color: #6200ee; }
  @supports not (-ms-ime-align: auto) {
    .lmdc-button--raised:not(:disabled),
    .lmdc-button--unelevated:not(:disabled) {
      background-color: var(--mdc-theme-primary, #6200ee); } }

.lmdc-button--raised:not(:disabled),
.lmdc-button--unelevated:not(:disabled) {
  /* @alternate */
  color: white;
  color: var(--mdc-theme-text-primary-on-primary, white); }

.lmdc-button--raised::before, .lmdc-button--raised::after, .lmdc-button--unelevated::before, .lmdc-button--unelevated::after {
  /* @alternate */
  background-color: white; }
  @supports not (-ms-ime-align: auto) {
    .lmdc-button--raised::before, .lmdc-button--raised::after, .lmdc-button--unelevated::before, .lmdc-button--unelevated::after {
      background-color: var(--mdc-theme-text-primary-on-primary, white); } }

.lmdc-button--raised:hover::before,
.lmdc-button--unelevated:hover::before {
  opacity: 0.08; }

.lmdc-button--raised:not(.lmdc-ripple-upgraded):focus::before, .lmdc-button--raised.lmdc-ripple-upgraded--background-focused::before, .lmdc-button--unelevated:not(.lmdc-ripple-upgraded):focus::before, .lmdc-button--unelevated.lmdc-ripple-upgraded--background-focused::before {
  transition-duration: 75ms;
  opacity: 0.24; }

.lmdc-button--raised:not(.lmdc-ripple-upgraded)::after,
.lmdc-button--unelevated:not(.lmdc-ripple-upgraded)::after {
  transition: opacity 150ms linear; }

.lmdc-button--raised:not(.lmdc-ripple-upgraded):active::after,
.lmdc-button--unelevated:not(.lmdc-ripple-upgraded):active::after {
  transition-duration: 75ms;
  opacity: 0.32; }

.lmdc-button--raised.lmdc-ripple-upgraded,
.lmdc-button--unelevated.lmdc-ripple-upgraded {
  --mdc-ripple-fg-opacity: $opacity; }

.lmdc-button--raised {
  box-shadow: 0px 3px 1px -2px rgba(0, 0, 0, 0.2), 0px 2px 2px 0px rgba(0, 0, 0, 0.14), 0px 1px 5px 0px rgba(0, 0, 0, 0.12);
  transition: box-shadow 280ms cubic-bezier(0.4, 0, 0.2, 1); }
  .lmdc-button--raised:hover, .lmdc-button--raised:focus {
    box-shadow: 0px 2px 4px -1px rgba(0, 0, 0, 0.2), 0px 4px 5px 0px rgba(0, 0, 0, 0.14), 0px 1px 10px 0px rgba(0, 0, 0, 0.12); }
  .lmdc-button--raised:active {
    box-shadow: 0px 5px 5px -3px rgba(0, 0, 0, 0.2), 0px 8px 10px 1px rgba(0, 0, 0, 0.14), 0px 3px 14px 2px rgba(0, 0, 0, 0.12); }
  .lmdc-button--raised:disabled {
    box-shadow: 0px 0px 0px 0px rgba(0, 0, 0, 0.2), 0px 0px 0px 0px rgba(0, 0, 0, 0.14), 0px 0px 0px 0px rgba(0, 0, 0, 0.12); }

.lmdc-button--stroked {
  border-style: solid;
  padding-right: 14px;
  padding-left: 14px;
  border-width: 2px;
  line-height: 32px; }
  .lmdc-button--stroked:disabled {
    /* @alternate */
    border-color: rgba(0, 0, 0, 0.38);
    border-color: var(--mdc-theme-text-disabled-on-light, rgba(0, 0, 0, 0.38)); }
  .lmdc-button--stroked.lmdc-button--dense {
    line-height: 27px; }
  .lmdc-button--stroked.lmdc-button--compact {
    padding-right: 6px;
    padding-left: 6px; }
  .lmdc-button--stroked:not(:disabled) {
    /* @alternate */
    border-color: #6200ee;
    border-color: var(--mdc-theme-primary, #6200ee); }

.lmdc-button--compact {
  padding: 0 8px; }

.lmdc-button--dense {
  height: 32px;
  font-size: .8125rem;
  line-height: 32px; }

/**
 * The css property used for elevation. In most cases this should not be changed. It is exposed
 * as a variable for abstraction / easy use when needing to reference the property directly, for
 * example in a `will-change` rule.
 */
/**
 * The default duration value for elevation transitions.
 */
/**
 * The default easing value for elevation transitions.
 */
/**
 * Applies the correct CSS rules to an element to give it the elevation specified by $z-value.
 * The $z-value must be between 0 and 24.
 * If $color has an alpha channel, it will be ignored and overridden. To increase the opacity of the shadow, use
 * $opacity-boost.
 */
/**
 * Returns a string that can be used as the value for a `transition` property for elevation.
 * Calling this function directly is useful in situations where a component needs to transition
 * more than one property.
 *
 * ```scss
 * .foo {
 *   transition: mdc-elevation-transition-value(), opacity 100ms ease;
 *   will-change: $mdc-elevation-property, opacity;
 * }
 * ```
 */
/**
 * Creates a rule that will be applied when an MDC Web component is within the context of an RTL layout.
 *
 * Usage Example:
 * ```scss
 * .mdc-foo {
 *   position: absolute;
 *   left: 0;
 *
 *   @include mdc-rtl {
 *     left: auto;
 *     right: 0;
 *   }
 *
 *   &__bar {
 *     margin-left: 4px;
 *     @include mdc-rtl(".mdc-foo") {
 *       margin-left: auto;
 *       margin-right: 4px;
 *     }
 *   }
 * }
 *
 * .mdc-foo--mod {
 *   padding-left: 4px;
 *
 *   @include mdc-rtl {
 *     padding-left: auto;
 *     padding-right: 4px;
 *   }
 * }
 * ```
 *
 * Note that this works by checking for [dir="rtl"] on an ancestor element. While this will work
 * in most cases, it will in some cases lead to false negatives, e.g.
 *
 * ```html
 * <html dir="rtl">
 *   <!-- ... -->
 *   <div dir="ltr">
 *     <div class="mdc-foo">Styled incorrectly as RTL!</div>
 *   </div>
 * </html>
 * ```
 *
 * In the future, selectors such as :dir (http://mdn.io/:dir) will help us mitigate this.
 */
/**
 * Takes a base box-model property - e.g. margin / border / padding - along with a default
 * direction and value, and emits rules which apply the value to the
 * "<base-property>-<default-direction>" property by default, but flips the direction
 * when within an RTL context.
 *
 * For example:
 *
 * ```scss
 * .mdc-foo {
 *   @include mdc-rtl-reflexive-box(margin, left, 8px);
 * }
 * ```
 * is equivalent to:
 *
 * ```scss
 * .mdc-foo {
 *   margin-left: 8px;
 *
 *   @include mdc-rtl {
 *     margin-right: 8px;
 *     margin-left: 0;
 *   }
 * }
 * ```
 * whereas:
 *
 * ```scss
 * .mdc-foo {
 *   @include mdc-rtl-reflexive-box(margin, right, 8px);
 * }
 * ```
 * is equivalent to:
 *
 * ```scss
 * .mdc-foo {
 *   margin-right: 8px;
 *
 *   @include mdc-rtl {
 *     margin-right: 0;
 *     margin-left: 8px;
 *   }
 * }
 * ```
 *
 * You can also pass a 4th optional $root-selector argument which will be forwarded to `mdc-rtl`,
 * e.g. `@include mdc-rtl-reflexive-box(margin, left, 8px, ".mdc-component")`.
 *
 * Note that this function will always zero out the original value in an RTL context. If you're
 * trying to flip the values, use mdc-rtl-reflexive-property().
 */
/**
 * Takes a base property and emits rules that assign <base-property>-left to <left-value> and
 * <base-property>-right to <right-value> in a LTR context, and vice versa in a RTL context.
 * For example:
 *
 * ```scss
 * .mdc-foo {
 *   @include mdc-rtl-reflexive-property(margin, auto, 12px);
 * }
 * ```
 * is equivalent to:
 *
 * ```scss
 * .mdc-foo {
 *   margin-left: auto;
 *   margin-right: 12px;
 *
 *   @include mdc-rtl {
 *     margin-left: 12px;
 *     margin-right: auto;
 *   }
 * }
 * ```
 *
 * A 4th optional $root-selector argument can be given, which will be passed to `mdc-rtl`.
 */
/**
 * Takes an argument specifying a horizontal position property (either "left" or "right") as well
 * as a value, and applies that value to the specified position in a LTR context, and flips it in a
 * RTL context. For example:
 *
 * ```scss
 * .mdc-foo {
 *   @include mdc-rtl-reflexive-position(left, 0);
 *   position: absolute;
 * }
 * ```
 * is equivalent to:
 *
 * ```scss
 *  .mdc-foo {
 *    position: absolute;
 *    left: 0;
 *    right: initial;
 *
 *    @include mdc-rtl {
 *      right: 0;
 *      left: initial;
 *    }
 *  }
 * ```
 * An optional third $root-selector argument may also be given, which is passed to `mdc-rtl`.
 */
.lmdc-card {
  /* @alternate */
  background-color: #fff;
  background-color: var(--mdc-theme-background, #fff);
  border-radius: 2px;
  box-shadow: 0px 3px 1px -2px rgba(0, 0, 0, 0.2), 0px 2px 2px 0px rgba(0, 0, 0, 0.14), 0px 1px 5px 0px rgba(0, 0, 0, 0.12);
  display: flex;
  flex-direction: column;
  box-sizing: border-box; }

.lmdc-card--stroked {
  box-shadow: 0px 0px 0px 0px rgba(0, 0, 0, 0.2), 0px 0px 0px 0px rgba(0, 0, 0, 0.14), 0px 0px 0px 0px rgba(0, 0, 0, 0.12);
  border: 1px solid #dbdbdb; }

.lmdc-card__media {
  position: relative;
  box-sizing: border-box;
  background-repeat: no-repeat;
  background-size: cover; }
  .lmdc-card__media::before {
    display: block;
    content: ""; }

.lmdc-card__media:first-child {
  border-top-left-radius: inherit;
  border-top-right-radius: inherit; }

.lmdc-card__media:last-child {
  border-bottom-left-radius: inherit;
  border-bottom-right-radius: inherit; }

.lmdc-card__media--square::before {
  margin-top: 100%; }

.lmdc-card__media--16-9::before {
  margin-top: 56.25%; }

.lmdc-card__media-content {
  position: absolute;
  top: 0;
  right: 0;
  bottom: 0;
  left: 0;
  box-sizing: border-box; }

.lmdc-card__primary-action {
  --mdc-ripple-fg-size: 0;
  --mdc-ripple-left: 0;
  --mdc-ripple-top: 0;
  --mdc-ripple-fg-scale: 1;
  --mdc-ripple-fg-translate-end: 0;
  --mdc-ripple-fg-translate-start: 0;
  -webkit-tap-highlight-color: rgba(0, 0, 0, 0);
  will-change: transform, opacity;
  display: flex;
  flex-direction: column;
  box-sizing: border-box;
  position: relative;
  outline: none;
  color: inherit;
  text-decoration: none;
  cursor: pointer;
  overflow: hidden; }
  .lmdc-card__primary-action::before, .lmdc-card__primary-action::after {
    position: absolute;
    border-radius: 50%;
    opacity: 0;
    pointer-events: none;
    content: ""; }
  .lmdc-card__primary-action::before {
    transition: opacity 15ms linear;
    z-index: 1; }
  .lmdc-card__primary-action.lmdc-ripple-upgraded::before {
    -webkit-transform: scale(var(--mdc-ripple-fg-scale, 1));
            transform: scale(var(--mdc-ripple-fg-scale, 1)); }
  .lmdc-card__primary-action.lmdc-ripple-upgraded::after {
    top: 0;
    left: 0;
    -webkit-transform: scale(0);
            transform: scale(0);
    -webkit-transform-origin: center center;
            transform-origin: center center; }
  .lmdc-card__primary-action.lmdc-ripple-upgraded--unbounded::after {
    top: var(--mdc-ripple-top, 0);
    left: var(--mdc-ripple-left, 0); }
  .lmdc-card__primary-action.lmdc-ripple-upgraded--foreground-activation::after {
    -webkit-animation: 225ms mdc-ripple-fg-radius-in forwards, 75ms mdc-ripple-fg-opacity-in forwards;
            animation: 225ms mdc-ripple-fg-radius-in forwards, 75ms mdc-ripple-fg-opacity-in forwards; }
  .lmdc-card__primary-action.lmdc-ripple-upgraded--foreground-deactivation::after {
    -webkit-animation: 150ms mdc-ripple-fg-opacity-out;
            animation: 150ms mdc-ripple-fg-opacity-out;
    -webkit-transform: translate(var(--mdc-ripple-fg-translate-end, 0)) scale(var(--mdc-ripple-fg-scale, 1));
            transform: translate(var(--mdc-ripple-fg-translate-end, 0)) scale(var(--mdc-ripple-fg-scale, 1)); }
  .lmdc-card__primary-action::before, .lmdc-card__primary-action::after {
    top: calc(50% - 100%);
    left: calc(50% - 100%);
    width: 200%;
    height: 200%; }
  .lmdc-card__primary-action.lmdc-ripple-upgraded::after {
    width: var(--mdc-ripple-fg-size, 100%);
    height: var(--mdc-ripple-fg-size, 100%); }
  .lmdc-card__primary-action::before, .lmdc-card__primary-action::after {
    background-color: black; }
  .lmdc-card__primary-action:hover::before {
    opacity: 0.04; }
  .lmdc-card__primary-action:not(.lmdc-ripple-upgraded):focus::before, .lmdc-card__primary-action.lmdc-ripple-upgraded--background-focused::before {
    transition-duration: 75ms;
    opacity: 0.12; }
  .lmdc-card__primary-action:not(.lmdc-ripple-upgraded)::after {
    transition: opacity 150ms linear; }
  .lmdc-card__primary-action:not(.lmdc-ripple-upgraded):active::after {
    transition-duration: 75ms;
    opacity: 0.16; }
  .lmdc-card__primary-action.lmdc-ripple-upgraded {
    --mdc-ripple-fg-opacity: $opacity; }

.lmdc-card__primary-action:first-child {
  border-top-left-radius: inherit;
  border-top-right-radius: inherit; }

.lmdc-card__primary-action:last-child {
  border-bottom-left-radius: inherit;
  border-bottom-right-radius: inherit; }

.lmdc-card__actions {
  display: flex;
  flex-direction: row;
  align-items: center;
  box-sizing: border-box;
  min-height: 52px;
  padding: 8px; }

.lmdc-card__actions--full-bleed {
  padding: 0; }

.lmdc-card__action-buttons,
.lmdc-card__action-icons {
  display: flex;
  flex-direction: row;
  align-items: center;
  box-sizing: border-box; }

.lmdc-card__action-icons {
  /* @alternate */
  color: rgba(0, 0, 0, 0.38);
  color: var(--mdc-theme-text-icon-on-background, rgba(0, 0, 0, 0.38));
  flex-grow: 1;
  justify-content: flex-end; }

.lmdc-card__action-buttons + .lmdc-card__action-icons {
  margin-left: 16px;
  margin-right: 0; }
  [dir="rtl"] .lmdc-card__action-buttons + .lmdc-card__action-icons, .lmdc-card__action-buttons + .lmdc-card__action-icons[dir="rtl"] {
    margin-left: 0;
    margin-right: 16px; }

.lmdc-card__action {
  display: inline-flex;
  flex-direction: row;
  align-items: center;
  box-sizing: border-box;
  justify-content: center;
  cursor: pointer;
  -webkit-user-select: none;
     -moz-user-select: none;
      -ms-user-select: none;
          user-select: none; }
  .lmdc-card__action:focus {
    outline: none; }

.lmdc-card__action--button {
  margin-left: 0;
  margin-right: 8px;
  padding: 0 8px; }
  [dir="rtl"] .lmdc-card__action--button, .lmdc-card__action--button[dir="rtl"] {
    margin-left: 8px;
    margin-right: 0; }
  .lmdc-card__action--button:last-child {
    margin-left: 0;
    margin-right: 0; }
    [dir="rtl"] .lmdc-card__action--button:last-child, .lmdc-card__action--button:last-child[dir="rtl"] {
      margin-left: 0;
      margin-right: 0; }

.lmdc-card__actions--full-bleed .lmdc-card__action--button {
  justify-content: space-between;
  width: 100%;
  height: auto;
  max-height: none;
  margin: 0;
  padding: 8px 16px;
  text-align: left; }
  [dir="rtl"] .lmdc-card__actions--full-bleed .lmdc-card__action--button, .lmdc-card__actions--full-bleed .lmdc-card__action--button[dir="rtl"] {
    text-align: right; }

.lmdc-card__action--icon {
  margin: -6px 0;
  padding: 12px; }

.lmdc-card__action--icon:not(:disabled) {
  /* @alternate */
  color: rgba(0, 0, 0, 0.38);
  color: var(--mdc-theme-text-icon-on-background, rgba(0, 0, 0, 0.38)); }

/**
 * Creates a rule that will be applied when an MDC Web component is within the context of an RTL layout.
 *
 * Usage Example:
 * ```scss
 * .mdc-foo {
 *   position: absolute;
 *   left: 0;
 *
 *   @include mdc-rtl {
 *     left: auto;
 *     right: 0;
 *   }
 *
 *   &__bar {
 *     margin-left: 4px;
 *     @include mdc-rtl(".mdc-foo") {
 *       margin-left: auto;
 *       margin-right: 4px;
 *     }
 *   }
 * }
 *
 * .mdc-foo--mod {
 *   padding-left: 4px;
 *
 *   @include mdc-rtl {
 *     padding-left: auto;
 *     padding-right: 4px;
 *   }
 * }
 * ```
 *
 * Note that this works by checking for [dir="rtl"] on an ancestor element. While this will work
 * in most cases, it will in some cases lead to false negatives, e.g.
 *
 * ```html
 * <html dir="rtl">
 *   <!-- ... -->
 *   <div dir="ltr">
 *     <div class="mdc-foo">Styled incorrectly as RTL!</div>
 *   </div>
 * </html>
 * ```
 *
 * In the future, selectors such as :dir (http://mdn.io/:dir) will help us mitigate this.
 */
/**
 * Takes a base box-model property - e.g. margin / border / padding - along with a default
 * direction and value, and emits rules which apply the value to the
 * "<base-property>-<default-direction>" property by default, but flips the direction
 * when within an RTL context.
 *
 * For example:
 *
 * ```scss
 * .mdc-foo {
 *   @include mdc-rtl-reflexive-box(margin, left, 8px);
 * }
 * ```
 * is equivalent to:
 *
 * ```scss
 * .mdc-foo {
 *   margin-left: 8px;
 *
 *   @include mdc-rtl {
 *     margin-right: 8px;
 *     margin-left: 0;
 *   }
 * }
 * ```
 * whereas:
 *
 * ```scss
 * .mdc-foo {
 *   @include mdc-rtl-reflexive-box(margin, right, 8px);
 * }
 * ```
 * is equivalent to:
 *
 * ```scss
 * .mdc-foo {
 *   margin-right: 8px;
 *
 *   @include mdc-rtl {
 *     margin-right: 0;
 *     margin-left: 8px;
 *   }
 * }
 * ```
 *
 * You can also pass a 4th optional $root-selector argument which will be forwarded to `mdc-rtl`,
 * e.g. `@include mdc-rtl-reflexive-box(margin, left, 8px, ".mdc-component")`.
 *
 * Note that this function will always zero out the original value in an RTL context. If you're
 * trying to flip the values, use mdc-rtl-reflexive-property().
 */
/**
 * Takes a base property and emits rules that assign <base-property>-left to <left-value> and
 * <base-property>-right to <right-value> in a LTR context, and vice versa in a RTL context.
 * For example:
 *
 * ```scss
 * .mdc-foo {
 *   @include mdc-rtl-reflexive-property(margin, auto, 12px);
 * }
 * ```
 * is equivalent to:
 *
 * ```scss
 * .mdc-foo {
 *   margin-left: auto;
 *   margin-right: 12px;
 *
 *   @include mdc-rtl {
 *     margin-left: 12px;
 *     margin-right: auto;
 *   }
 * }
 * ```
 *
 * A 4th optional $root-selector argument can be given, which will be passed to `mdc-rtl`.
 */
/**
 * Takes an argument specifying a horizontal position property (either "left" or "right") as well
 * as a value, and applies that value to the specified position in a LTR context, and flips it in a
 * RTL context. For example:
 *
 * ```scss
 * .mdc-foo {
 *   @include mdc-rtl-reflexive-position(left, 0);
 *   position: absolute;
 * }
 * ```
 * is equivalent to:
 *
 * ```scss
 *  .mdc-foo {
 *    position: absolute;
 *    left: 0;
 *    right: initial;
 *
 *    @include mdc-rtl {
 *      right: 0;
 *      left: initial;
 *    }
 *  }
 * ```
 * An optional third $root-selector argument may also be given, which is passed to `mdc-rtl`.
 */
@-webkit-keyframes mdc-checkbox-unchecked-checked-checkmark-path {
  0%,
  50% {
    stroke-dashoffset: 29.78334; }
  50% {
    -webkit-animation-timing-function: cubic-bezier(0, 0, 0.2, 1);
            animation-timing-function: cubic-bezier(0, 0, 0.2, 1); }
  100% {
    stroke-dashoffset: 0; } }
@keyframes mdc-checkbox-unchecked-checked-checkmark-path {
  0%,
  50% {
    stroke-dashoffset: 29.78334; }
  50% {
    -webkit-animation-timing-function: cubic-bezier(0, 0, 0.2, 1);
            animation-timing-function: cubic-bezier(0, 0, 0.2, 1); }
  100% {
    stroke-dashoffset: 0; } }

@-webkit-keyframes mdc-checkbox-unchecked-indeterminate-mixedmark {
  0%,
  68.2% {
    -webkit-transform: scaleX(0);
            transform: scaleX(0); }
  68.2% {
    -webkit-animation-timing-function: cubic-bezier(0, 0, 0, 1);
            animation-timing-function: cubic-bezier(0, 0, 0, 1); }
  100% {
    -webkit-transform: scaleX(1);
            transform: scaleX(1); } }

@keyframes mdc-checkbox-unchecked-indeterminate-mixedmark {
  0%,
  68.2% {
    -webkit-transform: scaleX(0);
            transform: scaleX(0); }
  68.2% {
    -webkit-animation-timing-function: cubic-bezier(0, 0, 0, 1);
            animation-timing-function: cubic-bezier(0, 0, 0, 1); }
  100% {
    -webkit-transform: scaleX(1);
            transform: scaleX(1); } }

@-webkit-keyframes mdc-checkbox-checked-unchecked-checkmark-path {
  from {
    -webkit-animation-timing-function: cubic-bezier(0.4, 0, 1, 1);
            animation-timing-function: cubic-bezier(0.4, 0, 1, 1);
    opacity: 1;
    stroke-dashoffset: 0; }
  to {
    opacity: 0;
    stroke-dashoffset: -29.78334; } }

@keyframes mdc-checkbox-checked-unchecked-checkmark-path {
  from {
    -webkit-animation-timing-function: cubic-bezier(0.4, 0, 1, 1);
            animation-timing-function: cubic-bezier(0.4, 0, 1, 1);
    opacity: 1;
    stroke-dashoffset: 0; }
  to {
    opacity: 0;
    stroke-dashoffset: -29.78334; } }

@-webkit-keyframes mdc-checkbox-checked-indeterminate-checkmark {
  from {
    -webkit-animation-timing-function: cubic-bezier(0, 0, 0.2, 1);
            animation-timing-function: cubic-bezier(0, 0, 0.2, 1);
    -webkit-transform: rotate(0deg);
            transform: rotate(0deg);
    opacity: 1; }
  to {
    -webkit-transform: rotate(45deg);
            transform: rotate(45deg);
    opacity: 0; } }

@keyframes mdc-checkbox-checked-indeterminate-checkmark {
  from {
    -webkit-animation-timing-function: cubic-bezier(0, 0, 0.2, 1);
            animation-timing-function: cubic-bezier(0, 0, 0.2, 1);
    -webkit-transform: rotate(0deg);
            transform: rotate(0deg);
    opacity: 1; }
  to {
    -webkit-transform: rotate(45deg);
            transform: rotate(45deg);
    opacity: 0; } }

@-webkit-keyframes mdc-checkbox-indeterminate-checked-checkmark {
  from {
    -webkit-animation-timing-function: cubic-bezier(0.14, 0, 0, 1);
            animation-timing-function: cubic-bezier(0.14, 0, 0, 1);
    -webkit-transform: rotate(45deg);
            transform: rotate(45deg);
    opacity: 0; }
  to {
    -webkit-transform: rotate(360deg);
            transform: rotate(360deg);
    opacity: 1; } }

@keyframes mdc-checkbox-indeterminate-checked-checkmark {
  from {
    -webkit-animation-timing-function: cubic-bezier(0.14, 0, 0, 1);
            animation-timing-function: cubic-bezier(0.14, 0, 0, 1);
    -webkit-transform: rotate(45deg);
            transform: rotate(45deg);
    opacity: 0; }
  to {
    -webkit-transform: rotate(360deg);
            transform: rotate(360deg);
    opacity: 1; } }

@-webkit-keyframes mdc-checkbox-checked-indeterminate-mixedmark {
  from {
    -webkit-animation-timing-function: mdc-animation-deceleration-curve-timing-function;
            animation-timing-function: mdc-animation-deceleration-curve-timing-function;
    -webkit-transform: rotate(-45deg);
            transform: rotate(-45deg);
    opacity: 0; }
  to {
    -webkit-transform: rotate(0deg);
            transform: rotate(0deg);
    opacity: 1; } }

@keyframes mdc-checkbox-checked-indeterminate-mixedmark {
  from {
    -webkit-animation-timing-function: mdc-animation-deceleration-curve-timing-function;
            animation-timing-function: mdc-animation-deceleration-curve-timing-function;
    -webkit-transform: rotate(-45deg);
            transform: rotate(-45deg);
    opacity: 0; }
  to {
    -webkit-transform: rotate(0deg);
            transform: rotate(0deg);
    opacity: 1; } }

@-webkit-keyframes mdc-checkbox-indeterminate-checked-mixedmark {
  from {
    -webkit-animation-timing-function: cubic-bezier(0.14, 0, 0, 1);
            animation-timing-function: cubic-bezier(0.14, 0, 0, 1);
    -webkit-transform: rotate(0deg);
            transform: rotate(0deg);
    opacity: 1; }
  to {
    -webkit-transform: rotate(315deg);
            transform: rotate(315deg);
    opacity: 0; } }

@keyframes mdc-checkbox-indeterminate-checked-mixedmark {
  from {
    -webkit-animation-timing-function: cubic-bezier(0.14, 0, 0, 1);
            animation-timing-function: cubic-bezier(0.14, 0, 0, 1);
    -webkit-transform: rotate(0deg);
            transform: rotate(0deg);
    opacity: 1; }
  to {
    -webkit-transform: rotate(315deg);
            transform: rotate(315deg);
    opacity: 0; } }

@-webkit-keyframes mdc-checkbox-indeterminate-unchecked-mixedmark {
  0% {
    -webkit-animation-timing-function: linear;
            animation-timing-function: linear;
    -webkit-transform: scaleX(1);
            transform: scaleX(1);
    opacity: 1; }
  32.8%,
  100% {
    -webkit-transform: scaleX(0);
            transform: scaleX(0);
    opacity: 0; } }

@keyframes mdc-checkbox-indeterminate-unchecked-mixedmark {
  0% {
    -webkit-animation-timing-function: linear;
            animation-timing-function: linear;
    -webkit-transform: scaleX(1);
            transform: scaleX(1);
    opacity: 1; }
  32.8%,
  100% {
    -webkit-transform: scaleX(0);
            transform: scaleX(0);
    opacity: 0; } }

.lmdc-checkbox {
  display: inline-block;
  position: relative;
  flex: 0 0 18px;
  box-sizing: content-box;
  width: 18px;
  height: 18px;
  padding: 11px;
  line-height: 0;
  white-space: nowrap;
  cursor: pointer;
  vertical-align: bottom;
  --mdc-ripple-fg-size: 0;
  --mdc-ripple-left: 0;
  --mdc-ripple-top: 0;
  --mdc-ripple-fg-scale: 1;
  --mdc-ripple-fg-translate-end: 0;
  --mdc-ripple-fg-translate-start: 0;
  -webkit-tap-highlight-color: rgba(0, 0, 0, 0);
  will-change: transform, opacity; }
  .lmdc-checkbox::before, .lmdc-checkbox::after {
    position: absolute;
    border-radius: 50%;
    opacity: 0;
    pointer-events: none;
    content: ""; }
  .lmdc-checkbox::before {
    transition: opacity 15ms linear;
    z-index: 1; }
  .lmdc-checkbox.lmdc-ripple-upgraded::before {
    -webkit-transform: scale(var(--mdc-ripple-fg-scale, 1));
            transform: scale(var(--mdc-ripple-fg-scale, 1)); }
  .lmdc-checkbox.lmdc-ripple-upgraded::after {
    top: 0;
    left: 0;
    -webkit-transform: scale(0);
            transform: scale(0);
    -webkit-transform-origin: center center;
            transform-origin: center center; }
  .lmdc-checkbox.lmdc-ripple-upgraded--unbounded::after {
    top: var(--mdc-ripple-top, 0);
    left: var(--mdc-ripple-left, 0); }
  .lmdc-checkbox.lmdc-ripple-upgraded--foreground-activation::after {
    -webkit-animation: 225ms mdc-ripple-fg-radius-in forwards, 75ms mdc-ripple-fg-opacity-in forwards;
            animation: 225ms mdc-ripple-fg-radius-in forwards, 75ms mdc-ripple-fg-opacity-in forwards; }
  .lmdc-checkbox.lmdc-ripple-upgraded--foreground-deactivation::after {
    -webkit-animation: 150ms mdc-ripple-fg-opacity-out;
            animation: 150ms mdc-ripple-fg-opacity-out;
    -webkit-transform: translate(var(--mdc-ripple-fg-translate-end, 0)) scale(var(--mdc-ripple-fg-scale, 1));
            transform: translate(var(--mdc-ripple-fg-translate-end, 0)) scale(var(--mdc-ripple-fg-scale, 1)); }
  .lmdc-checkbox::before, .lmdc-checkbox::after {
    /* @alternate */
    background-color: #018786; }
    @supports not (-ms-ime-align: auto) {
      .lmdc-checkbox::before, .lmdc-checkbox::after {
        background-color: var(--mdc-theme-secondary, #018786); } }
  .lmdc-checkbox:hover::before {
    opacity: 0.04; }
  .lmdc-checkbox:not(.lmdc-ripple-upgraded):focus::before, .lmdc-checkbox.lmdc-ripple-upgraded--background-focused::before {
    transition-duration: 75ms;
    opacity: 0.12; }
  .lmdc-checkbox:not(.lmdc-ripple-upgraded)::after {
    transition: opacity 150ms linear; }
  .lmdc-checkbox:not(.lmdc-ripple-upgraded):active::after {
    transition-duration: 75ms;
    opacity: 0.16; }
  .lmdc-checkbox.lmdc-ripple-upgraded {
    --mdc-ripple-fg-opacity: $opacity; }
  .lmdc-checkbox::before, .lmdc-checkbox::after {
    top: calc(50% - 50%);
    left: calc(50% - 50%);
    width: 100%;
    height: 100%; }
  .lmdc-checkbox.lmdc-ripple-upgraded::before, .lmdc-checkbox.lmdc-ripple-upgraded::after {
    top: var(--mdc-ripple-top, calc(50% - 50%));
    left: var(--mdc-ripple-left, calc(50% - 50%));
    width: var(--mdc-ripple-fg-size, 100%);
    height: var(--mdc-ripple-fg-size, 100%); }
  .lmdc-checkbox.lmdc-ripple-upgraded::after {
    width: var(--mdc-ripple-fg-size, 100%);
    height: var(--mdc-ripple-fg-size, 100%); }

.lmdc-checkbox__checkmark-path {
  stroke: white !important; }

.lmdc-checkbox__mixedmark {
  background-color: white; }

.lmdc-checkbox__background::before {
  /* @alternate */
  background-color: #018786; }
  @supports not (-ms-ime-align: auto) {
    .lmdc-checkbox__background::before {
      background-color: var(--mdc-theme-secondary, #018786); } }

.lmdc-checkbox__native-control:enabled:not(:checked):not(:indeterminate) ~ .lmdc-checkbox__background {
  border-color: rgba(0, 0, 0, 0.54);
  background-color: transparent; }

.lmdc-checkbox__native-control:enabled:checked ~ .lmdc-checkbox__background,
.lmdc-checkbox__native-control:enabled:indeterminate ~ .lmdc-checkbox__background {
  /* @alternate */
  border-color: #018786;
  border-color: var(--mdc-theme-secondary, #018786);
  /* @alternate */
  background-color: #018786;
  background-color: var(--mdc-theme-secondary, #018786); }

@-webkit-keyframes mdc-checkbox-fade-in-background-0 {
  0% {
    border-color: rgba(0, 0, 0, 0.54);
    background-color: transparent; }
  50% {
    /* @alternate */
    border-color: #018786;
    border-color: var(--mdc-theme-secondary, #018786);
    /* @alternate */
    background-color: #018786;
    background-color: var(--mdc-theme-secondary, #018786); } }

@keyframes mdc-checkbox-fade-in-background-0 {
  0% {
    border-color: rgba(0, 0, 0, 0.54);
    background-color: transparent; }
  50% {
    /* @alternate */
    border-color: #018786;
    border-color: var(--mdc-theme-secondary, #018786);
    /* @alternate */
    background-color: #018786;
    background-color: var(--mdc-theme-secondary, #018786); } }

@-webkit-keyframes mdc-checkbox-fade-out-background-0 {
  0%, 80% {
    /* @alternate */
    border-color: #018786;
    border-color: var(--mdc-theme-secondary, #018786);
    /* @alternate */
    background-color: #018786;
    background-color: var(--mdc-theme-secondary, #018786); }
  100% {
    border-color: rgba(0, 0, 0, 0.54);
    background-color: transparent; } }

@keyframes mdc-checkbox-fade-out-background-0 {
  0%, 80% {
    /* @alternate */
    border-color: #018786;
    border-color: var(--mdc-theme-secondary, #018786);
    /* @alternate */
    background-color: #018786;
    background-color: var(--mdc-theme-secondary, #018786); }
  100% {
    border-color: rgba(0, 0, 0, 0.54);
    background-color: transparent; } }

.lmdc-checkbox--anim-unchecked-checked .lmdc-checkbox__native-control:enabled ~ .lmdc-checkbox__background, .lmdc-checkbox--anim-unchecked-indeterminate .lmdc-checkbox__native-control:enabled ~ .lmdc-checkbox__background {
  -webkit-animation-name: mdc-checkbox-fade-in-background-0;
          animation-name: mdc-checkbox-fade-in-background-0; }

.lmdc-checkbox--anim-checked-unchecked .lmdc-checkbox__native-control:enabled ~ .lmdc-checkbox__background, .lmdc-checkbox--anim-indeterminate-unchecked .lmdc-checkbox__native-control:enabled ~ .lmdc-checkbox__background {
  -webkit-animation-name: mdc-checkbox-fade-out-background-0;
          animation-name: mdc-checkbox-fade-out-background-0; }

.lmdc-checkbox__native-control:disabled:not(:checked):not(:indeterminate) ~ .lmdc-checkbox__background {
  border-color: rgba(0, 0, 0, 0.26); }

.lmdc-checkbox__native-control:disabled:checked ~ .lmdc-checkbox__background,
.lmdc-checkbox__native-control:disabled:indeterminate ~ .lmdc-checkbox__background {
  border-color: transparent;
  background-color: rgba(0, 0, 0, 0.26); }

.lmdc-checkbox--disabled {
  cursor: default;
  pointer-events: none; }

.lmdc-checkbox__background {
  left: 11px;
  right: initial;
  display: inline-flex;
  position: absolute;
  top: 11px;
  bottom: 0;
  align-items: center;
  justify-content: center;
  box-sizing: border-box;
  width: 45%;
  height: 45%;
  transition: background-color 90ms 0ms cubic-bezier(0.4, 0, 0.6, 1), border-color 90ms 0ms cubic-bezier(0.4, 0, 0.6, 1);
  border: 2px solid currentColor;
  border-radius: 2px;
  background-color: transparent;
  pointer-events: none;
  will-change: background-color, border-color; }
  .lmdc-checkbox[dir="rtl"] .lmdc-checkbox__background,
  [dir="rtl"] .lmdc-checkbox .lmdc-checkbox__background {
    left: initial;
    right: 11px; }

.lmdc-checkbox__checkmark {
  position: absolute;
  top: 0;
  right: 0;
  bottom: 0;
  left: 0;
  width: 100%;
  transition: opacity 180ms 0ms cubic-bezier(0.4, 0, 0.6, 1);
  opacity: 0; }
  .lmdc-checkbox--upgraded .lmdc-checkbox__checkmark {
    opacity: 1; }

.lmdc-checkbox__checkmark-path {
  transition: stroke-dashoffset 180ms 0ms cubic-bezier(0.4, 0, 0.6, 1);
  stroke-width: 3.12px;
  stroke-dashoffset: 29.78334;
  stroke-dasharray: 29.78334; }

.lmdc-checkbox__mixedmark {
  width: 100%;
  height: 2px;
  -webkit-transform: scaleX(0) rotate(0deg);
          transform: scaleX(0) rotate(0deg);
  transition: opacity 90ms 0ms cubic-bezier(0.4, 0, 0.6, 1), -webkit-transform 90ms 0ms cubic-bezier(0.4, 0, 0.6, 1);
  transition: opacity 90ms 0ms cubic-bezier(0.4, 0, 0.6, 1), transform 90ms 0ms cubic-bezier(0.4, 0, 0.6, 1);
  transition: opacity 90ms 0ms cubic-bezier(0.4, 0, 0.6, 1), transform 90ms 0ms cubic-bezier(0.4, 0, 0.6, 1), -webkit-transform 90ms 0ms cubic-bezier(0.4, 0, 0.6, 1);
  opacity: 0; }

.lmdc-checkbox--upgraded .lmdc-checkbox__background,
.lmdc-checkbox--upgraded .lmdc-checkbox__checkmark,
.lmdc-checkbox--upgraded .lmdc-checkbox__checkmark-path,
.lmdc-checkbox--upgraded .lmdc-checkbox__mixedmark {
  transition: none !important; }

.lmdc-checkbox--anim-unchecked-checked .lmdc-checkbox__background, .lmdc-checkbox--anim-unchecked-indeterminate .lmdc-checkbox__background, .lmdc-checkbox--anim-checked-unchecked .lmdc-checkbox__background, .lmdc-checkbox--anim-indeterminate-unchecked .lmdc-checkbox__background {
  -webkit-animation-duration: 180ms;
          animation-duration: 180ms;
  -webkit-animation-timing-function: linear;
          animation-timing-function: linear; }

.lmdc-checkbox--anim-unchecked-checked .lmdc-checkbox__checkmark-path {
  -webkit-animation: 180ms linear 0s mdc-checkbox-unchecked-checked-checkmark-path;
          animation: 180ms linear 0s mdc-checkbox-unchecked-checked-checkmark-path;
  transition: none; }

.lmdc-checkbox--anim-unchecked-indeterminate .lmdc-checkbox__mixedmark {
  -webkit-animation: 90ms linear 0s mdc-checkbox-unchecked-indeterminate-mixedmark;
          animation: 90ms linear 0s mdc-checkbox-unchecked-indeterminate-mixedmark;
  transition: none; }

.lmdc-checkbox--anim-checked-unchecked .lmdc-checkbox__checkmark-path {
  -webkit-animation: 90ms linear 0s mdc-checkbox-checked-unchecked-checkmark-path;
          animation: 90ms linear 0s mdc-checkbox-checked-unchecked-checkmark-path;
  transition: none; }

.lmdc-checkbox--anim-checked-indeterminate .lmdc-checkbox__checkmark {
  -webkit-animation: 90ms linear 0s mdc-checkbox-checked-indeterminate-checkmark;
          animation: 90ms linear 0s mdc-checkbox-checked-indeterminate-checkmark;
  transition: none; }

.lmdc-checkbox--anim-checked-indeterminate .lmdc-checkbox__mixedmark {
  -webkit-animation: 90ms linear 0s mdc-checkbox-checked-indeterminate-mixedmark;
          animation: 90ms linear 0s mdc-checkbox-checked-indeterminate-mixedmark;
  transition: none; }

.lmdc-checkbox--anim-indeterminate-checked .lmdc-checkbox__checkmark {
  -webkit-animation: 500ms linear 0s mdc-checkbox-indeterminate-checked-checkmark;
          animation: 500ms linear 0s mdc-checkbox-indeterminate-checked-checkmark;
  transition: none; }

.lmdc-checkbox--anim-indeterminate-checked .lmdc-checkbox__mixedmark {
  -webkit-animation: 500ms linear 0s mdc-checkbox-indeterminate-checked-mixedmark;
          animation: 500ms linear 0s mdc-checkbox-indeterminate-checked-mixedmark;
  transition: none; }

.lmdc-checkbox--anim-indeterminate-unchecked .lmdc-checkbox__mixedmark {
  -webkit-animation: 300ms linear 0s mdc-checkbox-indeterminate-unchecked-mixedmark;
          animation: 300ms linear 0s mdc-checkbox-indeterminate-unchecked-mixedmark;
  transition: none; }

.lmdc-checkbox__native-control:checked ~ .lmdc-checkbox__background,
.lmdc-checkbox__native-control:indeterminate ~ .lmdc-checkbox__background {
  transition: border-color 90ms 0ms cubic-bezier(0, 0, 0.2, 1), background-color 90ms 0ms cubic-bezier(0, 0, 0.2, 1); }
  .lmdc-checkbox__native-control:checked ~ .lmdc-checkbox__background .lmdc-checkbox__checkmark-path,
  .lmdc-checkbox__native-control:indeterminate ~ .lmdc-checkbox__background .lmdc-checkbox__checkmark-path {
    stroke-dashoffset: 0; }

.lmdc-checkbox__background::before {
  position: absolute;
  top: 0;
  right: 0;
  bottom: 0;
  left: 0;
  width: 100%;
  height: 100%;
  -webkit-transform: scale(0, 0);
          transform: scale(0, 0);
  transition: opacity 90ms 0ms cubic-bezier(0.4, 0, 0.6, 1), -webkit-transform 90ms 0ms cubic-bezier(0.4, 0, 0.6, 1);
  transition: opacity 90ms 0ms cubic-bezier(0.4, 0, 0.6, 1), transform 90ms 0ms cubic-bezier(0.4, 0, 0.6, 1);
  transition: opacity 90ms 0ms cubic-bezier(0.4, 0, 0.6, 1), transform 90ms 0ms cubic-bezier(0.4, 0, 0.6, 1), -webkit-transform 90ms 0ms cubic-bezier(0.4, 0, 0.6, 1);
  border-radius: 50%;
  opacity: 0;
  pointer-events: none;
  content: "";
  will-change: opacity, transform; }

.lmdc-ripple-upgraded--unbounded .lmdc-checkbox__background::before {
  content: none; }

.lmdc-checkbox__native-control:focus ~ .lmdc-checkbox__background::before {
  -webkit-transform: scale(2.75, 2.75);
          transform: scale(2.75, 2.75);
  transition: opacity 80ms 0ms cubic-bezier(0, 0, 0.2, 1), -webkit-transform 80ms 0ms cubic-bezier(0, 0, 0.2, 1);
  transition: opacity 80ms 0ms cubic-bezier(0, 0, 0.2, 1), transform 80ms 0ms cubic-bezier(0, 0, 0.2, 1);
  transition: opacity 80ms 0ms cubic-bezier(0, 0, 0.2, 1), transform 80ms 0ms cubic-bezier(0, 0, 0.2, 1), -webkit-transform 80ms 0ms cubic-bezier(0, 0, 0.2, 1);
  opacity: 0.26; }

.lmdc-checkbox__native-control {
  position: absolute;
  top: 0;
  left: 0;
  width: 100%;
  height: 100%;
  margin: 0;
  padding: 0;
  opacity: 0;
  cursor: inherit; }
  .lmdc-checkbox__native-control:disabled {
    cursor: default;
    pointer-events: none; }

.lmdc-checkbox__native-control:checked ~ .lmdc-checkbox__background .lmdc-checkbox__checkmark {
  transition: opacity 180ms 0ms cubic-bezier(0, 0, 0.2, 1), -webkit-transform 180ms 0ms cubic-bezier(0, 0, 0.2, 1);
  transition: opacity 180ms 0ms cubic-bezier(0, 0, 0.2, 1), transform 180ms 0ms cubic-bezier(0, 0, 0.2, 1);
  transition: opacity 180ms 0ms cubic-bezier(0, 0, 0.2, 1), transform 180ms 0ms cubic-bezier(0, 0, 0.2, 1), -webkit-transform 180ms 0ms cubic-bezier(0, 0, 0.2, 1);
  opacity: 1; }

.lmdc-checkbox__native-control:checked ~ .lmdc-checkbox__background .lmdc-checkbox__mixedmark {
  -webkit-transform: scaleX(1) rotate(-45deg);
          transform: scaleX(1) rotate(-45deg); }

.lmdc-checkbox__native-control:indeterminate ~ .lmdc-checkbox__background .lmdc-checkbox__checkmark {
  -webkit-transform: rotate(45deg);
          transform: rotate(45deg);
  transition: opacity 90ms 0ms cubic-bezier(0.4, 0, 0.6, 1), -webkit-transform 90ms 0ms cubic-bezier(0.4, 0, 0.6, 1);
  transition: opacity 90ms 0ms cubic-bezier(0.4, 0, 0.6, 1), transform 90ms 0ms cubic-bezier(0.4, 0, 0.6, 1);
  transition: opacity 90ms 0ms cubic-bezier(0.4, 0, 0.6, 1), transform 90ms 0ms cubic-bezier(0.4, 0, 0.6, 1), -webkit-transform 90ms 0ms cubic-bezier(0.4, 0, 0.6, 1);
  opacity: 0; }

.lmdc-checkbox__native-control:indeterminate ~ .lmdc-checkbox__background .lmdc-checkbox__mixedmark {
  -webkit-transform: scaleX(1) rotate(0deg);
          transform: scaleX(1) rotate(0deg);
  opacity: 1; }

/**
 * The css property used for elevation. In most cases this should not be changed. It is exposed
 * as a variable for abstraction / easy use when needing to reference the property directly, for
 * example in a `will-change` rule.
 */
/**
 * The default duration value for elevation transitions.
 */
/**
 * The default easing value for elevation transitions.
 */
/**
 * Applies the correct CSS rules to an element to give it the elevation specified by $z-value.
 * The $z-value must be between 0 and 24.
 * If $color has an alpha channel, it will be ignored and overridden. To increase the opacity of the shadow, use
 * $opacity-boost.
 */
/**
 * Returns a string that can be used as the value for a `transition` property for elevation.
 * Calling this function directly is useful in situations where a component needs to transition
 * more than one property.
 *
 * ```scss
 * .foo {
 *   transition: mdc-elevation-transition-value(), opacity 100ms ease;
 *   will-change: $mdc-elevation-property, opacity;
 * }
 * ```
 */
/**
 * Creates a rule that will be applied when an MDC Web component is within the context of an RTL layout.
 *
 * Usage Example:
 * ```scss
 * .mdc-foo {
 *   position: absolute;
 *   left: 0;
 *
 *   @include mdc-rtl {
 *     left: auto;
 *     right: 0;
 *   }
 *
 *   &__bar {
 *     margin-left: 4px;
 *     @include mdc-rtl(".mdc-foo") {
 *       margin-left: auto;
 *       margin-right: 4px;
 *     }
 *   }
 * }
 *
 * .mdc-foo--mod {
 *   padding-left: 4px;
 *
 *   @include mdc-rtl {
 *     padding-left: auto;
 *     padding-right: 4px;
 *   }
 * }
 * ```
 *
 * Note that this works by checking for [dir="rtl"] on an ancestor element. While this will work
 * in most cases, it will in some cases lead to false negatives, e.g.
 *
 * ```html
 * <html dir="rtl">
 *   <!-- ... -->
 *   <div dir="ltr">
 *     <div class="mdc-foo">Styled incorrectly as RTL!</div>
 *   </div>
 * </html>
 * ```
 *
 * In the future, selectors such as :dir (http://mdn.io/:dir) will help us mitigate this.
 */
/**
 * Takes a base box-model property - e.g. margin / border / padding - along with a default
 * direction and value, and emits rules which apply the value to the
 * "<base-property>-<default-direction>" property by default, but flips the direction
 * when within an RTL context.
 *
 * For example:
 *
 * ```scss
 * .mdc-foo {
 *   @include mdc-rtl-reflexive-box(margin, left, 8px);
 * }
 * ```
 * is equivalent to:
 *
 * ```scss
 * .mdc-foo {
 *   margin-left: 8px;
 *
 *   @include mdc-rtl {
 *     margin-right: 8px;
 *     margin-left: 0;
 *   }
 * }
 * ```
 * whereas:
 *
 * ```scss
 * .mdc-foo {
 *   @include mdc-rtl-reflexive-box(margin, right, 8px);
 * }
 * ```
 * is equivalent to:
 *
 * ```scss
 * .mdc-foo {
 *   margin-right: 8px;
 *
 *   @include mdc-rtl {
 *     margin-right: 0;
 *     margin-left: 8px;
 *   }
 * }
 * ```
 *
 * You can also pass a 4th optional $root-selector argument which will be forwarded to `mdc-rtl`,
 * e.g. `@include mdc-rtl-reflexive-box(margin, left, 8px, ".mdc-component")`.
 *
 * Note that this function will always zero out the original value in an RTL context. If you're
 * trying to flip the values, use mdc-rtl-reflexive-property().
 */
/**
 * Takes a base property and emits rules that assign <base-property>-left to <left-value> and
 * <base-property>-right to <right-value> in a LTR context, and vice versa in a RTL context.
 * For example:
 *
 * ```scss
 * .mdc-foo {
 *   @include mdc-rtl-reflexive-property(margin, auto, 12px);
 * }
 * ```
 * is equivalent to:
 *
 * ```scss
 * .mdc-foo {
 *   margin-left: auto;
 *   margin-right: 12px;
 *
 *   @include mdc-rtl {
 *     margin-left: 12px;
 *     margin-right: auto;
 *   }
 * }
 * ```
 *
 * A 4th optional $root-selector argument can be given, which will be passed to `mdc-rtl`.
 */
/**
 * Takes an argument specifying a horizontal position property (either "left" or "right") as well
 * as a value, and applies that value to the specified position in a LTR context, and flips it in a
 * RTL context. For example:
 *
 * ```scss
 * .mdc-foo {
 *   @include mdc-rtl-reflexive-position(left, 0);
 *   position: absolute;
 * }
 * ```
 * is equivalent to:
 *
 * ```scss
 *  .mdc-foo {
 *    position: absolute;
 *    left: 0;
 *    right: initial;
 *
 *    @include mdc-rtl {
 *      right: 0;
 *      left: initial;
 *    }
 *  }
 * ```
 * An optional third $root-selector argument may also be given, which is passed to `mdc-rtl`.
 */
/* TODO(sgomes): Figure out what to do about desktop font sizes. */
/* TODO(sgomes): Figure out what to do about i18n and i18n font sizes. */
/* TODO(sgomes): Figure out what to do about desktop font sizes. */
/* TODO(sgomes): Figure out what to do about i18n and i18n font sizes. */
.lmdc-dialog {
  display: flex;
  position: fixed;
  top: 0;
  left: 0;
  align-items: center;
  justify-content: center;
  width: 100%;
  height: 100%;
  visibility: hidden;
  z-index: 5; }

.lmdc-dialog__backdrop {
  /* @alternate */
  background-color: rgba(0, 0, 0, 0.87);
  background-color: var(--mdc-theme-text-primary-on-light, rgba(0, 0, 0, 0.87));
  position: fixed;
  top: 0;
  left: 0;
  align-items: center;
  justify-content: center;
  width: 100%;
  height: 100%;
  opacity: 0;
  z-index: -1; }

.lmdc-dialog__surface {
  box-shadow: 0px 11px 15px -7px rgba(0, 0, 0, 0.2), 0px 24px 38px 3px rgba(0, 0, 0, 0.14), 0px 9px 46px 8px rgba(0, 0, 0, 0.12);
  /* @alternate */
  background-color: #fff;
  background-color: var(--mdc-theme-background, #fff);
  display: inline-flex;
  flex-direction: column;
  width: calc(100% - 30px);
  min-width: 640px;
  max-width: 865px;
  -webkit-transform: translateY(150px) scale(0.8);
          transform: translateY(150px) scale(0.8);
  border-radius: 2px;
  opacity: 0; }
  .lmdc-dialog[dir="rtl"] .lmdc-dialog__surface,
  [dir="rtl"] .lmdc-dialog .lmdc-dialog__surface {
    text-align: right; }

.lmdc-dialog__header {
  display: flex;
  align-items: center;
  padding: 24px 24px 0; }
  .lmdc-dialog[dir="rtl"] .lmdc-dialog__header,
  [dir="rtl"] .lmdc-dialog .lmdc-dialog__header {
    text-align: right; }

.lmdc-dialog__header__empty {
  padding: 0; }

.lmdc-dialog__header__title {
  font-family: Roboto, sans-serif;
  -moz-osx-font-smoothing: grayscale;
  -webkit-font-smoothing: antialiased;
  font-size: 1.25rem;
  line-height: 2rem;
  font-weight: 500;
  letter-spacing: 0.02em;
  text-decoration: inherit;
  text-transform: inherit;
  flex: 1;
  margin: 0; }

.lmdc-dialog__body {
  /* @alternate */
  color: rgba(0, 0, 0, 0.54);
  color: var(--mdc-theme-text-secondary-on-light, rgba(0, 0, 0, 0.54));
  font-family: Roboto, sans-serif;
  -moz-osx-font-smoothing: grayscale;
  -webkit-font-smoothing: antialiased;
  font-size: 0.875rem;
  line-height: 1.25rem;
  font-weight: 400;
  letter-spacing: 0.04em;
  text-decoration: inherit;
  text-transform: inherit;
  margin-top: 20px;
  padding: 0 24px 24px; }

.lmdc-dialog__body--scrollable {
  max-height: 195px;
  border-top: 1px solid rgba(0, 0, 0, 0.1);
  border-bottom: 1px solid rgba(0, 0, 0, 0.1);
  overflow-x: auto;
  overflow-y: scroll;
  -webkit-overflow-scrolling: touch; }

.lmdc-dialog__footer {
  display: flex;
  flex-wrap: wrap;
  align-items: center;
  justify-content: flex-end;
  padding: 8px; }

.lmdc-dialog__footer__button {
  margin-left: 0;
  margin-right: 8px; }
  [dir="rtl"] .lmdc-dialog__footer__button, .lmdc-dialog__footer__button[dir="rtl"] {
    margin-left: 8px;
    margin-right: 0; }
  .lmdc-dialog__footer__button:last-child {
    margin-left: 0;
    margin-right: 0; }
    [dir="rtl"] .lmdc-dialog__footer__button:last-child, .lmdc-dialog__footer__button:last-child[dir="rtl"] {
      margin-left: 0;
      margin-right: 0; }

.lmdc-dialog__action {
  /* @alternate */
  color: #018786;
  color: var(--mdc-theme-secondary, #018786); }

@media (max-width: 640px) {
  .lmdc-dialog {
    min-width: 280px; }
  .lmdc-dialog__surface {
    min-width: 280px; }
  .lmdc-dialog__body {
    line-height: 24px; } }

.lmdc-dialog--animating {
  visibility: visible; }
  .lmdc-dialog--animating .lmdc-dialog__backdrop {
    transition: opacity 120ms 0ms cubic-bezier(0, 0, 0.2, 1); }
  .lmdc-dialog--animating .lmdc-dialog__surface {
    transition: opacity 120ms 0ms cubic-bezier(0, 0, 0.2, 1), -webkit-transform 120ms 0ms cubic-bezier(0, 0, 0.2, 1);
    transition: opacity 120ms 0ms cubic-bezier(0, 0, 0.2, 1), transform 120ms 0ms cubic-bezier(0, 0, 0.2, 1);
    transition: opacity 120ms 0ms cubic-bezier(0, 0, 0.2, 1), transform 120ms 0ms cubic-bezier(0, 0, 0.2, 1), -webkit-transform 120ms 0ms cubic-bezier(0, 0, 0.2, 1); }

.lmdc-dialog--open {
  visibility: visible; }
  .lmdc-dialog--open .lmdc-dialog__backdrop {
    opacity: .3; }
  .lmdc-dialog--open .lmdc-dialog__surface {
    -webkit-transform: translateY(0) scale(1);
            transform: translateY(0) scale(1);
    opacity: 1; }

.lmdc-dialog-scroll-lock {
  overflow: hidden; }

/**
 * Creates a rule that will be applied when an MDC Web component is within the context of an RTL layout.
 *
 * Usage Example:
 * ```scss
 * .mdc-foo {
 *   position: absolute;
 *   left: 0;
 *
 *   @include mdc-rtl {
 *     left: auto;
 *     right: 0;
 *   }
 *
 *   &__bar {
 *     margin-left: 4px;
 *     @include mdc-rtl(".mdc-foo") {
 *       margin-left: auto;
 *       margin-right: 4px;
 *     }
 *   }
 * }
 *
 * .mdc-foo--mod {
 *   padding-left: 4px;
 *
 *   @include mdc-rtl {
 *     padding-left: auto;
 *     padding-right: 4px;
 *   }
 * }
 * ```
 *
 * Note that this works by checking for [dir="rtl"] on an ancestor element. While this will work
 * in most cases, it will in some cases lead to false negatives, e.g.
 *
 * ```html
 * <html dir="rtl">
 *   <!-- ... -->
 *   <div dir="ltr">
 *     <div class="mdc-foo">Styled incorrectly as RTL!</div>
 *   </div>
 * </html>
 * ```
 *
 * In the future, selectors such as :dir (http://mdn.io/:dir) will help us mitigate this.
 */
/**
 * Takes a base box-model property - e.g. margin / border / padding - along with a default
 * direction and value, and emits rules which apply the value to the
 * "<base-property>-<default-direction>" property by default, but flips the direction
 * when within an RTL context.
 *
 * For example:
 *
 * ```scss
 * .mdc-foo {
 *   @include mdc-rtl-reflexive-box(margin, left, 8px);
 * }
 * ```
 * is equivalent to:
 *
 * ```scss
 * .mdc-foo {
 *   margin-left: 8px;
 *
 *   @include mdc-rtl {
 *     margin-right: 8px;
 *     margin-left: 0;
 *   }
 * }
 * ```
 * whereas:
 *
 * ```scss
 * .mdc-foo {
 *   @include mdc-rtl-reflexive-box(margin, right, 8px);
 * }
 * ```
 * is equivalent to:
 *
 * ```scss
 * .mdc-foo {
 *   margin-right: 8px;
 *
 *   @include mdc-rtl {
 *     margin-right: 0;
 *     margin-left: 8px;
 *   }
 * }
 * ```
 *
 * You can also pass a 4th optional $root-selector argument which will be forwarded to `mdc-rtl`,
 * e.g. `@include mdc-rtl-reflexive-box(margin, left, 8px, ".mdc-component")`.
 *
 * Note that this function will always zero out the original value in an RTL context. If you're
 * trying to flip the values, use mdc-rtl-reflexive-property().
 */
/**
 * Takes a base property and emits rules that assign <base-property>-left to <left-value> and
 * <base-property>-right to <right-value> in a LTR context, and vice versa in a RTL context.
 * For example:
 *
 * ```scss
 * .mdc-foo {
 *   @include mdc-rtl-reflexive-property(margin, auto, 12px);
 * }
 * ```
 * is equivalent to:
 *
 * ```scss
 * .mdc-foo {
 *   margin-left: auto;
 *   margin-right: 12px;
 *
 *   @include mdc-rtl {
 *     margin-left: 12px;
 *     margin-right: auto;
 *   }
 * }
 * ```
 *
 * A 4th optional $root-selector argument can be given, which will be passed to `mdc-rtl`.
 */
/**
 * Takes an argument specifying a horizontal position property (either "left" or "right") as well
 * as a value, and applies that value to the specified position in a LTR context, and flips it in a
 * RTL context. For example:
 *
 * ```scss
 * .mdc-foo {
 *   @include mdc-rtl-reflexive-position(left, 0);
 *   position: absolute;
 * }
 * ```
 * is equivalent to:
 *
 * ```scss
 *  .mdc-foo {
 *    position: absolute;
 *    left: 0;
 *    right: initial;
 *
 *    @include mdc-rtl {
 *      right: 0;
 *      left: initial;
 *    }
 *  }
 * ```
 * An optional third $root-selector argument may also be given, which is passed to `mdc-rtl`.
 */
/* TODO(sgomes): Figure out what to do about desktop font sizes. */
/* TODO(sgomes): Figure out what to do about i18n and i18n font sizes. */
/**
 * Creates a rule that will be applied when an MDC Web component is within the context of an RTL layout.
 *
 * Usage Example:
 * ```scss
 * .mdc-foo {
 *   position: absolute;
 *   left: 0;
 *
 *   @include mdc-rtl {
 *     left: auto;
 *     right: 0;
 *   }
 *
 *   &__bar {
 *     margin-left: 4px;
 *     @include mdc-rtl(".mdc-foo") {
 *       margin-left: auto;
 *       margin-right: 4px;
 *     }
 *   }
 * }
 *
 * .mdc-foo--mod {
 *   padding-left: 4px;
 *
 *   @include mdc-rtl {
 *     padding-left: auto;
 *     padding-right: 4px;
 *   }
 * }
 * ```
 *
 * Note that this works by checking for [dir="rtl"] on an ancestor element. While this will work
 * in most cases, it will in some cases lead to false negatives, e.g.
 *
 * ```html
 * <html dir="rtl">
 *   <!-- ... -->
 *   <div dir="ltr">
 *     <div class="mdc-foo">Styled incorrectly as RTL!</div>
 *   </div>
 * </html>
 * ```
 *
 * In the future, selectors such as :dir (http://mdn.io/:dir) will help us mitigate this.
 */
/**
 * Takes a base box-model property - e.g. margin / border / padding - along with a default
 * direction and value, and emits rules which apply the value to the
 * "<base-property>-<default-direction>" property by default, but flips the direction
 * when within an RTL context.
 *
 * For example:
 *
 * ```scss
 * .mdc-foo {
 *   @include mdc-rtl-reflexive-box(margin, left, 8px);
 * }
 * ```
 * is equivalent to:
 *
 * ```scss
 * .mdc-foo {
 *   margin-left: 8px;
 *
 *   @include mdc-rtl {
 *     margin-right: 8px;
 *     margin-left: 0;
 *   }
 * }
 * ```
 * whereas:
 *
 * ```scss
 * .mdc-foo {
 *   @include mdc-rtl-reflexive-box(margin, right, 8px);
 * }
 * ```
 * is equivalent to:
 *
 * ```scss
 * .mdc-foo {
 *   margin-right: 8px;
 *
 *   @include mdc-rtl {
 *     margin-right: 0;
 *     margin-left: 8px;
 *   }
 * }
 * ```
 *
 * You can also pass a 4th optional $root-selector argument which will be forwarded to `mdc-rtl`,
 * e.g. `@include mdc-rtl-reflexive-box(margin, left, 8px, ".mdc-component")`.
 *
 * Note that this function will always zero out the original value in an RTL context. If you're
 * trying to flip the values, use mdc-rtl-reflexive-property().
 */
/**
 * Takes a base property and emits rules that assign <base-property>-left to <left-value> and
 * <base-property>-right to <right-value> in a LTR context, and vice versa in a RTL context.
 * For example:
 *
 * ```scss
 * .mdc-foo {
 *   @include mdc-rtl-reflexive-property(margin, auto, 12px);
 * }
 * ```
 * is equivalent to:
 *
 * ```scss
 * .mdc-foo {
 *   margin-left: auto;
 *   margin-right: 12px;
 *
 *   @include mdc-rtl {
 *     margin-left: 12px;
 *     margin-right: auto;
 *   }
 * }
 * ```
 *
 * A 4th optional $root-selector argument can be given, which will be passed to `mdc-rtl`.
 */
/**
 * Takes an argument specifying a horizontal position property (either "left" or "right") as well
 * as a value, and applies that value to the specified position in a LTR context, and flips it in a
 * RTL context. For example:
 *
 * ```scss
 * .mdc-foo {
 *   @include mdc-rtl-reflexive-position(left, 0);
 *   position: absolute;
 * }
 * ```
 * is equivalent to:
 *
 * ```scss
 *  .mdc-foo {
 *    position: absolute;
 *    left: 0;
 *    right: initial;
 *
 *    @include mdc-rtl {
 *      right: 0;
 *      left: initial;
 *    }
 *  }
 * ```
 * An optional third $root-selector argument may also be given, which is passed to `mdc-rtl`.
 */
.lmdc-drawer--persistent {
  /* Use aspect ratio trick to maintain 16:9 aspect ratio on the header */
  color: rgba(0, 0, 0, 0.87);
  width: 0; }
  .lmdc-drawer--persistent .lmdc-drawer__toolbar-spacer {
    display: flex;
    position: relative;
    flex-direction: row;
    flex-shrink: 0;
    align-items: center;
    box-sizing: border-box;
    height: 56px;
    padding: 16px;
    border-bottom: 1px solid rgba(0, 0, 0, 0.12);
    /* TODO(sgomes): replace with global breakpoints when we have them */ }
    @media (min-width: 600px) {
      .lmdc-drawer--persistent .lmdc-drawer__toolbar-spacer {
        height: 64px; } }
  .lmdc-drawer--persistent .lmdc-drawer__header {
    position: relative; }
  .lmdc-drawer--persistent .lmdc-drawer__header::before {
    display: block;
    padding-top: 56.25%;
    content: ""; }
  .lmdc-drawer--persistent .lmdc-drawer__header-content {
    display: flex;
    position: absolute;
    top: 0;
    right: 0;
    bottom: 0;
    left: 0;
    align-items: flex-end;
    box-sizing: border-box;
    padding: 16px; }
  .lmdc-drawer--persistent .lmdc-list-item {
    font-family: Roboto, sans-serif;
    -moz-osx-font-smoothing: grayscale;
    -webkit-font-smoothing: antialiased;
    font-size: 0.875rem;
    line-height: 1.5rem;
    font-weight: 500;
    letter-spacing: 0.04em;
    text-decoration: inherit;
    text-transform: inherit;
    position: relative;
    outline: none;
    color: inherit;
    text-decoration: none; }
  .lmdc-drawer--persistent .lmdc-list-item__graphic {
    color: rgba(0, 0, 0, 0.54); }
  .lmdc-drawer--persistent.lmdc-drawer--permanent,
  .lmdc-drawer--persistent .lmdc-drawer__drawer {
    background-color: #fff; }
  .lmdc-drawer--persistent .lmdc-drawer__drawer {
    border-left: 0;
    border-right: 1px solid #e4e4e4;
    left: 0;
    right: initial;
    height: 100%;
    -webkit-transform: translateX(-107%);
            transform: translateX(-107%);
    -webkit-transform: translateX(calc(-100% - 20px));
            transform: translateX(calc(-100% - 20px));
    will-change: transform;
    display: inline-flex;
    flex-direction: column;
    box-sizing: border-box;
    width: 240px;
    overflow: hidden;
    touch-action: none; }
    [dir="rtl"] .lmdc-drawer--persistent .lmdc-drawer__drawer, .lmdc-drawer--persistent .lmdc-drawer__drawer[dir="rtl"] {
      border-left: 1px solid #e4e4e4;
      border-right: 0; }
    [dir="rtl"] .lmdc-drawer--persistent .lmdc-drawer__drawer, .lmdc-drawer--persistent .lmdc-drawer__drawer[dir="rtl"] {
      left: initial;
      right: 0; }
    [dir="rtl"] .lmdc-drawer--persistent .lmdc-drawer__drawer, .lmdc-drawer--persistent .lmdc-drawer__drawer[dir="rtl"] {
      -webkit-transform: translateX(107%);
              transform: translateX(107%);
      -webkit-transform: translateX(calc(100% + 20px));
              transform: translateX(calc(100% + 20px)); }
  .lmdc-drawer--persistent.lmdc-drawer--animating .lmdc-drawer__drawer {
    transition: -webkit-transform 0.195s 0ms cubic-bezier(0.4, 0, 0.6, 1);
    transition: transform 0.195s 0ms cubic-bezier(0.4, 0, 0.6, 1);
    transition: transform 0.195s 0ms cubic-bezier(0.4, 0, 0.6, 1), -webkit-transform 0.195s 0ms cubic-bezier(0.4, 0, 0.6, 1); }
  .lmdc-drawer--persistent.lmdc-drawer--animating.lmdc-drawer--open .lmdc-drawer__drawer {
    transition: -webkit-transform 0.225s 0ms cubic-bezier(0, 0, 0.2, 1);
    transition: transform 0.225s 0ms cubic-bezier(0, 0, 0.2, 1);
    transition: transform 0.225s 0ms cubic-bezier(0, 0, 0.2, 1), -webkit-transform 0.225s 0ms cubic-bezier(0, 0, 0.2, 1); }
  .lmdc-drawer--persistent.lmdc-drawer--open {
    width: 240px;
    pointer-events: auto; }
    .lmdc-drawer--persistent.lmdc-drawer--open .lmdc-drawer__drawer {
      -webkit-transform: none;
              transform: none; }
    [dir="rtl"] .lmdc-drawer--persistent.lmdc-drawer--open .lmdc-drawer__drawer, .lmdc-drawer--persistent.lmdc-drawer--open[dir="rtl"] .lmdc-drawer__drawer {
      -webkit-transform: none;
              transform: none; }

/**
 * Creates a rule that will be applied when an MDC Web component is within the context of an RTL layout.
 *
 * Usage Example:
 * ```scss
 * .mdc-foo {
 *   position: absolute;
 *   left: 0;
 *
 *   @include mdc-rtl {
 *     left: auto;
 *     right: 0;
 *   }
 *
 *   &__bar {
 *     margin-left: 4px;
 *     @include mdc-rtl(".mdc-foo") {
 *       margin-left: auto;
 *       margin-right: 4px;
 *     }
 *   }
 * }
 *
 * .mdc-foo--mod {
 *   padding-left: 4px;
 *
 *   @include mdc-rtl {
 *     padding-left: auto;
 *     padding-right: 4px;
 *   }
 * }
 * ```
 *
 * Note that this works by checking for [dir="rtl"] on an ancestor element. While this will work
 * in most cases, it will in some cases lead to false negatives, e.g.
 *
 * ```html
 * <html dir="rtl">
 *   <!-- ... -->
 *   <div dir="ltr">
 *     <div class="mdc-foo">Styled incorrectly as RTL!</div>
 *   </div>
 * </html>
 * ```
 *
 * In the future, selectors such as :dir (http://mdn.io/:dir) will help us mitigate this.
 */
/**
 * Takes a base box-model property - e.g. margin / border / padding - along with a default
 * direction and value, and emits rules which apply the value to the
 * "<base-property>-<default-direction>" property by default, but flips the direction
 * when within an RTL context.
 *
 * For example:
 *
 * ```scss
 * .mdc-foo {
 *   @include mdc-rtl-reflexive-box(margin, left, 8px);
 * }
 * ```
 * is equivalent to:
 *
 * ```scss
 * .mdc-foo {
 *   margin-left: 8px;
 *
 *   @include mdc-rtl {
 *     margin-right: 8px;
 *     margin-left: 0;
 *   }
 * }
 * ```
 * whereas:
 *
 * ```scss
 * .mdc-foo {
 *   @include mdc-rtl-reflexive-box(margin, right, 8px);
 * }
 * ```
 * is equivalent to:
 *
 * ```scss
 * .mdc-foo {
 *   margin-right: 8px;
 *
 *   @include mdc-rtl {
 *     margin-right: 0;
 *     margin-left: 8px;
 *   }
 * }
 * ```
 *
 * You can also pass a 4th optional $root-selector argument which will be forwarded to `mdc-rtl`,
 * e.g. `@include mdc-rtl-reflexive-box(margin, left, 8px, ".mdc-component")`.
 *
 * Note that this function will always zero out the original value in an RTL context. If you're
 * trying to flip the values, use mdc-rtl-reflexive-property().
 */
/**
 * Takes a base property and emits rules that assign <base-property>-left to <left-value> and
 * <base-property>-right to <right-value> in a LTR context, and vice versa in a RTL context.
 * For example:
 *
 * ```scss
 * .mdc-foo {
 *   @include mdc-rtl-reflexive-property(margin, auto, 12px);
 * }
 * ```
 * is equivalent to:
 *
 * ```scss
 * .mdc-foo {
 *   margin-left: auto;
 *   margin-right: 12px;
 *
 *   @include mdc-rtl {
 *     margin-left: 12px;
 *     margin-right: auto;
 *   }
 * }
 * ```
 *
 * A 4th optional $root-selector argument can be given, which will be passed to `mdc-rtl`.
 */
/**
 * Takes an argument specifying a horizontal position property (either "left" or "right") as well
 * as a value, and applies that value to the specified position in a LTR context, and flips it in a
 * RTL context. For example:
 *
 * ```scss
 * .mdc-foo {
 *   @include mdc-rtl-reflexive-position(left, 0);
 *   position: absolute;
 * }
 * ```
 * is equivalent to:
 *
 * ```scss
 *  .mdc-foo {
 *    position: absolute;
 *    left: 0;
 *    right: initial;
 *
 *    @include mdc-rtl {
 *      right: 0;
 *      left: initial;
 *    }
 *  }
 * ```
 * An optional third $root-selector argument may also be given, which is passed to `mdc-rtl`.
 */
/* TODO(sgomes): Figure out what to do about desktop font sizes. */
/* TODO(sgomes): Figure out what to do about i18n and i18n font sizes. */
.lmdc-drawer--permanent {
  /* Use aspect ratio trick to maintain 16:9 aspect ratio on the header */
  color: rgba(0, 0, 0, 0.87);
  border-left: 0;
  border-right: 1px solid #e4e4e4;
  left: 0;
  right: initial;
  display: inline-flex;
  flex: 0 0 auto;
  flex-direction: column;
  box-sizing: border-box;
  width: 240px;
  overflow: hidden; }
  .lmdc-drawer--permanent .lmdc-drawer__toolbar-spacer {
    display: flex;
    position: relative;
    flex-direction: row;
    flex-shrink: 0;
    align-items: center;
    box-sizing: border-box;
    height: 56px;
    padding: 16px;
    border-bottom: 1px solid rgba(0, 0, 0, 0.12);
    /* TODO(sgomes): replace with global breakpoints when we have them */ }
    @media (min-width: 600px) {
      .lmdc-drawer--permanent .lmdc-drawer__toolbar-spacer {
        height: 64px; } }
  .lmdc-drawer--permanent .lmdc-drawer__header {
    position: relative; }
  .lmdc-drawer--permanent .lmdc-drawer__header::before {
    display: block;
    padding-top: 56.25%;
    content: ""; }
  .lmdc-drawer--permanent .lmdc-drawer__header-content {
    display: flex;
    position: absolute;
    top: 0;
    right: 0;
    bottom: 0;
    left: 0;
    align-items: flex-end;
    box-sizing: border-box;
    padding: 16px; }
  .lmdc-drawer--permanent .lmdc-list-item {
    font-family: Roboto, sans-serif;
    -moz-osx-font-smoothing: grayscale;
    -webkit-font-smoothing: antialiased;
    font-size: 0.875rem;
    line-height: 1.5rem;
    font-weight: 500;
    letter-spacing: 0.04em;
    text-decoration: inherit;
    text-transform: inherit;
    position: relative;
    outline: none;
    color: inherit;
    text-decoration: none; }
  .lmdc-drawer--permanent .lmdc-list-item__graphic {
    color: rgba(0, 0, 0, 0.54); }
  .lmdc-drawer--permanent.lmdc-drawer--permanent,
  .lmdc-drawer--permanent .lmdc-drawer__drawer {
    background-color: #fff; }
  [dir="rtl"] .lmdc-drawer--permanent, .lmdc-drawer--permanent[dir="rtl"] {
    border-left: 1px solid #e4e4e4;
    border-right: 0; }
  [dir="rtl"] .lmdc-drawer--permanent, .lmdc-drawer--permanent[dir="rtl"] {
    left: initial;
    right: 0; }
  .lmdc-drawer--permanent--floating {
    border-left: 0;
    border-right: none;
    background: none; }
    [dir="rtl"] .lmdc-drawer--permanent--floating, .lmdc-drawer--permanent--floating[dir="rtl"] {
      border-left: none;
      border-right: 0; }

/**
 * The css property used for elevation. In most cases this should not be changed. It is exposed
 * as a variable for abstraction / easy use when needing to reference the property directly, for
 * example in a `will-change` rule.
 */
/**
 * The default duration value for elevation transitions.
 */
/**
 * The default easing value for elevation transitions.
 */
/**
 * Applies the correct CSS rules to an element to give it the elevation specified by $z-value.
 * The $z-value must be between 0 and 24.
 * If $color has an alpha channel, it will be ignored and overridden. To increase the opacity of the shadow, use
 * $opacity-boost.
 */
/**
 * Returns a string that can be used as the value for a `transition` property for elevation.
 * Calling this function directly is useful in situations where a component needs to transition
 * more than one property.
 *
 * ```scss
 * .foo {
 *   transition: mdc-elevation-transition-value(), opacity 100ms ease;
 *   will-change: $mdc-elevation-property, opacity;
 * }
 * ```
 */
/**
 * Creates a rule that will be applied when an MDC Web component is within the context of an RTL layout.
 *
 * Usage Example:
 * ```scss
 * .mdc-foo {
 *   position: absolute;
 *   left: 0;
 *
 *   @include mdc-rtl {
 *     left: auto;
 *     right: 0;
 *   }
 *
 *   &__bar {
 *     margin-left: 4px;
 *     @include mdc-rtl(".mdc-foo") {
 *       margin-left: auto;
 *       margin-right: 4px;
 *     }
 *   }
 * }
 *
 * .mdc-foo--mod {
 *   padding-left: 4px;
 *
 *   @include mdc-rtl {
 *     padding-left: auto;
 *     padding-right: 4px;
 *   }
 * }
 * ```
 *
 * Note that this works by checking for [dir="rtl"] on an ancestor element. While this will work
 * in most cases, it will in some cases lead to false negatives, e.g.
 *
 * ```html
 * <html dir="rtl">
 *   <!-- ... -->
 *   <div dir="ltr">
 *     <div class="mdc-foo">Styled incorrectly as RTL!</div>
 *   </div>
 * </html>
 * ```
 *
 * In the future, selectors such as :dir (http://mdn.io/:dir) will help us mitigate this.
 */
/**
 * Takes a base box-model property - e.g. margin / border / padding - along with a default
 * direction and value, and emits rules which apply the value to the
 * "<base-property>-<default-direction>" property by default, but flips the direction
 * when within an RTL context.
 *
 * For example:
 *
 * ```scss
 * .mdc-foo {
 *   @include mdc-rtl-reflexive-box(margin, left, 8px);
 * }
 * ```
 * is equivalent to:
 *
 * ```scss
 * .mdc-foo {
 *   margin-left: 8px;
 *
 *   @include mdc-rtl {
 *     margin-right: 8px;
 *     margin-left: 0;
 *   }
 * }
 * ```
 * whereas:
 *
 * ```scss
 * .mdc-foo {
 *   @include mdc-rtl-reflexive-box(margin, right, 8px);
 * }
 * ```
 * is equivalent to:
 *
 * ```scss
 * .mdc-foo {
 *   margin-right: 8px;
 *
 *   @include mdc-rtl {
 *     margin-right: 0;
 *     margin-left: 8px;
 *   }
 * }
 * ```
 *
 * You can also pass a 4th optional $root-selector argument which will be forwarded to `mdc-rtl`,
 * e.g. `@include mdc-rtl-reflexive-box(margin, left, 8px, ".mdc-component")`.
 *
 * Note that this function will always zero out the original value in an RTL context. If you're
 * trying to flip the values, use mdc-rtl-reflexive-property().
 */
/**
 * Takes a base property and emits rules that assign <base-property>-left to <left-value> and
 * <base-property>-right to <right-value> in a LTR context, and vice versa in a RTL context.
 * For example:
 *
 * ```scss
 * .mdc-foo {
 *   @include mdc-rtl-reflexive-property(margin, auto, 12px);
 * }
 * ```
 * is equivalent to:
 *
 * ```scss
 * .mdc-foo {
 *   margin-left: auto;
 *   margin-right: 12px;
 *
 *   @include mdc-rtl {
 *     margin-left: 12px;
 *     margin-right: auto;
 *   }
 * }
 * ```
 *
 * A 4th optional $root-selector argument can be given, which will be passed to `mdc-rtl`.
 */
/**
 * Takes an argument specifying a horizontal position property (either "left" or "right") as well
 * as a value, and applies that value to the specified position in a LTR context, and flips it in a
 * RTL context. For example:
 *
 * ```scss
 * .mdc-foo {
 *   @include mdc-rtl-reflexive-position(left, 0);
 *   position: absolute;
 * }
 * ```
 * is equivalent to:
 *
 * ```scss
 *  .mdc-foo {
 *    position: absolute;
 *    left: 0;
 *    right: initial;
 *
 *    @include mdc-rtl {
 *      right: 0;
 *      left: initial;
 *    }
 *  }
 * ```
 * An optional third $root-selector argument may also be given, which is passed to `mdc-rtl`.
 */
/* TODO(sgomes): Figure out what to do about desktop font sizes. */
/* TODO(sgomes): Figure out what to do about i18n and i18n font sizes. */
/**
 * Creates a rule that will be applied when an MDC Web component is within the context of an RTL layout.
 *
 * Usage Example:
 * ```scss
 * .mdc-foo {
 *   position: absolute;
 *   left: 0;
 *
 *   @include mdc-rtl {
 *     left: auto;
 *     right: 0;
 *   }
 *
 *   &__bar {
 *     margin-left: 4px;
 *     @include mdc-rtl(".mdc-foo") {
 *       margin-left: auto;
 *       margin-right: 4px;
 *     }
 *   }
 * }
 *
 * .mdc-foo--mod {
 *   padding-left: 4px;
 *
 *   @include mdc-rtl {
 *     padding-left: auto;
 *     padding-right: 4px;
 *   }
 * }
 * ```
 *
 * Note that this works by checking for [dir="rtl"] on an ancestor element. While this will work
 * in most cases, it will in some cases lead to false negatives, e.g.
 *
 * ```html
 * <html dir="rtl">
 *   <!-- ... -->
 *   <div dir="ltr">
 *     <div class="mdc-foo">Styled incorrectly as RTL!</div>
 *   </div>
 * </html>
 * ```
 *
 * In the future, selectors such as :dir (http://mdn.io/:dir) will help us mitigate this.
 */
/**
 * Takes a base box-model property - e.g. margin / border / padding - along with a default
 * direction and value, and emits rules which apply the value to the
 * "<base-property>-<default-direction>" property by default, but flips the direction
 * when within an RTL context.
 *
 * For example:
 *
 * ```scss
 * .mdc-foo {
 *   @include mdc-rtl-reflexive-box(margin, left, 8px);
 * }
 * ```
 * is equivalent to:
 *
 * ```scss
 * .mdc-foo {
 *   margin-left: 8px;
 *
 *   @include mdc-rtl {
 *     margin-right: 8px;
 *     margin-left: 0;
 *   }
 * }
 * ```
 * whereas:
 *
 * ```scss
 * .mdc-foo {
 *   @include mdc-rtl-reflexive-box(margin, right, 8px);
 * }
 * ```
 * is equivalent to:
 *
 * ```scss
 * .mdc-foo {
 *   margin-right: 8px;
 *
 *   @include mdc-rtl {
 *     margin-right: 0;
 *     margin-left: 8px;
 *   }
 * }
 * ```
 *
 * You can also pass a 4th optional $root-selector argument which will be forwarded to `mdc-rtl`,
 * e.g. `@include mdc-rtl-reflexive-box(margin, left, 8px, ".mdc-component")`.
 *
 * Note that this function will always zero out the original value in an RTL context. If you're
 * trying to flip the values, use mdc-rtl-reflexive-property().
 */
/**
 * Takes a base property and emits rules that assign <base-property>-left to <left-value> and
 * <base-property>-right to <right-value> in a LTR context, and vice versa in a RTL context.
 * For example:
 *
 * ```scss
 * .mdc-foo {
 *   @include mdc-rtl-reflexive-property(margin, auto, 12px);
 * }
 * ```
 * is equivalent to:
 *
 * ```scss
 * .mdc-foo {
 *   margin-left: auto;
 *   margin-right: 12px;
 *
 *   @include mdc-rtl {
 *     margin-left: 12px;
 *     margin-right: auto;
 *   }
 * }
 * ```
 *
 * A 4th optional $root-selector argument can be given, which will be passed to `mdc-rtl`.
 */
/**
 * Takes an argument specifying a horizontal position property (either "left" or "right") as well
 * as a value, and applies that value to the specified position in a LTR context, and flips it in a
 * RTL context. For example:
 *
 * ```scss
 * .mdc-foo {
 *   @include mdc-rtl-reflexive-position(left, 0);
 *   position: absolute;
 * }
 * ```
 * is equivalent to:
 *
 * ```scss
 *  .mdc-foo {
 *    position: absolute;
 *    left: 0;
 *    right: initial;
 *
 *    @include mdc-rtl {
 *      right: 0;
 *      left: initial;
 *    }
 *  }
 * ```
 * An optional third $root-selector argument may also be given, which is passed to `mdc-rtl`.
 */
.lmdc-drawer--temporary {
  /* Use aspect ratio trick to maintain 16:9 aspect ratio on the header */
  color: rgba(0, 0, 0, 0.87);
  position: fixed;
  top: 0;
  left: 0;
  box-sizing: border-box;
  width: 100%;
  height: 100%;
  pointer-events: none;
  overflow: hidden;
  contain: strict;
  z-index: 5;
  /* Shaded background */ }
  .lmdc-drawer--temporary .lmdc-drawer__toolbar-spacer {
    display: flex;
    position: relative;
    flex-direction: row;
    flex-shrink: 0;
    align-items: center;
    box-sizing: border-box;
    height: 56px;
    padding: 16px;
    border-bottom: 1px solid rgba(0, 0, 0, 0.12);
    /* TODO(sgomes): replace with global breakpoints when we have them */ }
    @media (min-width: 600px) {
      .lmdc-drawer--temporary .lmdc-drawer__toolbar-spacer {
        height: 64px; } }
  .lmdc-drawer--temporary .lmdc-drawer__header {
    position: relative; }
  .lmdc-drawer--temporary .lmdc-drawer__header::before {
    display: block;
    padding-top: 56.25%;
    content: ""; }
  .lmdc-drawer--temporary .lmdc-drawer__header-content {
    display: flex;
    position: absolute;
    top: 0;
    right: 0;
    bottom: 0;
    left: 0;
    align-items: flex-end;
    box-sizing: border-box;
    padding: 16px; }
  .lmdc-drawer--temporary .lmdc-list-item {
    font-family: Roboto, sans-serif;
    -moz-osx-font-smoothing: grayscale;
    -webkit-font-smoothing: antialiased;
    font-size: 0.875rem;
    line-height: 1.5rem;
    font-weight: 500;
    letter-spacing: 0.04em;
    text-decoration: inherit;
    text-transform: inherit;
    position: relative;
    outline: none;
    color: inherit;
    text-decoration: none; }
  .lmdc-drawer--temporary .lmdc-list-item__graphic {
    color: rgba(0, 0, 0, 0.54); }
  .lmdc-drawer--temporary.lmdc-drawer--permanent,
  .lmdc-drawer--temporary .lmdc-drawer__drawer {
    background-color: #fff; }
  .lmdc-drawer--temporary::before {
    background-color: rgba(0, 0, 0, 0.6); }
  .lmdc-drawer--temporary::before {
    display: block;
    position: absolute;
    top: 0;
    left: 0;
    box-sizing: border-box;
    width: 100%;
    height: 100%;
    opacity: 0;
    opacity: var(--mdc-temporary-drawer-opacity, 0);
    content: "";
    will-change: opacity; }
  .lmdc-drawer--temporary .lmdc-drawer__drawer {
    box-shadow: 0px 8px 10px -5px rgba(0, 0, 0, 0.2), 0px 16px 24px 2px rgba(0, 0, 0, 0.14), 0px 6px 30px 5px rgba(0, 0, 0, 0.12);
    left: 0;
    right: initial;
    height: 100%;
    -webkit-transform: translateX(-107%);
            transform: translateX(-107%);
    -webkit-transform: translateX(calc(-100% - 20px));
            transform: translateX(calc(-100% - 20px));
    will-change: transform;
    display: flex;
    position: absolute;
    flex-direction: column;
    box-sizing: border-box;
    width: calc(100% - 56px);
    max-width: 280px;
    overflow: hidden;
    touch-action: none;
    /* TODO(sgomes): replace with global breakpoints when we have them */ }
    [dir="rtl"] .lmdc-drawer--temporary .lmdc-drawer__drawer, .lmdc-drawer--temporary .lmdc-drawer__drawer[dir="rtl"] {
      left: initial;
      right: 0; }
    [dir="rtl"] .lmdc-drawer--temporary .lmdc-drawer__drawer, .lmdc-drawer--temporary .lmdc-drawer__drawer[dir="rtl"] {
      -webkit-transform: translateX(107%);
              transform: translateX(107%);
      -webkit-transform: translateX(calc(100% + 20px));
              transform: translateX(calc(100% + 20px)); }
    @media (min-width: 600px) {
      .lmdc-drawer--temporary .lmdc-drawer__drawer {
        width: calc(100% - 64px);
        max-width: 320px; } }
  .lmdc-drawer--temporary .lmdc-drawer__content {
    flex-grow: 1;
    box-sizing: border-box;
    margin: 0;
    overflow-x: hidden;
    overflow-y: auto;
    -webkit-overflow-scrolling: touch;
    touch-action: pan-y; }
  .lmdc-drawer--temporary .lmdc-drawer__footer {
    box-shadow: 0px 3px 1px -2px rgba(0, 0, 0, 0.2), 0px 2px 2px 0px rgba(0, 0, 0, 0.14), 0px 1px 5px 0px rgba(0, 0, 0, 0.12);
    flex-shrink: 0; }
  .lmdc-drawer--temporary.lmdc-drawer--animating::before {
    transition: opacity 0.3s 0ms cubic-bezier(0, 0, 0.2, 1); }
  .lmdc-drawer--temporary.lmdc-drawer--animating.lmdc-drawer--open .lmdc-drawer__drawer {
    transition: -webkit-transform 0.225s 0ms cubic-bezier(0, 0, 0.2, 1);
    transition: transform 0.225s 0ms cubic-bezier(0, 0, 0.2, 1);
    transition: transform 0.225s 0ms cubic-bezier(0, 0, 0.2, 1), -webkit-transform 0.225s 0ms cubic-bezier(0, 0, 0.2, 1); }
  .lmdc-drawer--temporary.lmdc-drawer--animating .lmdc-drawer__drawer {
    transition: -webkit-transform 0.195s 0ms cubic-bezier(0.4, 0, 0.6, 1);
    transition: transform 0.195s 0ms cubic-bezier(0.4, 0, 0.6, 1);
    transition: transform 0.195s 0ms cubic-bezier(0.4, 0, 0.6, 1), -webkit-transform 0.195s 0ms cubic-bezier(0.4, 0, 0.6, 1); }
  .lmdc-drawer--temporary.lmdc-drawer--open {
    pointer-events: auto; }
    .lmdc-drawer--temporary.lmdc-drawer--open::before {
      opacity: 1;
      opacity: var(--mdc-temporary-drawer-opacity, 1); }
    .lmdc-drawer--temporary.lmdc-drawer--open .lmdc-drawer__drawer {
      -webkit-transform: none;
              transform: none; }
    [dir="rtl"] .lmdc-drawer--temporary.lmdc-drawer--open .lmdc-drawer__drawer, .lmdc-drawer--temporary.lmdc-drawer--open[dir="rtl"] .lmdc-drawer__drawer {
      -webkit-transform: none;
              transform: none; }

.lmdc-drawer-scroll-lock {
  overflow: hidden; }

/**
 * The css property used for elevation. In most cases this should not be changed. It is exposed
 * as a variable for abstraction / easy use when needing to reference the property directly, for
 * example in a `will-change` rule.
 */
/**
 * The default duration value for elevation transitions.
 */
/**
 * The default easing value for elevation transitions.
 */
/**
 * Applies the correct CSS rules to an element to give it the elevation specified by $z-value.
 * The $z-value must be between 0 and 24.
 * If $color has an alpha channel, it will be ignored and overridden. To increase the opacity of the shadow, use
 * $opacity-boost.
 */
/**
 * Returns a string that can be used as the value for a `transition` property for elevation.
 * Calling this function directly is useful in situations where a component needs to transition
 * more than one property.
 *
 * ```scss
 * .foo {
 *   transition: mdc-elevation-transition-value(), opacity 100ms ease;
 *   will-change: $mdc-elevation-property, opacity;
 * }
 * ```
 */
.lmdc-elevation--z0 {
  box-shadow: 0px 0px 0px 0px rgba(0, 0, 0, 0.2), 0px 0px 0px 0px rgba(0, 0, 0, 0.14), 0px 0px 0px 0px rgba(0, 0, 0, 0.12); }

.lmdc-elevation--z1 {
  box-shadow: 0px 2px 1px -1px rgba(0, 0, 0, 0.2), 0px 1px 1px 0px rgba(0, 0, 0, 0.14), 0px 1px 3px 0px rgba(0, 0, 0, 0.12); }

.lmdc-elevation--z2 {
  box-shadow: 0px 3px 1px -2px rgba(0, 0, 0, 0.2), 0px 2px 2px 0px rgba(0, 0, 0, 0.14), 0px 1px 5px 0px rgba(0, 0, 0, 0.12); }

.lmdc-elevation--z3 {
  box-shadow: 0px 3px 3px -2px rgba(0, 0, 0, 0.2), 0px 3px 4px 0px rgba(0, 0, 0, 0.14), 0px 1px 8px 0px rgba(0, 0, 0, 0.12); }

.lmdc-elevation--z4 {
  box-shadow: 0px 2px 4px -1px rgba(0, 0, 0, 0.2), 0px 4px 5px 0px rgba(0, 0, 0, 0.14), 0px 1px 10px 0px rgba(0, 0, 0, 0.12); }

.lmdc-elevation--z5 {
  box-shadow: 0px 3px 5px -1px rgba(0, 0, 0, 0.2), 0px 5px 8px 0px rgba(0, 0, 0, 0.14), 0px 1px 14px 0px rgba(0, 0, 0, 0.12); }

.lmdc-elevation--z6 {
  box-shadow: 0px 3px 5px -1px rgba(0, 0, 0, 0.2), 0px 6px 10px 0px rgba(0, 0, 0, 0.14), 0px 1px 18px 0px rgba(0, 0, 0, 0.12); }

.lmdc-elevation--z7 {
  box-shadow: 0px 4px 5px -2px rgba(0, 0, 0, 0.2), 0px 7px 10px 1px rgba(0, 0, 0, 0.14), 0px 2px 16px 1px rgba(0, 0, 0, 0.12); }

.lmdc-elevation--z8 {
  box-shadow: 0px 5px 5px -3px rgba(0, 0, 0, 0.2), 0px 8px 10px 1px rgba(0, 0, 0, 0.14), 0px 3px 14px 2px rgba(0, 0, 0, 0.12); }

.lmdc-elevation--z9 {
  box-shadow: 0px 5px 6px -3px rgba(0, 0, 0, 0.2), 0px 9px 12px 1px rgba(0, 0, 0, 0.14), 0px 3px 16px 2px rgba(0, 0, 0, 0.12); }

.lmdc-elevation--z10 {
  box-shadow: 0px 6px 6px -3px rgba(0, 0, 0, 0.2), 0px 10px 14px 1px rgba(0, 0, 0, 0.14), 0px 4px 18px 3px rgba(0, 0, 0, 0.12); }

.lmdc-elevation--z11 {
  box-shadow: 0px 6px 7px -4px rgba(0, 0, 0, 0.2), 0px 11px 15px 1px rgba(0, 0, 0, 0.14), 0px 4px 20px 3px rgba(0, 0, 0, 0.12); }

.lmdc-elevation--z12 {
  box-shadow: 0px 7px 8px -4px rgba(0, 0, 0, 0.2), 0px 12px 17px 2px rgba(0, 0, 0, 0.14), 0px 5px 22px 4px rgba(0, 0, 0, 0.12); }

.lmdc-elevation--z13 {
  box-shadow: 0px 7px 8px -4px rgba(0, 0, 0, 0.2), 0px 13px 19px 2px rgba(0, 0, 0, 0.14), 0px 5px 24px 4px rgba(0, 0, 0, 0.12); }

.lmdc-elevation--z14 {
  box-shadow: 0px 7px 9px -4px rgba(0, 0, 0, 0.2), 0px 14px 21px 2px rgba(0, 0, 0, 0.14), 0px 5px 26px 4px rgba(0, 0, 0, 0.12); }

.lmdc-elevation--z15 {
  box-shadow: 0px 8px 9px -5px rgba(0, 0, 0, 0.2), 0px 15px 22px 2px rgba(0, 0, 0, 0.14), 0px 6px 28px 5px rgba(0, 0, 0, 0.12); }

.lmdc-elevation--z16 {
  box-shadow: 0px 8px 10px -5px rgba(0, 0, 0, 0.2), 0px 16px 24px 2px rgba(0, 0, 0, 0.14), 0px 6px 30px 5px rgba(0, 0, 0, 0.12); }

.lmdc-elevation--z17 {
  box-shadow: 0px 8px 11px -5px rgba(0, 0, 0, 0.2), 0px 17px 26px 2px rgba(0, 0, 0, 0.14), 0px 6px 32px 5px rgba(0, 0, 0, 0.12); }

.lmdc-elevation--z18 {
  box-shadow: 0px 9px 11px -5px rgba(0, 0, 0, 0.2), 0px 18px 28px 2px rgba(0, 0, 0, 0.14), 0px 7px 34px 6px rgba(0, 0, 0, 0.12); }

.lmdc-elevation--z19 {
  box-shadow: 0px 9px 12px -6px rgba(0, 0, 0, 0.2), 0px 19px 29px 2px rgba(0, 0, 0, 0.14), 0px 7px 36px 6px rgba(0, 0, 0, 0.12); }

.lmdc-elevation--z20 {
  box-shadow: 0px 10px 13px -6px rgba(0, 0, 0, 0.2), 0px 20px 31px 3px rgba(0, 0, 0, 0.14), 0px 8px 38px 7px rgba(0, 0, 0, 0.12); }

.lmdc-elevation--z21 {
  box-shadow: 0px 10px 13px -6px rgba(0, 0, 0, 0.2), 0px 21px 33px 3px rgba(0, 0, 0, 0.14), 0px 8px 40px 7px rgba(0, 0, 0, 0.12); }

.lmdc-elevation--z22 {
  box-shadow: 0px 10px 14px -6px rgba(0, 0, 0, 0.2), 0px 22px 35px 3px rgba(0, 0, 0, 0.14), 0px 8px 42px 7px rgba(0, 0, 0, 0.12); }

.lmdc-elevation--z23 {
  box-shadow: 0px 11px 14px -7px rgba(0, 0, 0, 0.2), 0px 23px 36px 3px rgba(0, 0, 0, 0.14), 0px 9px 44px 8px rgba(0, 0, 0, 0.12); }

.lmdc-elevation--z24 {
  box-shadow: 0px 11px 15px -7px rgba(0, 0, 0, 0.2), 0px 24px 38px 3px rgba(0, 0, 0, 0.14), 0px 9px 46px 8px rgba(0, 0, 0, 0.12); }

.lmdc-elevation-transition {
  transition: box-shadow 280ms cubic-bezier(0.4, 0, 0.2, 1);
  will-change: box-shadow; }

/**
 * Creates a rule that will be applied when an MDC Web component is within the context of an RTL layout.
 *
 * Usage Example:
 * ```scss
 * .mdc-foo {
 *   position: absolute;
 *   left: 0;
 *
 *   @include mdc-rtl {
 *     left: auto;
 *     right: 0;
 *   }
 *
 *   &__bar {
 *     margin-left: 4px;
 *     @include mdc-rtl(".mdc-foo") {
 *       margin-left: auto;
 *       margin-right: 4px;
 *     }
 *   }
 * }
 *
 * .mdc-foo--mod {
 *   padding-left: 4px;
 *
 *   @include mdc-rtl {
 *     padding-left: auto;
 *     padding-right: 4px;
 *   }
 * }
 * ```
 *
 * Note that this works by checking for [dir="rtl"] on an ancestor element. While this will work
 * in most cases, it will in some cases lead to false negatives, e.g.
 *
 * ```html
 * <html dir="rtl">
 *   <!-- ... -->
 *   <div dir="ltr">
 *     <div class="mdc-foo">Styled incorrectly as RTL!</div>
 *   </div>
 * </html>
 * ```
 *
 * In the future, selectors such as :dir (http://mdn.io/:dir) will help us mitigate this.
 */
/**
 * Takes a base box-model property - e.g. margin / border / padding - along with a default
 * direction and value, and emits rules which apply the value to the
 * "<base-property>-<default-direction>" property by default, but flips the direction
 * when within an RTL context.
 *
 * For example:
 *
 * ```scss
 * .mdc-foo {
 *   @include mdc-rtl-reflexive-box(margin, left, 8px);
 * }
 * ```
 * is equivalent to:
 *
 * ```scss
 * .mdc-foo {
 *   margin-left: 8px;
 *
 *   @include mdc-rtl {
 *     margin-right: 8px;
 *     margin-left: 0;
 *   }
 * }
 * ```
 * whereas:
 *
 * ```scss
 * .mdc-foo {
 *   @include mdc-rtl-reflexive-box(margin, right, 8px);
 * }
 * ```
 * is equivalent to:
 *
 * ```scss
 * .mdc-foo {
 *   margin-right: 8px;
 *
 *   @include mdc-rtl {
 *     margin-right: 0;
 *     margin-left: 8px;
 *   }
 * }
 * ```
 *
 * You can also pass a 4th optional $root-selector argument which will be forwarded to `mdc-rtl`,
 * e.g. `@include mdc-rtl-reflexive-box(margin, left, 8px, ".mdc-component")`.
 *
 * Note that this function will always zero out the original value in an RTL context. If you're
 * trying to flip the values, use mdc-rtl-reflexive-property().
 */
/**
 * Takes a base property and emits rules that assign <base-property>-left to <left-value> and
 * <base-property>-right to <right-value> in a LTR context, and vice versa in a RTL context.
 * For example:
 *
 * ```scss
 * .mdc-foo {
 *   @include mdc-rtl-reflexive-property(margin, auto, 12px);
 * }
 * ```
 * is equivalent to:
 *
 * ```scss
 * .mdc-foo {
 *   margin-left: auto;
 *   margin-right: 12px;
 *
 *   @include mdc-rtl {
 *     margin-left: 12px;
 *     margin-right: auto;
 *   }
 * }
 * ```
 *
 * A 4th optional $root-selector argument can be given, which will be passed to `mdc-rtl`.
 */
/**
 * Takes an argument specifying a horizontal position property (either "left" or "right") as well
 * as a value, and applies that value to the specified position in a LTR context, and flips it in a
 * RTL context. For example:
 *
 * ```scss
 * .mdc-foo {
 *   @include mdc-rtl-reflexive-position(left, 0);
 *   position: absolute;
 * }
 * ```
 * is equivalent to:
 *
 * ```scss
 *  .mdc-foo {
 *    position: absolute;
 *    left: 0;
 *    right: initial;
 *
 *    @include mdc-rtl {
 *      right: 0;
 *      left: initial;
 *    }
 *  }
 * ```
 * An optional third $root-selector argument may also be given, which is passed to `mdc-rtl`.
 */
/* TODO(sgomes): Figure out what to do about desktop font sizes. */
/* TODO(sgomes): Figure out what to do about i18n and i18n font sizes. */
/* stylelint-disable selector-max-type */
.lmdc-form-field {
  font-family: Roboto, sans-serif;
  -moz-osx-font-smoothing: grayscale;
  -webkit-font-smoothing: antialiased;
  font-size: 0.875rem;
  line-height: 1.25rem;
  font-weight: 400;
  letter-spacing: 0.04em;
  text-decoration: inherit;
  text-transform: inherit;
  /* @alternate */
  color: rgba(0, 0, 0, 0.87);
  color: var(--mdc-theme-text-primary-on-background, rgba(0, 0, 0, 0.87));
  display: inline-flex;
  align-items: center;
  vertical-align: middle; }
  .lmdc-form-field > label {
    order: 0;
    margin-right: auto;
    padding-left: 4px; }
  [dir="rtl"] .lmdc-form-field > label, .lmdc-form-field[dir="rtl"] > label {
    margin-left: auto;
    padding-right: 4px; }

.lmdc-form-field--align-end > label {
  order: -1;
  margin-left: auto;
  padding-right: 4px; }

[dir="rtl"] .lmdc-form-field--align-end > label, .lmdc-form-field--align-end[dir="rtl"] > label {
  margin-right: auto;
  padding-left: 4px; }

/* stylelint-enable selector-max-type */
/**
 * Creates a rule that will be applied when an MDC Web component is within the context of an RTL layout.
 *
 * Usage Example:
 * ```scss
 * .mdc-foo {
 *   position: absolute;
 *   left: 0;
 *
 *   @include mdc-rtl {
 *     left: auto;
 *     right: 0;
 *   }
 *
 *   &__bar {
 *     margin-left: 4px;
 *     @include mdc-rtl(".mdc-foo") {
 *       margin-left: auto;
 *       margin-right: 4px;
 *     }
 *   }
 * }
 *
 * .mdc-foo--mod {
 *   padding-left: 4px;
 *
 *   @include mdc-rtl {
 *     padding-left: auto;
 *     padding-right: 4px;
 *   }
 * }
 * ```
 *
 * Note that this works by checking for [dir="rtl"] on an ancestor element. While this will work
 * in most cases, it will in some cases lead to false negatives, e.g.
 *
 * ```html
 * <html dir="rtl">
 *   <!-- ... -->
 *   <div dir="ltr">
 *     <div class="mdc-foo">Styled incorrectly as RTL!</div>
 *   </div>
 * </html>
 * ```
 *
 * In the future, selectors such as :dir (http://mdn.io/:dir) will help us mitigate this.
 */
/**
 * Takes a base box-model property - e.g. margin / border / padding - along with a default
 * direction and value, and emits rules which apply the value to the
 * "<base-property>-<default-direction>" property by default, but flips the direction
 * when within an RTL context.
 *
 * For example:
 *
 * ```scss
 * .mdc-foo {
 *   @include mdc-rtl-reflexive-box(margin, left, 8px);
 * }
 * ```
 * is equivalent to:
 *
 * ```scss
 * .mdc-foo {
 *   margin-left: 8px;
 *
 *   @include mdc-rtl {
 *     margin-right: 8px;
 *     margin-left: 0;
 *   }
 * }
 * ```
 * whereas:
 *
 * ```scss
 * .mdc-foo {
 *   @include mdc-rtl-reflexive-box(margin, right, 8px);
 * }
 * ```
 * is equivalent to:
 *
 * ```scss
 * .mdc-foo {
 *   margin-right: 8px;
 *
 *   @include mdc-rtl {
 *     margin-right: 0;
 *     margin-left: 8px;
 *   }
 * }
 * ```
 *
 * You can also pass a 4th optional $root-selector argument which will be forwarded to `mdc-rtl`,
 * e.g. `@include mdc-rtl-reflexive-box(margin, left, 8px, ".mdc-component")`.
 *
 * Note that this function will always zero out the original value in an RTL context. If you're
 * trying to flip the values, use mdc-rtl-reflexive-property().
 */
/**
 * Takes a base property and emits rules that assign <base-property>-left to <left-value> and
 * <base-property>-right to <right-value> in a LTR context, and vice versa in a RTL context.
 * For example:
 *
 * ```scss
 * .mdc-foo {
 *   @include mdc-rtl-reflexive-property(margin, auto, 12px);
 * }
 * ```
 * is equivalent to:
 *
 * ```scss
 * .mdc-foo {
 *   margin-left: auto;
 *   margin-right: 12px;
 *
 *   @include mdc-rtl {
 *     margin-left: 12px;
 *     margin-right: auto;
 *   }
 * }
 * ```
 *
 * A 4th optional $root-selector argument can be given, which will be passed to `mdc-rtl`.
 */
/**
 * Takes an argument specifying a horizontal position property (either "left" or "right") as well
 * as a value, and applies that value to the specified position in a LTR context, and flips it in a
 * RTL context. For example:
 *
 * ```scss
 * .mdc-foo {
 *   @include mdc-rtl-reflexive-position(left, 0);
 *   position: absolute;
 * }
 * ```
 * is equivalent to:
 *
 * ```scss
 *  .mdc-foo {
 *    position: absolute;
 *    left: 0;
 *    right: initial;
 *
 *    @include mdc-rtl {
 *      right: 0;
 *      left: initial;
 *    }
 *  }
 * ```
 * An optional third $root-selector argument may also be given, which is passed to `mdc-rtl`.
 */
.lmdc-floating-label {
  position: absolute;
  bottom: 8px;
  left: 0;
  -webkit-transform-origin: left top;
          transform-origin: left top;
  transition: color 180ms cubic-bezier(0.4, 0, 0.2, 1), -webkit-transform 180ms cubic-bezier(0.4, 0, 0.2, 1);
  transition: transform 180ms cubic-bezier(0.4, 0, 0.2, 1), color 180ms cubic-bezier(0.4, 0, 0.2, 1);
  transition: transform 180ms cubic-bezier(0.4, 0, 0.2, 1), color 180ms cubic-bezier(0.4, 0, 0.2, 1), -webkit-transform 180ms cubic-bezier(0.4, 0, 0.2, 1);
  cursor: text; }
  [dir="rtl"] .lmdc-floating-label, .lmdc-floating-label[dir="rtl"] {
    right: 0;
    left: auto;
    -webkit-transform-origin: right top;
            transform-origin: right top; }

.lmdc-floating-label--float-above {
  cursor: auto; }

.lmdc-floating-label--float-above {
  -webkit-transform: translateY(-100%) scale(0.75);
          transform: translateY(-100%) scale(0.75); }

.lmdc-floating-label--shake {
  -webkit-animation: mdc-floating-label-shake-float-above-standard 250ms 1;
          animation: mdc-floating-label-shake-float-above-standard 250ms 1; }

@-webkit-keyframes mdc-floating-label-shake-float-above-standard {
  0% {
    -webkit-transform: translateX(calc(0 - 0%)) translateY(-100%) scale(0.75);
            transform: translateX(calc(0 - 0%)) translateY(-100%) scale(0.75); }
  33% {
    -webkit-animation-timing-function: cubic-bezier(0.5, 0, 0.70173, 0.49582);
            animation-timing-function: cubic-bezier(0.5, 0, 0.70173, 0.49582);
    -webkit-transform: translateX(calc(4% - 0%)) translateY(-100%) scale(0.75);
            transform: translateX(calc(4% - 0%)) translateY(-100%) scale(0.75); }
  66% {
    -webkit-animation-timing-function: cubic-bezier(0.30244, 0.38135, 0.55, 0.95635);
            animation-timing-function: cubic-bezier(0.30244, 0.38135, 0.55, 0.95635);
    -webkit-transform: translateX(calc(-4% - 0%)) translateY(-100%) scale(0.75);
            transform: translateX(calc(-4% - 0%)) translateY(-100%) scale(0.75); }
  100% {
    -webkit-transform: translateX(calc(0 - 0%)) translateY(-100%) scale(0.75);
            transform: translateX(calc(0 - 0%)) translateY(-100%) scale(0.75); } }

@keyframes mdc-floating-label-shake-float-above-standard {
  0% {
    -webkit-transform: translateX(calc(0 - 0%)) translateY(-100%) scale(0.75);
            transform: translateX(calc(0 - 0%)) translateY(-100%) scale(0.75); }
  33% {
    -webkit-animation-timing-function: cubic-bezier(0.5, 0, 0.70173, 0.49582);
            animation-timing-function: cubic-bezier(0.5, 0, 0.70173, 0.49582);
    -webkit-transform: translateX(calc(4% - 0%)) translateY(-100%) scale(0.75);
            transform: translateX(calc(4% - 0%)) translateY(-100%) scale(0.75); }
  66% {
    -webkit-animation-timing-function: cubic-bezier(0.30244, 0.38135, 0.55, 0.95635);
            animation-timing-function: cubic-bezier(0.30244, 0.38135, 0.55, 0.95635);
    -webkit-transform: translateX(calc(-4% - 0%)) translateY(-100%) scale(0.75);
            transform: translateX(calc(-4% - 0%)) translateY(-100%) scale(0.75); }
  100% {
    -webkit-transform: translateX(calc(0 - 0%)) translateY(-100%) scale(0.75);
            transform: translateX(calc(0 - 0%)) translateY(-100%) scale(0.75); } }

/**
 * Creates a rule that will be applied when an MDC Web component is within the context of an RTL layout.
 *
 * Usage Example:
 * ```scss
 * .mdc-foo {
 *   position: absolute;
 *   left: 0;
 *
 *   @include mdc-rtl {
 *     left: auto;
 *     right: 0;
 *   }
 *
 *   &__bar {
 *     margin-left: 4px;
 *     @include mdc-rtl(".mdc-foo") {
 *       margin-left: auto;
 *       margin-right: 4px;
 *     }
 *   }
 * }
 *
 * .mdc-foo--mod {
 *   padding-left: 4px;
 *
 *   @include mdc-rtl {
 *     padding-left: auto;
 *     padding-right: 4px;
 *   }
 * }
 * ```
 *
 * Note that this works by checking for [dir="rtl"] on an ancestor element. While this will work
 * in most cases, it will in some cases lead to false negatives, e.g.
 *
 * ```html
 * <html dir="rtl">
 *   <!-- ... -->
 *   <div dir="ltr">
 *     <div class="mdc-foo">Styled incorrectly as RTL!</div>
 *   </div>
 * </html>
 * ```
 *
 * In the future, selectors such as :dir (http://mdn.io/:dir) will help us mitigate this.
 */
/**
 * Takes a base box-model property - e.g. margin / border / padding - along with a default
 * direction and value, and emits rules which apply the value to the
 * "<base-property>-<default-direction>" property by default, but flips the direction
 * when within an RTL context.
 *
 * For example:
 *
 * ```scss
 * .mdc-foo {
 *   @include mdc-rtl-reflexive-box(margin, left, 8px);
 * }
 * ```
 * is equivalent to:
 *
 * ```scss
 * .mdc-foo {
 *   margin-left: 8px;
 *
 *   @include mdc-rtl {
 *     margin-right: 8px;
 *     margin-left: 0;
 *   }
 * }
 * ```
 * whereas:
 *
 * ```scss
 * .mdc-foo {
 *   @include mdc-rtl-reflexive-box(margin, right, 8px);
 * }
 * ```
 * is equivalent to:
 *
 * ```scss
 * .mdc-foo {
 *   margin-right: 8px;
 *
 *   @include mdc-rtl {
 *     margin-right: 0;
 *     margin-left: 8px;
 *   }
 * }
 * ```
 *
 * You can also pass a 4th optional $root-selector argument which will be forwarded to `mdc-rtl`,
 * e.g. `@include mdc-rtl-reflexive-box(margin, left, 8px, ".mdc-component")`.
 *
 * Note that this function will always zero out the original value in an RTL context. If you're
 * trying to flip the values, use mdc-rtl-reflexive-property().
 */
/**
 * Takes a base property and emits rules that assign <base-property>-left to <left-value> and
 * <base-property>-right to <right-value> in a LTR context, and vice versa in a RTL context.
 * For example:
 *
 * ```scss
 * .mdc-foo {
 *   @include mdc-rtl-reflexive-property(margin, auto, 12px);
 * }
 * ```
 * is equivalent to:
 *
 * ```scss
 * .mdc-foo {
 *   margin-left: auto;
 *   margin-right: 12px;
 *
 *   @include mdc-rtl {
 *     margin-left: 12px;
 *     margin-right: auto;
 *   }
 * }
 * ```
 *
 * A 4th optional $root-selector argument can be given, which will be passed to `mdc-rtl`.
 */
/**
 * Takes an argument specifying a horizontal position property (either "left" or "right") as well
 * as a value, and applies that value to the specified position in a LTR context, and flips it in a
 * RTL context. For example:
 *
 * ```scss
 * .mdc-foo {
 *   @include mdc-rtl-reflexive-position(left, 0);
 *   position: absolute;
 * }
 * ```
 * is equivalent to:
 *
 * ```scss
 *  .mdc-foo {
 *    position: absolute;
 *    left: 0;
 *    right: initial;
 *
 *    @include mdc-rtl {
 *      right: 0;
 *      left: initial;
 *    }
 *  }
 * ```
 * An optional third $root-selector argument may also be given, which is passed to `mdc-rtl`.
 */
/* TODO(sgomes): Figure out what to do about desktop font sizes. */
/* TODO(sgomes): Figure out what to do about i18n and i18n font sizes. */
.lmdc-grid-tile__primary {
  padding-bottom: calc(100% / 1); }

.lmdc-grid-tile {
  margin: 2px 0;
  padding: 0 2px; }

.lmdc-grid-tile__secondary {
  left: 2px;
  width: calc(100% - 4px); }

.lmdc-grid-list__tiles {
  margin: 2px auto; }

.lmdc-grid-list__tiles {
  display: flex;
  flex-flow: row wrap;
  padding: 0; }

.lmdc-grid-list--tile-gutter-1 .lmdc-grid-tile {
  margin: 0.5px 0;
  padding: 0 0.5px; }

.lmdc-grid-list--tile-gutter-1 .lmdc-grid-tile__secondary {
  left: 0.5px;
  width: calc(100% - 1px); }

.lmdc-grid-list--tile-gutter-1 .lmdc-grid-list__tiles {
  margin: 0.5px auto; }

.lmdc-grid-list--tile-aspect-16x9 .lmdc-grid-tile__primary {
  padding-bottom: calc(100% / 1.77778); }

.lmdc-grid-list--tile-aspect-3x2 .lmdc-grid-tile__primary {
  padding-bottom: calc(100% / 1.5); }

.lmdc-grid-list--tile-aspect-2x3 .lmdc-grid-tile__primary {
  padding-bottom: calc(100% / 0.66667); }

.lmdc-grid-list--tile-aspect-4x3 .lmdc-grid-tile__primary {
  padding-bottom: calc(100% / 1.33333); }

.lmdc-grid-list--tile-aspect-3x4 .lmdc-grid-tile__primary {
  padding-bottom: calc(100% / 0.75); }

.lmdc-grid-tile {
  display: block;
  position: relative;
  /* @alternate */
  width: 200px;
  width: var(--mdc-grid-list-tile-width, 200px); }

.lmdc-grid-tile__primary {
  /* @alternate */
  background-color: #fff;
  background-color: var(--mdc-theme-background, #fff);
  /* @alternate */
  color: rgba(0, 0, 0, 0.87);
  color: var(--mdc-theme-text-primary-on-background, rgba(0, 0, 0, 0.87));
  position: relative;
  height: 0; }

.lmdc-grid-tile__primary-content {
  position: absolute;
  top: 0;
  right: 0;
  bottom: 0;
  left: 0;
  width: 100%;
  height: 100%;
  background-repeat: no-repeat;
  background-position: center;
  background-size: cover; }

.lmdc-grid-tile__secondary {
  /* @alternate */
  background-color: #6200ee;
  background-color: var(--mdc-theme-primary, #6200ee);
  /* @alternate */
  color: white;
  color: var(--mdc-theme-text-primary-on-primary, white);
  position: absolute;
  bottom: 0;
  box-sizing: border-box;
  height: 48px;
  padding: 16px; }

.lmdc-grid-tile__title {
  text-overflow: ellipsis;
  white-space: nowrap;
  overflow: hidden;
  display: block;
  margin: 0;
  padding: 0;
  font-size: 1rem;
  font-weight: 500;
  line-height: 1rem; }

.lmdc-grid-tile__support-text {
  font-family: Roboto, sans-serif;
  -moz-osx-font-smoothing: grayscale;
  -webkit-font-smoothing: antialiased;
  font-size: 0.875rem;
  line-height: 1.25rem;
  font-weight: 400;
  letter-spacing: 0.04em;
  text-decoration: inherit;
  text-transform: inherit;
  text-overflow: ellipsis;
  white-space: nowrap;
  overflow: hidden;
  display: block;
  margin: 0;
  margin-top: 4px;
  padding: 0; }

.lmdc-grid-tile__icon, .lmdc-grid-list--with-icon-align-end mdc-icon, .lmdc-grid-list--with-icon-align-start mdc-icon {
  position: absolute;
  top: calc(50% - 24px / 2);
  font-size: 0; }

.lmdc-grid-list--twoline-caption .lmdc-grid-tile__secondary {
  height: 68px; }

.lmdc-grid-list--header-caption .lmdc-grid-tile__secondary {
  top: 0;
  bottom: auto; }

.lmdc-grid-list--with-icon-align-start .lmdc-grid-tile__secondary {
  padding-left: 56px;
  padding-right: 8px; }
  .lmdc-grid-list[dir="rtl"] .lmdc-grid-list--with-icon-align-start .lmdc-grid-tile__secondary,
  [dir="rtl"] .lmdc-grid-list .lmdc-grid-list--with-icon-align-start .lmdc-grid-tile__secondary {
    padding-left: 8px;
    padding-right: 56px; }

.lmdc-grid-list--with-icon-align-start .lmdc-grid-tile__icon, .lmdc-grid-list--with-icon-align-start .lmdc-grid-list--with-icon-align-end mdc-icon, .lmdc-grid-list--with-icon-align-end .lmdc-grid-list--with-icon-align-start mdc-icon, .lmdc-grid-list--with-icon-align-start mdc-icon {
  left: 16px;
  right: initial;
  font-size: 24px; }
  .lmdc-grid-list[dir="rtl"] .lmdc-grid-list--with-icon-align-start .lmdc-grid-tile__icon, .lmdc-grid-list[dir="rtl"] .lmdc-grid-list--with-icon-align-start .lmdc-grid-list--with-icon-align-end mdc-icon, .lmdc-grid-list--with-icon-align-end .lmdc-grid-list[dir="rtl"] .lmdc-grid-list--with-icon-align-start mdc-icon, .lmdc-grid-list[dir="rtl"] .lmdc-grid-list--with-icon-align-start mdc-icon, [dir="rtl"] .lmdc-grid-list .lmdc-grid-list--with-icon-align-start .lmdc-grid-tile__icon, [dir="rtl"] .lmdc-grid-list .lmdc-grid-list--with-icon-align-start .lmdc-grid-list--with-icon-align-end mdc-icon, .lmdc-grid-list--with-icon-align-end [dir="rtl"] .lmdc-grid-list .lmdc-grid-list--with-icon-align-start mdc-icon, [dir="rtl"] .lmdc-grid-list .lmdc-grid-list--with-icon-align-start mdc-icon {
    left: initial;
    right: 16px; }

.lmdc-grid-list--with-icon-align-end .lmdc-grid-tile__secondary {
  padding-left: 16px;
  padding-right: 56px; }
  .lmdc-grid-list[dir="rtl"] .lmdc-grid-list--with-icon-align-end .lmdc-grid-tile__secondary,
  [dir="rtl"] .lmdc-grid-list .lmdc-grid-list--with-icon-align-end .lmdc-grid-tile__secondary {
    padding-left: 56px;
    padding-right: 16px; }

.lmdc-grid-list--with-icon-align-end .lmdc-grid-tile__icon, .lmdc-grid-list--with-icon-align-end mdc-icon, .lmdc-grid-list--with-icon-align-end .lmdc-grid-list--with-icon-align-start mdc-icon, .lmdc-grid-list--with-icon-align-start .lmdc-grid-list--with-icon-align-end mdc-icon {
  left: initial;
  right: 16px;
  font-size: 24px; }
  .lmdc-grid-list[dir="rtl"] .lmdc-grid-list--with-icon-align-end .lmdc-grid-tile__icon, .lmdc-grid-list[dir="rtl"] .lmdc-grid-list--with-icon-align-end mdc-icon, .lmdc-grid-list[dir="rtl"] .lmdc-grid-list--with-icon-align-end .lmdc-grid-list--with-icon-align-start mdc-icon, .lmdc-grid-list--with-icon-align-start .lmdc-grid-list[dir="rtl"] .lmdc-grid-list--with-icon-align-end mdc-icon, [dir="rtl"] .lmdc-grid-list .lmdc-grid-list--with-icon-align-end .lmdc-grid-tile__icon, [dir="rtl"] .lmdc-grid-list .lmdc-grid-list--with-icon-align-end mdc-icon, [dir="rtl"] .lmdc-grid-list .lmdc-grid-list--with-icon-align-end .lmdc-grid-list--with-icon-align-start mdc-icon, .lmdc-grid-list--with-icon-align-start [dir="rtl"] .lmdc-grid-list .lmdc-grid-list--with-icon-align-end mdc-icon {
    left: 16px;
    right: initial; }

.lmdc-grid-tile {
  /* @alternate */
  width: 200px;
  width: var(--mdc-grid-list-tile-width, 200px); }

.lmdc-grid-tile__icon, .lmdc-grid-list--with-icon-align-end mdc-icon, .lmdc-grid-list--with-icon-align-start mdc-icon {
  font-size: 24px; }

/** postcss-bem-linter: define icon-toggle */
.lmdc-icon-toggle {
  --mdc-ripple-fg-size: 0;
  --mdc-ripple-left: 0;
  --mdc-ripple-top: 0;
  --mdc-ripple-fg-scale: 1;
  --mdc-ripple-fg-translate-end: 0;
  --mdc-ripple-fg-translate-start: 0;
  -webkit-tap-highlight-color: rgba(0, 0, 0, 0);
  will-change: transform, opacity;
  /* @alternate */
  color: rgba(0, 0, 0, 0.87);
  color: var(--mdc-theme-text-primary-on-light, rgba(0, 0, 0, 0.87));
  display: flex;
  position: relative;
  align-items: center;
  justify-content: center;
  box-sizing: border-box;
  width: 48px;
  height: 48px;
  padding: 12px;
  outline: none;
  font-size: 1.5rem;
  cursor: pointer;
  -webkit-user-select: none;
     -moz-user-select: none;
      -ms-user-select: none;
          user-select: none;
  will-change: initial; }
  .lmdc-icon-toggle::before, .lmdc-icon-toggle::after {
    position: absolute;
    border-radius: 50%;
    opacity: 0;
    pointer-events: none;
    content: ""; }
  .lmdc-icon-toggle::before {
    transition: opacity 15ms linear;
    z-index: 1; }
  .lmdc-icon-toggle.lmdc-ripple-upgraded::before {
    -webkit-transform: scale(var(--mdc-ripple-fg-scale, 1));
            transform: scale(var(--mdc-ripple-fg-scale, 1)); }
  .lmdc-icon-toggle.lmdc-ripple-upgraded::after {
    top: 0;
    left: 0;
    -webkit-transform: scale(0);
            transform: scale(0);
    -webkit-transform-origin: center center;
            transform-origin: center center; }
  .lmdc-icon-toggle.lmdc-ripple-upgraded--unbounded::after {
    top: var(--mdc-ripple-top, 0);
    left: var(--mdc-ripple-left, 0); }
  .lmdc-icon-toggle.lmdc-ripple-upgraded--foreground-activation::after {
    -webkit-animation: 225ms mdc-ripple-fg-radius-in forwards, 75ms mdc-ripple-fg-opacity-in forwards;
            animation: 225ms mdc-ripple-fg-radius-in forwards, 75ms mdc-ripple-fg-opacity-in forwards; }
  .lmdc-icon-toggle.lmdc-ripple-upgraded--foreground-deactivation::after {
    -webkit-animation: 150ms mdc-ripple-fg-opacity-out;
            animation: 150ms mdc-ripple-fg-opacity-out;
    -webkit-transform: translate(var(--mdc-ripple-fg-translate-end, 0)) scale(var(--mdc-ripple-fg-scale, 1));
            transform: translate(var(--mdc-ripple-fg-translate-end, 0)) scale(var(--mdc-ripple-fg-scale, 1)); }
  .lmdc-icon-toggle::before, .lmdc-icon-toggle::after {
    top: calc(50% - 50%);
    left: calc(50% - 50%);
    width: 100%;
    height: 100%; }
  .lmdc-icon-toggle.lmdc-ripple-upgraded::before, .lmdc-icon-toggle.lmdc-ripple-upgraded::after {
    top: var(--mdc-ripple-top, calc(50% - 50%));
    left: var(--mdc-ripple-left, calc(50% - 50%));
    width: var(--mdc-ripple-fg-size, 100%);
    height: var(--mdc-ripple-fg-size, 100%); }
  .lmdc-icon-toggle.lmdc-ripple-upgraded::after {
    width: var(--mdc-ripple-fg-size, 100%);
    height: var(--mdc-ripple-fg-size, 100%); }
  .lmdc-icon-toggle::before, .lmdc-icon-toggle::after {
    background-color: black; }
  .lmdc-icon-toggle:hover::before {
    opacity: 0.04; }
  .lmdc-icon-toggle:not(.lmdc-ripple-upgraded):focus::before, .lmdc-icon-toggle.lmdc-ripple-upgraded--background-focused::before {
    transition-duration: 75ms;
    opacity: 0.12; }
  .lmdc-icon-toggle:not(.lmdc-ripple-upgraded)::after {
    transition: opacity 150ms linear; }
  .lmdc-icon-toggle:not(.lmdc-ripple-upgraded):active::after {
    transition-duration: 75ms;
    opacity: 0.16; }
  .lmdc-icon-toggle.lmdc-ripple-upgraded {
    --mdc-ripple-fg-opacity: $opacity; }
  .lmdc-icon-toggle::after {
    position: absolute;
    border-radius: 50%;
    opacity: 0;
    pointer-events: none;
    content: ""; }

.lmdc-icon-toggle--disabled {
  /* @alternate */
  color: rgba(0, 0, 0, 0.38);
  color: var(--mdc-theme-text-disabled-on-light, rgba(0, 0, 0, 0.38));
  pointer-events: none; }

/** postcss-bem-linter: end */
.lmdc-line-ripple {
  position: absolute;
  bottom: 0;
  left: 0;
  width: 100%;
  height: 2px;
  -webkit-transform: scaleX(0);
          transform: scaleX(0);
  transition: opacity 180ms cubic-bezier(0.4, 0, 0.2, 1), -webkit-transform 180ms cubic-bezier(0.4, 0, 0.2, 1);
  transition: transform 180ms cubic-bezier(0.4, 0, 0.2, 1), opacity 180ms cubic-bezier(0.4, 0, 0.2, 1);
  transition: transform 180ms cubic-bezier(0.4, 0, 0.2, 1), opacity 180ms cubic-bezier(0.4, 0, 0.2, 1), -webkit-transform 180ms cubic-bezier(0.4, 0, 0.2, 1);
  opacity: 0;
  z-index: 2; }

.lmdc-line-ripple--active {
  -webkit-transform: scaleX(1);
          transform: scaleX(1);
  opacity: 1; }

.lmdc-line-ripple--deactivating {
  opacity: 0; }

/**
 * Creates a rule that will be applied when an MDC Web component is within the context of an RTL layout.
 *
 * Usage Example:
 * ```scss
 * .mdc-foo {
 *   position: absolute;
 *   left: 0;
 *
 *   @include mdc-rtl {
 *     left: auto;
 *     right: 0;
 *   }
 *
 *   &__bar {
 *     margin-left: 4px;
 *     @include mdc-rtl(".mdc-foo") {
 *       margin-left: auto;
 *       margin-right: 4px;
 *     }
 *   }
 * }
 *
 * .mdc-foo--mod {
 *   padding-left: 4px;
 *
 *   @include mdc-rtl {
 *     padding-left: auto;
 *     padding-right: 4px;
 *   }
 * }
 * ```
 *
 * Note that this works by checking for [dir="rtl"] on an ancestor element. While this will work
 * in most cases, it will in some cases lead to false negatives, e.g.
 *
 * ```html
 * <html dir="rtl">
 *   <!-- ... -->
 *   <div dir="ltr">
 *     <div class="mdc-foo">Styled incorrectly as RTL!</div>
 *   </div>
 * </html>
 * ```
 *
 * In the future, selectors such as :dir (http://mdn.io/:dir) will help us mitigate this.
 */
/**
 * Takes a base box-model property - e.g. margin / border / padding - along with a default
 * direction and value, and emits rules which apply the value to the
 * "<base-property>-<default-direction>" property by default, but flips the direction
 * when within an RTL context.
 *
 * For example:
 *
 * ```scss
 * .mdc-foo {
 *   @include mdc-rtl-reflexive-box(margin, left, 8px);
 * }
 * ```
 * is equivalent to:
 *
 * ```scss
 * .mdc-foo {
 *   margin-left: 8px;
 *
 *   @include mdc-rtl {
 *     margin-right: 8px;
 *     margin-left: 0;
 *   }
 * }
 * ```
 * whereas:
 *
 * ```scss
 * .mdc-foo {
 *   @include mdc-rtl-reflexive-box(margin, right, 8px);
 * }
 * ```
 * is equivalent to:
 *
 * ```scss
 * .mdc-foo {
 *   margin-right: 8px;
 *
 *   @include mdc-rtl {
 *     margin-right: 0;
 *     margin-left: 8px;
 *   }
 * }
 * ```
 *
 * You can also pass a 4th optional $root-selector argument which will be forwarded to `mdc-rtl`,
 * e.g. `@include mdc-rtl-reflexive-box(margin, left, 8px, ".mdc-component")`.
 *
 * Note that this function will always zero out the original value in an RTL context. If you're
 * trying to flip the values, use mdc-rtl-reflexive-property().
 */
/**
 * Takes a base property and emits rules that assign <base-property>-left to <left-value> and
 * <base-property>-right to <right-value> in a LTR context, and vice versa in a RTL context.
 * For example:
 *
 * ```scss
 * .mdc-foo {
 *   @include mdc-rtl-reflexive-property(margin, auto, 12px);
 * }
 * ```
 * is equivalent to:
 *
 * ```scss
 * .mdc-foo {
 *   margin-left: auto;
 *   margin-right: 12px;
 *
 *   @include mdc-rtl {
 *     margin-left: 12px;
 *     margin-right: auto;
 *   }
 * }
 * ```
 *
 * A 4th optional $root-selector argument can be given, which will be passed to `mdc-rtl`.
 */
/**
 * Takes an argument specifying a horizontal position property (either "left" or "right") as well
 * as a value, and applies that value to the specified position in a LTR context, and flips it in a
 * RTL context. For example:
 *
 * ```scss
 * .mdc-foo {
 *   @include mdc-rtl-reflexive-position(left, 0);
 *   position: absolute;
 * }
 * ```
 * is equivalent to:
 *
 * ```scss
 *  .mdc-foo {
 *    position: absolute;
 *    left: 0;
 *    right: initial;
 *
 *    @include mdc-rtl {
 *      right: 0;
 *      left: initial;
 *    }
 *  }
 * ```
 * An optional third $root-selector argument may also be given, which is passed to `mdc-rtl`.
 */
/* TODO(sgomes): Figure out what to do about desktop font sizes. */
/* TODO(sgomes): Figure out what to do about i18n and i18n font sizes. */
/* TODO(sgomes): Figure out what to do about desktop font sizes. */
/* TODO(sgomes): Figure out what to do about i18n and i18n font sizes. */
/**
 * Creates a rule that will be applied when an MDC Web component is within the context of an RTL layout.
 *
 * Usage Example:
 * ```scss
 * .mdc-foo {
 *   position: absolute;
 *   left: 0;
 *
 *   @include mdc-rtl {
 *     left: auto;
 *     right: 0;
 *   }
 *
 *   &__bar {
 *     margin-left: 4px;
 *     @include mdc-rtl(".mdc-foo") {
 *       margin-left: auto;
 *       margin-right: 4px;
 *     }
 *   }
 * }
 *
 * .mdc-foo--mod {
 *   padding-left: 4px;
 *
 *   @include mdc-rtl {
 *     padding-left: auto;
 *     padding-right: 4px;
 *   }
 * }
 * ```
 *
 * Note that this works by checking for [dir="rtl"] on an ancestor element. While this will work
 * in most cases, it will in some cases lead to false negatives, e.g.
 *
 * ```html
 * <html dir="rtl">
 *   <!-- ... -->
 *   <div dir="ltr">
 *     <div class="mdc-foo">Styled incorrectly as RTL!</div>
 *   </div>
 * </html>
 * ```
 *
 * In the future, selectors such as :dir (http://mdn.io/:dir) will help us mitigate this.
 */
/**
 * Takes a base box-model property - e.g. margin / border / padding - along with a default
 * direction and value, and emits rules which apply the value to the
 * "<base-property>-<default-direction>" property by default, but flips the direction
 * when within an RTL context.
 *
 * For example:
 *
 * ```scss
 * .mdc-foo {
 *   @include mdc-rtl-reflexive-box(margin, left, 8px);
 * }
 * ```
 * is equivalent to:
 *
 * ```scss
 * .mdc-foo {
 *   margin-left: 8px;
 *
 *   @include mdc-rtl {
 *     margin-right: 8px;
 *     margin-left: 0;
 *   }
 * }
 * ```
 * whereas:
 *
 * ```scss
 * .mdc-foo {
 *   @include mdc-rtl-reflexive-box(margin, right, 8px);
 * }
 * ```
 * is equivalent to:
 *
 * ```scss
 * .mdc-foo {
 *   margin-right: 8px;
 *
 *   @include mdc-rtl {
 *     margin-right: 0;
 *     margin-left: 8px;
 *   }
 * }
 * ```
 *
 * You can also pass a 4th optional $root-selector argument which will be forwarded to `mdc-rtl`,
 * e.g. `@include mdc-rtl-reflexive-box(margin, left, 8px, ".mdc-component")`.
 *
 * Note that this function will always zero out the original value in an RTL context. If you're
 * trying to flip the values, use mdc-rtl-reflexive-property().
 */
/**
 * Takes a base property and emits rules that assign <base-property>-left to <left-value> and
 * <base-property>-right to <right-value> in a LTR context, and vice versa in a RTL context.
 * For example:
 *
 * ```scss
 * .mdc-foo {
 *   @include mdc-rtl-reflexive-property(margin, auto, 12px);
 * }
 * ```
 * is equivalent to:
 *
 * ```scss
 * .mdc-foo {
 *   margin-left: auto;
 *   margin-right: 12px;
 *
 *   @include mdc-rtl {
 *     margin-left: 12px;
 *     margin-right: auto;
 *   }
 * }
 * ```
 *
 * A 4th optional $root-selector argument can be given, which will be passed to `mdc-rtl`.
 */
/**
 * Takes an argument specifying a horizontal position property (either "left" or "right") as well
 * as a value, and applies that value to the specified position in a LTR context, and flips it in a
 * RTL context. For example:
 *
 * ```scss
 * .mdc-foo {
 *   @include mdc-rtl-reflexive-position(left, 0);
 *   position: absolute;
 * }
 * ```
 * is equivalent to:
 *
 * ```scss
 *  .mdc-foo {
 *    position: absolute;
 *    left: 0;
 *    right: initial;
 *
 *    @include mdc-rtl {
 *      right: 0;
 *      left: initial;
 *    }
 *  }
 * ```
 * An optional third $root-selector argument may also be given, which is passed to `mdc-rtl`.
 */
.lmdc-list {
  font-family: Roboto, sans-serif;
  -moz-osx-font-smoothing: grayscale;
  -webkit-font-smoothing: antialiased;
  font-size: 1rem;
  line-height: 1.75rem;
  font-weight: 400;
  letter-spacing: 0.04em;
  text-decoration: inherit;
  text-transform: inherit;
  /* @alternate */
  color: rgba(0, 0, 0, 0.87);
  color: var(--mdc-theme-text-primary-on-background, rgba(0, 0, 0, 0.87));
  margin: 0;
  padding: 8px 0;
  line-height: 1.5rem;
  list-style-type: none; }

.lmdc-list-item__secondary-text {
  /* @alternate */
  color: rgba(0, 0, 0, 0.54);
  color: var(--mdc-theme-text-secondary-on-background, rgba(0, 0, 0, 0.54)); }

.lmdc-list-item__graphic {
  background-color: transparent; }

.lmdc-list-item__graphic {
  /* @alternate */
  color: rgba(0, 0, 0, 0.38);
  color: var(--mdc-theme-text-icon-on-background, rgba(0, 0, 0, 0.38)); }

.lmdc-list-item__meta {
  /* @alternate */
  color: rgba(0, 0, 0, 0.38);
  color: var(--mdc-theme-text-hint-on-background, rgba(0, 0, 0, 0.38)); }

.lmdc-list--dense {
  padding-top: 4px;
  padding-bottom: 4px;
  font-size: .812rem; }

.lmdc-list-item {
  display: flex;
  position: relative;
  align-items: center;
  justify-content: flex-start;
  height: 48px;
  padding: 0 16px;
  overflow: hidden; }
  .lmdc-list-item:focus {
    outline: none; }

.lmdc-list-item--selected,
.lmdc-list-item--activated {
  /* @alternate */
  color: #6200ee;
  color: var(--mdc-theme-primary, #6200ee); }
  .lmdc-list-item--selected .lmdc-list-item__graphic,
  .lmdc-list-item--activated .lmdc-list-item__graphic {
    /* @alternate */
    color: #6200ee;
    color: var(--mdc-theme-primary, #6200ee); }

.lmdc-list-item__graphic {
  margin-left: 0;
  margin-right: 32px;
  width: 24px;
  height: 24px;
  display: inline-flex;
  flex-shrink: 0;
  align-items: center;
  justify-content: center; }
  .lmdc-list-item[dir="rtl"] .lmdc-list-item__graphic,
  [dir="rtl"] .lmdc-list-item .lmdc-list-item__graphic {
    margin-left: 32px;
    margin-right: 0; }

.lmdc-list-item__meta {
  margin-left: auto;
  margin-right: 0; }
  .lmdc-list-item[dir="rtl"] .lmdc-list-item__meta,
  [dir="rtl"] .lmdc-list-item .lmdc-list-item__meta {
    margin-left: 0;
    margin-right: auto; }

.lmdc-list-item__text,
.lmdc-list-item__secondary-text {
  text-overflow: ellipsis;
  white-space: nowrap;
  overflow: hidden;
  display: block; }

.lmdc-list-item__secondary-text {
  font-family: Roboto, sans-serif;
  -moz-osx-font-smoothing: grayscale;
  -webkit-font-smoothing: antialiased;
  font-size: 0.875rem;
  line-height: 1.25rem;
  font-weight: 400;
  letter-spacing: 0.04em;
  text-decoration: inherit;
  text-transform: inherit; }

.lmdc-list--dense .lmdc-list-item__secondary-text {
  font-size: inherit; }

.lmdc-list--dense .lmdc-list-item {
  height: 40px; }

.lmdc-list--dense .lmdc-list-item__graphic {
  margin-left: 0;
  margin-right: 36px;
  width: 20px;
  height: 20px; }
  .lmdc-list-item[dir="rtl"] .lmdc-list--dense .lmdc-list-item__graphic,
  [dir="rtl"] .lmdc-list-item .lmdc-list--dense .lmdc-list-item__graphic {
    margin-left: 36px;
    margin-right: 0; }

.lmdc-list--avatar-list .lmdc-list-item {
  height: 56px; }

.lmdc-list--avatar-list .lmdc-list-item__graphic {
  margin-left: 0;
  margin-right: 16px;
  width: 40px;
  height: 40px;
  border-radius: 50%; }
  .lmdc-list-item[dir="rtl"] .lmdc-list--avatar-list .lmdc-list-item__graphic,
  [dir="rtl"] .lmdc-list-item .lmdc-list--avatar-list .lmdc-list-item__graphic {
    margin-left: 16px;
    margin-right: 0; }

:not(.lmdc-list--non-interactive) > .lmdc-list-item {
  --mdc-ripple-fg-size: 0;
  --mdc-ripple-left: 0;
  --mdc-ripple-top: 0;
  --mdc-ripple-fg-scale: 1;
  --mdc-ripple-fg-translate-end: 0;
  --mdc-ripple-fg-translate-start: 0;
  -webkit-tap-highlight-color: rgba(0, 0, 0, 0);
  will-change: transform, opacity; }
  :not(.lmdc-list--non-interactive) > .lmdc-list-item::before, :not(.lmdc-list--non-interactive) > .lmdc-list-item::after {
    position: absolute;
    border-radius: 50%;
    opacity: 0;
    pointer-events: none;
    content: ""; }
  :not(.lmdc-list--non-interactive) > .lmdc-list-item::before {
    transition: opacity 15ms linear;
    z-index: 1; }
  :not(.lmdc-list--non-interactive) > .lmdc-list-item.lmdc-ripple-upgraded::before {
    -webkit-transform: scale(var(--mdc-ripple-fg-scale, 1));
            transform: scale(var(--mdc-ripple-fg-scale, 1)); }
  :not(.lmdc-list--non-interactive) > .lmdc-list-item.lmdc-ripple-upgraded::after {
    top: 0;
    left: 0;
    -webkit-transform: scale(0);
            transform: scale(0);
    -webkit-transform-origin: center center;
            transform-origin: center center; }
  :not(.lmdc-list--non-interactive) > .lmdc-list-item.lmdc-ripple-upgraded--unbounded::after {
    top: var(--mdc-ripple-top, 0);
    left: var(--mdc-ripple-left, 0); }
  :not(.lmdc-list--non-interactive) > .lmdc-list-item.lmdc-ripple-upgraded--foreground-activation::after {
    -webkit-animation: 225ms mdc-ripple-fg-radius-in forwards, 75ms mdc-ripple-fg-opacity-in forwards;
            animation: 225ms mdc-ripple-fg-radius-in forwards, 75ms mdc-ripple-fg-opacity-in forwards; }
  :not(.lmdc-list--non-interactive) > .lmdc-list-item.lmdc-ripple-upgraded--foreground-deactivation::after {
    -webkit-animation: 150ms mdc-ripple-fg-opacity-out;
            animation: 150ms mdc-ripple-fg-opacity-out;
    -webkit-transform: translate(var(--mdc-ripple-fg-translate-end, 0)) scale(var(--mdc-ripple-fg-scale, 1));
            transform: translate(var(--mdc-ripple-fg-translate-end, 0)) scale(var(--mdc-ripple-fg-scale, 1)); }
  :not(.lmdc-list--non-interactive) > .lmdc-list-item::before, :not(.lmdc-list--non-interactive) > .lmdc-list-item::after {
    top: calc(50% - 100%);
    left: calc(50% - 100%);
    width: 200%;
    height: 200%; }
  :not(.lmdc-list--non-interactive) > .lmdc-list-item.lmdc-ripple-upgraded::after {
    width: var(--mdc-ripple-fg-size, 100%);
    height: var(--mdc-ripple-fg-size, 100%); }
  :not(.lmdc-list--non-interactive) > .lmdc-list-item::before, :not(.lmdc-list--non-interactive) > .lmdc-list-item::after {
    background-color: black; }
  :not(.lmdc-list--non-interactive) > .lmdc-list-item:hover::before {
    opacity: 0.04; }
  :not(.lmdc-list--non-interactive) > .lmdc-list-item:not(.lmdc-ripple-upgraded):focus::before, :not(.lmdc-list--non-interactive) > .lmdc-list-item.lmdc-ripple-upgraded--background-focused::before {
    transition-duration: 75ms;
    opacity: 0.12; }
  :not(.lmdc-list--non-interactive) > .lmdc-list-item:not(.lmdc-ripple-upgraded)::after {
    transition: opacity 150ms linear; }
  :not(.lmdc-list--non-interactive) > .lmdc-list-item:not(.lmdc-ripple-upgraded):active::after {
    transition-duration: 75ms;
    opacity: 0.16; }
  :not(.lmdc-list--non-interactive) > .lmdc-list-item.lmdc-ripple-upgraded {
    --mdc-ripple-fg-opacity: $opacity; }
  :not(.lmdc-list--non-interactive) > .lmdc-list-item--activated::before {
    opacity: 0.12; }
  :not(.lmdc-list--non-interactive) > .lmdc-list-item--activated::before, :not(.lmdc-list--non-interactive) > .lmdc-list-item--activated::after {
    /* @alternate */
    background-color: #6200ee; }
    @supports not (-ms-ime-align: auto) {
      :not(.lmdc-list--non-interactive) > .lmdc-list-item--activated::before, :not(.lmdc-list--non-interactive) > .lmdc-list-item--activated::after {
        background-color: var(--mdc-theme-primary, #6200ee); } }
  :not(.lmdc-list--non-interactive) > .lmdc-list-item--activated:hover::before {
    opacity: 0.16; }
  :not(.lmdc-list--non-interactive) > .lmdc-list-item--activated:not(.lmdc-ripple-upgraded):focus::before, :not(.lmdc-list--non-interactive) > .lmdc-list-item--activated.lmdc-ripple-upgraded--background-focused::before {
    transition-duration: 75ms;
    opacity: 0.24; }
  :not(.lmdc-list--non-interactive) > .lmdc-list-item--activated:not(.lmdc-ripple-upgraded)::after {
    transition: opacity 150ms linear; }
  :not(.lmdc-list--non-interactive) > .lmdc-list-item--activated:not(.lmdc-ripple-upgraded):active::after {
    transition-duration: 75ms;
    opacity: 0.28; }
  :not(.lmdc-list--non-interactive) > .lmdc-list-item--activated.lmdc-ripple-upgraded {
    --mdc-ripple-fg-opacity: $opacity; }
  :not(.lmdc-list--non-interactive) > .lmdc-list-item--selected::before {
    opacity: 0.08; }
  :not(.lmdc-list--non-interactive) > .lmdc-list-item--selected::before, :not(.lmdc-list--non-interactive) > .lmdc-list-item--selected::after {
    /* @alternate */
    background-color: #6200ee; }
    @supports not (-ms-ime-align: auto) {
      :not(.lmdc-list--non-interactive) > .lmdc-list-item--selected::before, :not(.lmdc-list--non-interactive) > .lmdc-list-item--selected::after {
        background-color: var(--mdc-theme-primary, #6200ee); } }
  :not(.lmdc-list--non-interactive) > .lmdc-list-item--selected:hover::before {
    opacity: 0.12; }
  :not(.lmdc-list--non-interactive) > .lmdc-list-item--selected:not(.lmdc-ripple-upgraded):focus::before, :not(.lmdc-list--non-interactive) > .lmdc-list-item--selected.lmdc-ripple-upgraded--background-focused::before {
    transition-duration: 75ms;
    opacity: 0.2; }
  :not(.lmdc-list--non-interactive) > .lmdc-list-item--selected:not(.lmdc-ripple-upgraded)::after {
    transition: opacity 150ms linear; }
  :not(.lmdc-list--non-interactive) > .lmdc-list-item--selected:not(.lmdc-ripple-upgraded):active::after {
    transition-duration: 75ms;
    opacity: 0.24; }
  :not(.lmdc-list--non-interactive) > .lmdc-list-item--selected.lmdc-ripple-upgraded {
    --mdc-ripple-fg-opacity: $opacity; }

.lmdc-list--two-line .lmdc-list-item {
  height: 72px; }

.lmdc-list--two-line.lmdc-list--dense .lmdc-list-item {
  height: 60px; }

.lmdc-list--avatar-list.lmdc-list--dense .lmdc-list-item {
  height: 48px; }

.lmdc-list--avatar-list.lmdc-list--dense .lmdc-list-item__graphic {
  margin-left: 0;
  margin-right: 20px;
  width: 36px;
  height: 36px; }
  .lmdc-list-item[dir="rtl"] .lmdc-list--avatar-list.lmdc-list--dense .lmdc-list-item__graphic,
  [dir="rtl"] .lmdc-list-item .lmdc-list--avatar-list.lmdc-list--dense .lmdc-list-item__graphic {
    margin-left: 20px;
    margin-right: 0; }

a.lmdc-list-item {
  color: inherit;
  text-decoration: none; }

.lmdc-list-divider {
  height: 0;
  margin: 0;
  border: none;
  border-bottom-width: 1px;
  border-bottom-style: solid; }

.lmdc-list-divider {
  border-bottom-color: rgba(0, 0, 0, 0.12); }

.lmdc-list-divider--padded {
  margin: 0 16px; }

.lmdc-list-divider--inset {
  margin-left: 72px;
  margin-right: 0;
  width: calc(100% - 72px); }
  .lmdc-list-group[dir="rtl"] .lmdc-list-divider--inset,
  [dir="rtl"] .lmdc-list-group .lmdc-list-divider--inset {
    margin-left: 0;
    margin-right: 72px; }

.lmdc-list-divider--inset.lmdc-list-divider--padded {
  width: calc(100% - 72px - 16px); }

.lmdc-list-group .lmdc-list {
  padding: 0; }

.lmdc-list-group__subheader {
  font-family: Roboto, sans-serif;
  -moz-osx-font-smoothing: grayscale;
  -webkit-font-smoothing: antialiased;
  font-size: 0.875rem;
  line-height: 1.5rem;
  font-weight: 500;
  letter-spacing: 0.04em;
  text-decoration: inherit;
  text-transform: inherit;
  margin: 0.75rem 16px; }

.lmdc-list-group__subheader {
  /* @alternate */
  color: rgba(0, 0, 0, 0.87);
  color: var(--mdc-theme-text-primary-on-background, rgba(0, 0, 0, 0.87)); }

.lmdc-list, .lmdc-list-item, .lmdc-list-divider {
  display: block; }

/**
 * The css property used for elevation. In most cases this should not be changed. It is exposed
 * as a variable for abstraction / easy use when needing to reference the property directly, for
 * example in a `will-change` rule.
 */
/**
 * The default duration value for elevation transitions.
 */
/**
 * The default easing value for elevation transitions.
 */
/**
 * Applies the correct CSS rules to an element to give it the elevation specified by $z-value.
 * The $z-value must be between 0 and 24.
 * If $color has an alpha channel, it will be ignored and overridden. To increase the opacity of the shadow, use
 * $opacity-boost.
 */
/**
 * Returns a string that can be used as the value for a `transition` property for elevation.
 * Calling this function directly is useful in situations where a component needs to transition
 * more than one property.
 *
 * ```scss
 * .foo {
 *   transition: mdc-elevation-transition-value(), opacity 100ms ease;
 *   will-change: $mdc-elevation-property, opacity;
 * }
 * ```
 */
/* TODO(sgomes): Figure out what to do about desktop font sizes. */
/* TODO(sgomes): Figure out what to do about i18n and i18n font sizes. */
.lmdc-menu {
  box-shadow: 0px 3px 1px -2px rgba(0, 0, 0, 0.2), 0px 2px 2px 0px rgba(0, 0, 0, 0.14), 0px 1px 5px 0px rgba(0, 0, 0, 0.12);
  /* @alternate */
  background-color: #fff;
  background-color: var(--mdc-theme-background, #fff);
  display: none;
  position: absolute;
  box-sizing: border-box;
  min-width: 170px;
  max-width: calc(100vw - 32px);
  max-height: calc(100vh - 32px);
  margin: 0;
  padding: 0;
  -webkit-transform: scale(1);
          transform: scale(1);
  -webkit-transform-origin: top left;
          transform-origin: top left;
  border-radius: 2px;
  opacity: 0;
  white-space: nowrap;
  overflow-x: hidden;
  overflow-y: auto;
  will-change: transform, opacity;
  z-index: 4; }
  .lmdc-menu:focus {
    outline: none; }
  .lmdc-menu--animating-open {
    display: inline-block;
    -webkit-transform: scale(0.8);
            transform: scale(0.8);
    transition: opacity 0.03s linear, -webkit-transform 0.12s cubic-bezier(0, 0, 0.2, 1);
    transition: opacity 0.03s linear, transform 0.12s cubic-bezier(0, 0, 0.2, 1);
    transition: opacity 0.03s linear, transform 0.12s cubic-bezier(0, 0, 0.2, 1), -webkit-transform 0.12s cubic-bezier(0, 0, 0.2, 1);
    opacity: 0;
    overflow-y: hidden; }
  .lmdc-menu--open {
    display: inline-block;
    -webkit-transform: scale(1);
            transform: scale(1);
    opacity: 1; }
  .lmdc-menu--animating-closed {
    display: inline-block;
    transition: opacity 0.075s linear;
    opacity: 0;
    overflow-y: hidden; }
  .lmdc-menu__items {
    box-sizing: border-box;
    -webkit-transform: scale(1);
            transform: scale(1);
    overflow-x: hidden;
    overflow-y: auto;
    will-change: transform; }
    .lmdc-menu__items > .lmdc-list-item {
      cursor: pointer; }
    .lmdc-menu--animating .lmdc-menu__items {
      overflow-y: hidden; }
  .lmdc-menu--animating-open > .lmdc-menu__items {
    -webkit-transform: scale(1.25);
            transform: scale(1.25); }
  .lmdc-menu--open > .lmdc-menu__items {
    -webkit-transform: scale(1);
            transform: scale(1); }
  [dir="rtl"] .lmdc-menu {
    -webkit-transform-origin: top right;
            transform-origin: top right; }
  .lmdc-menu .lmdc-list-group,
  .lmdc-menu .lmdc-list {
    padding: 8px 0; }
  .lmdc-menu .lmdc-list-item {
    font-family: Roboto, sans-serif;
    -moz-osx-font-smoothing: grayscale;
    -webkit-font-smoothing: antialiased;
    font-size: 1rem;
    line-height: 1.75rem;
    font-weight: 400;
    letter-spacing: 0.04em;
    text-decoration: inherit;
    text-transform: inherit;
    position: relative;
    outline: none;
    color: inherit;
    text-decoration: none;
    -webkit-user-select: none;
       -moz-user-select: none;
        -ms-user-select: none;
            user-select: none; }
  .lmdc-menu .lmdc-list-item__graphic {
    /* @alternate */
    color: rgba(0, 0, 0, 0.54);
    color: var(--mdc-theme-text-secondary-on-background, rgba(0, 0, 0, 0.54)); }
  .lmdc-menu .lmdc-list-item[aria-disabled="true"] {
    /* @alternate */
    color: rgba(0, 0, 0, 0.38);
    color: var(--mdc-theme-text-disabled-on-background, rgba(0, 0, 0, 0.38));
    cursor: default;
    pointer-events: none; }
    .lmdc-menu .lmdc-list-item[aria-disabled="true"]:focus::before {
      opacity: 0; }

.lmdc-menu-anchor {
  position: relative;
  overflow: visible; }

.lmdc-radio {
  --mdc-ripple-fg-size: 0;
  --mdc-ripple-left: 0;
  --mdc-ripple-top: 0;
  --mdc-ripple-fg-scale: 1;
  --mdc-ripple-fg-translate-end: 0;
  --mdc-ripple-fg-translate-start: 0;
  -webkit-tap-highlight-color: rgba(0, 0, 0, 0);
  will-change: transform, opacity;
  display: inline-block;
  position: relative;
  flex: 0 0 auto;
  box-sizing: border-box;
  width: 40px;
  height: 40px;
  padding: 10px;
  cursor: pointer;
  will-change: opacity, transform, border-color, background-color, color; }
  .lmdc-radio .lmdc-radio__native-control:enabled:not(:checked) + .lmdc-radio__background .lmdc-radio__outer-circle {
    /* @alternate */
    border-color: rgba(0, 0, 0, 0.54);
    border-color: var(--mdc-theme-text-secondary-on-background, rgba(0, 0, 0, 0.54)); }
  .lmdc-radio .lmdc-radio__native-control:enabled:checked + .lmdc-radio__background .lmdc-radio__outer-circle {
    /* @alternate */
    border-color: #018786;
    border-color: var(--mdc-theme-secondary, #018786); }
  .lmdc-radio .lmdc-radio__native-control:enabled + .lmdc-radio__background .lmdc-radio__inner-circle {
    /* @alternate */
    background-color: #018786;
    background-color: var(--mdc-theme-secondary, #018786); }
  .lmdc-radio .lmdc-radio__background::before {
    /* @alternate */
    background-color: #018786; }
    @supports not (-ms-ime-align: auto) {
      .lmdc-radio .lmdc-radio__background::before {
        background-color: var(--mdc-theme-secondary, #018786); } }
  .lmdc-radio::before, .lmdc-radio::after {
    position: absolute;
    border-radius: 50%;
    opacity: 0;
    pointer-events: none;
    content: ""; }
  .lmdc-radio::before {
    transition: opacity 15ms linear;
    z-index: 1; }
  .lmdc-radio.lmdc-ripple-upgraded::before {
    -webkit-transform: scale(var(--mdc-ripple-fg-scale, 1));
            transform: scale(var(--mdc-ripple-fg-scale, 1)); }
  .lmdc-radio.lmdc-ripple-upgraded::after {
    top: 0;
    left: 0;
    -webkit-transform: scale(0);
            transform: scale(0);
    -webkit-transform-origin: center center;
            transform-origin: center center; }
  .lmdc-radio.lmdc-ripple-upgraded--unbounded::after {
    top: var(--mdc-ripple-top, 0);
    left: var(--mdc-ripple-left, 0); }
  .lmdc-radio.lmdc-ripple-upgraded--foreground-activation::after {
    -webkit-animation: 225ms mdc-ripple-fg-radius-in forwards, 75ms mdc-ripple-fg-opacity-in forwards;
            animation: 225ms mdc-ripple-fg-radius-in forwards, 75ms mdc-ripple-fg-opacity-in forwards; }
  .lmdc-radio.lmdc-ripple-upgraded--foreground-deactivation::after {
    -webkit-animation: 150ms mdc-ripple-fg-opacity-out;
            animation: 150ms mdc-ripple-fg-opacity-out;
    -webkit-transform: translate(var(--mdc-ripple-fg-translate-end, 0)) scale(var(--mdc-ripple-fg-scale, 1));
            transform: translate(var(--mdc-ripple-fg-translate-end, 0)) scale(var(--mdc-ripple-fg-scale, 1)); }
  .lmdc-radio::before, .lmdc-radio::after {
    top: calc(50% - 50%);
    left: calc(50% - 50%);
    width: 100%;
    height: 100%; }
  .lmdc-radio.lmdc-ripple-upgraded::before, .lmdc-radio.lmdc-ripple-upgraded::after {
    top: var(--mdc-ripple-top, calc(50% - 50%));
    left: var(--mdc-ripple-left, calc(50% - 50%));
    width: var(--mdc-ripple-fg-size, 100%);
    height: var(--mdc-ripple-fg-size, 100%); }
  .lmdc-radio.lmdc-ripple-upgraded::after {
    width: var(--mdc-ripple-fg-size, 100%);
    height: var(--mdc-ripple-fg-size, 100%); }
  .lmdc-radio::before, .lmdc-radio::after {
    /* @alternate */
    background-color: #018786; }
    @supports not (-ms-ime-align: auto) {
      .lmdc-radio::before, .lmdc-radio::after {
        background-color: var(--mdc-theme-secondary, #018786); } }
  .lmdc-radio:hover::before {
    opacity: 0.04; }
  .lmdc-radio:not(.lmdc-ripple-upgraded):focus::before, .lmdc-radio.lmdc-ripple-upgraded--background-focused::before {
    transition-duration: 75ms;
    opacity: 0.12; }
  .lmdc-radio:not(.lmdc-ripple-upgraded)::after {
    transition: opacity 150ms linear; }
  .lmdc-radio:not(.lmdc-ripple-upgraded):active::after {
    transition-duration: 75ms;
    opacity: 0.16; }
  .lmdc-radio.lmdc-ripple-upgraded {
    --mdc-ripple-fg-opacity: $opacity; }
  .lmdc-radio__background {
    display: inline-block;
    position: absolute;
    left: 10px;
    box-sizing: border-box;
    width: 50%;
    height: 50%; }
    .lmdc-radio__background::before {
      position: absolute;
      top: 0;
      left: 0;
      width: 100%;
      height: 100%;
      -webkit-transform: scale(0, 0);
              transform: scale(0, 0);
      transition: opacity 120ms 0ms cubic-bezier(0.4, 0, 0.6, 1), -webkit-transform 120ms 0ms cubic-bezier(0.4, 0, 0.6, 1);
      transition: opacity 120ms 0ms cubic-bezier(0.4, 0, 0.6, 1), transform 120ms 0ms cubic-bezier(0.4, 0, 0.6, 1);
      transition: opacity 120ms 0ms cubic-bezier(0.4, 0, 0.6, 1), transform 120ms 0ms cubic-bezier(0.4, 0, 0.6, 1), -webkit-transform 120ms 0ms cubic-bezier(0.4, 0, 0.6, 1);
      border-radius: 50%;
      opacity: 0;
      pointer-events: none;
      content: ""; }
  .lmdc-radio__outer-circle {
    position: absolute;
    top: 0;
    left: 0;
    box-sizing: border-box;
    width: 100%;
    height: 100%;
    transition: border-color 120ms 0ms cubic-bezier(0.4, 0, 0.6, 1);
    border-width: 2px;
    border-style: solid;
    border-radius: 50%; }
  .lmdc-radio__inner-circle {
    position: absolute;
    top: 0;
    left: 0;
    box-sizing: border-box;
    width: 100%;
    height: 100%;
    -webkit-transform: scale(0, 0);
            transform: scale(0, 0);
    transition: background-color 120ms 0ms cubic-bezier(0.4, 0, 0.6, 1), -webkit-transform 120ms 0ms cubic-bezier(0.4, 0, 0.6, 1);
    transition: transform 120ms 0ms cubic-bezier(0.4, 0, 0.6, 1), background-color 120ms 0ms cubic-bezier(0.4, 0, 0.6, 1);
    transition: transform 120ms 0ms cubic-bezier(0.4, 0, 0.6, 1), background-color 120ms 0ms cubic-bezier(0.4, 0, 0.6, 1), -webkit-transform 120ms 0ms cubic-bezier(0.4, 0, 0.6, 1);
    border-radius: 50%; }
  .lmdc-radio__native-control {
    position: absolute;
    top: 0;
    left: 0;
    width: 100%;
    height: 100%;
    margin: 0;
    padding: 0;
    opacity: 0;
    cursor: inherit;
    z-index: 1; }
  .lmdc-radio.lmdc-ripple-upgraded .lmdc-radio__background::before {
    content: none; }

.lmdc-radio__native-control:checked + .lmdc-radio__background,
.lmdc-radio__native-control:disabled + .lmdc-radio__background {
  transition: opacity 120ms 0ms cubic-bezier(0, 0, 0.2, 1), -webkit-transform 120ms 0ms cubic-bezier(0, 0, 0.2, 1);
  transition: opacity 120ms 0ms cubic-bezier(0, 0, 0.2, 1), transform 120ms 0ms cubic-bezier(0, 0, 0.2, 1);
  transition: opacity 120ms 0ms cubic-bezier(0, 0, 0.2, 1), transform 120ms 0ms cubic-bezier(0, 0, 0.2, 1), -webkit-transform 120ms 0ms cubic-bezier(0, 0, 0.2, 1); }
  .lmdc-radio__native-control:checked + .lmdc-radio__background .lmdc-radio__outer-circle,
  .lmdc-radio__native-control:disabled + .lmdc-radio__background .lmdc-radio__outer-circle {
    transition: border-color 120ms 0ms cubic-bezier(0, 0, 0.2, 1); }
  .lmdc-radio__native-control:checked + .lmdc-radio__background .lmdc-radio__inner-circle,
  .lmdc-radio__native-control:disabled + .lmdc-radio__background .lmdc-radio__inner-circle {
    transition: background-color 120ms 0ms cubic-bezier(0, 0, 0.2, 1), -webkit-transform 120ms 0ms cubic-bezier(0, 0, 0.2, 1);
    transition: transform 120ms 0ms cubic-bezier(0, 0, 0.2, 1), background-color 120ms 0ms cubic-bezier(0, 0, 0.2, 1);
    transition: transform 120ms 0ms cubic-bezier(0, 0, 0.2, 1), background-color 120ms 0ms cubic-bezier(0, 0, 0.2, 1), -webkit-transform 120ms 0ms cubic-bezier(0, 0, 0.2, 1); }

.lmdc-radio--disabled {
  cursor: default;
  pointer-events: none; }

.lmdc-radio__native-control:checked + .lmdc-radio__background .lmdc-radio__inner-circle {
  -webkit-transform: scale(0.5);
          transform: scale(0.5);
  transition: background-color 120ms 0ms cubic-bezier(0, 0, 0.2, 1), -webkit-transform 120ms 0ms cubic-bezier(0, 0, 0.2, 1);
  transition: transform 120ms 0ms cubic-bezier(0, 0, 0.2, 1), background-color 120ms 0ms cubic-bezier(0, 0, 0.2, 1);
  transition: transform 120ms 0ms cubic-bezier(0, 0, 0.2, 1), background-color 120ms 0ms cubic-bezier(0, 0, 0.2, 1), -webkit-transform 120ms 0ms cubic-bezier(0, 0, 0.2, 1); }

.lmdc-radio__native-control:disabled + .lmdc-radio__background,
[aria-disabled="true"] .lmdc-radio__native-control + .lmdc-radio__background {
  cursor: default; }
  .lmdc-radio__native-control:disabled + .lmdc-radio__background .lmdc-radio__outer-circle,
  [aria-disabled="true"] .lmdc-radio__native-control + .lmdc-radio__background .lmdc-radio__outer-circle {
    border-color: rgba(0, 0, 0, 0.26); }
  .lmdc-radio__native-control:disabled + .lmdc-radio__background .lmdc-radio__inner-circle,
  [aria-disabled="true"] .lmdc-radio__native-control + .lmdc-radio__background .lmdc-radio__inner-circle {
    background-color: rgba(0, 0, 0, 0.26); }

.lmdc-radio__native-control:focus + .lmdc-radio__background::before {
  -webkit-transform: scale(2, 2);
          transform: scale(2, 2);
  transition: opacity 120ms 0ms cubic-bezier(0, 0, 0.2, 1), -webkit-transform 120ms 0ms cubic-bezier(0, 0, 0.2, 1);
  transition: opacity 120ms 0ms cubic-bezier(0, 0, 0.2, 1), transform 120ms 0ms cubic-bezier(0, 0, 0.2, 1);
  transition: opacity 120ms 0ms cubic-bezier(0, 0, 0.2, 1), transform 120ms 0ms cubic-bezier(0, 0, 0.2, 1), -webkit-transform 120ms 0ms cubic-bezier(0, 0, 0.2, 1);
  opacity: .26; }

.lmdc-ripple-surface {
  --mdc-ripple-fg-size: 0;
  --mdc-ripple-left: 0;
  --mdc-ripple-top: 0;
  --mdc-ripple-fg-scale: 1;
  --mdc-ripple-fg-translate-end: 0;
  --mdc-ripple-fg-translate-start: 0;
  -webkit-tap-highlight-color: rgba(0, 0, 0, 0);
  will-change: transform, opacity;
  position: relative;
  outline: none;
  overflow: hidden; }
  .lmdc-ripple-surface::before, .lmdc-ripple-surface::after {
    position: absolute;
    border-radius: 50%;
    opacity: 0;
    pointer-events: none;
    content: ""; }
  .lmdc-ripple-surface::before {
    transition: opacity 15ms linear;
    z-index: 1; }
  .lmdc-ripple-surface.lmdc-ripple-upgraded::before {
    -webkit-transform: scale(var(--mdc-ripple-fg-scale, 1));
            transform: scale(var(--mdc-ripple-fg-scale, 1)); }
  .lmdc-ripple-surface.lmdc-ripple-upgraded::after {
    top: 0;
    left: 0;
    -webkit-transform: scale(0);
            transform: scale(0);
    -webkit-transform-origin: center center;
            transform-origin: center center; }
  .lmdc-ripple-surface.lmdc-ripple-upgraded--unbounded::after {
    top: var(--mdc-ripple-top, 0);
    left: var(--mdc-ripple-left, 0); }
  .lmdc-ripple-surface.lmdc-ripple-upgraded--foreground-activation::after {
    -webkit-animation: 225ms mdc-ripple-fg-radius-in forwards, 75ms mdc-ripple-fg-opacity-in forwards;
            animation: 225ms mdc-ripple-fg-radius-in forwards, 75ms mdc-ripple-fg-opacity-in forwards; }
  .lmdc-ripple-surface.lmdc-ripple-upgraded--foreground-deactivation::after {
    -webkit-animation: 150ms mdc-ripple-fg-opacity-out;
            animation: 150ms mdc-ripple-fg-opacity-out;
    -webkit-transform: translate(var(--mdc-ripple-fg-translate-end, 0)) scale(var(--mdc-ripple-fg-scale, 1));
            transform: translate(var(--mdc-ripple-fg-translate-end, 0)) scale(var(--mdc-ripple-fg-scale, 1)); }
  .lmdc-ripple-surface::before, .lmdc-ripple-surface::after {
    background-color: black; }
  .lmdc-ripple-surface:hover::before {
    opacity: 0.04; }
  .lmdc-ripple-surface:not(.lmdc-ripple-upgraded):focus::before, .lmdc-ripple-surface.lmdc-ripple-upgraded--background-focused::before {
    transition-duration: 75ms;
    opacity: 0.12; }
  .lmdc-ripple-surface:not(.lmdc-ripple-upgraded)::after {
    transition: opacity 150ms linear; }
  .lmdc-ripple-surface:not(.lmdc-ripple-upgraded):active::after {
    transition-duration: 75ms;
    opacity: 0.16; }
  .lmdc-ripple-surface.lmdc-ripple-upgraded {
    --mdc-ripple-fg-opacity: $opacity; }
  .lmdc-ripple-surface::before, .lmdc-ripple-surface::after {
    top: calc(50% - 100%);
    left: calc(50% - 100%);
    width: 200%;
    height: 200%; }
  .lmdc-ripple-surface.lmdc-ripple-upgraded::after {
    width: var(--mdc-ripple-fg-size, 100%);
    height: var(--mdc-ripple-fg-size, 100%); }
  .lmdc-ripple-surface[data-mdc-ripple-is-unbounded] {
    overflow: visible; }
    .lmdc-ripple-surface[data-mdc-ripple-is-unbounded]::before, .lmdc-ripple-surface[data-mdc-ripple-is-unbounded]::after {
      top: calc(50% - 50%);
      left: calc(50% - 50%);
      width: 100%;
      height: 100%; }
    .lmdc-ripple-surface[data-mdc-ripple-is-unbounded].lmdc-ripple-upgraded::before, .lmdc-ripple-surface[data-mdc-ripple-is-unbounded].lmdc-ripple-upgraded::after {
      top: var(--mdc-ripple-top, calc(50% - 50%));
      left: var(--mdc-ripple-left, calc(50% - 50%));
      width: var(--mdc-ripple-fg-size, 100%);
      height: var(--mdc-ripple-fg-size, 100%); }
    .lmdc-ripple-surface[data-mdc-ripple-is-unbounded].lmdc-ripple-upgraded::after {
      width: var(--mdc-ripple-fg-size, 100%);
      height: var(--mdc-ripple-fg-size, 100%); }
  .lmdc-ripple-surface--primary::before, .lmdc-ripple-surface--primary::after {
    /* @alternate */
    background-color: #6200ee; }
    @supports not (-ms-ime-align: auto) {
      .lmdc-ripple-surface--primary::before, .lmdc-ripple-surface--primary::after {
        background-color: var(--mdc-theme-primary, #6200ee); } }
  .lmdc-ripple-surface--primary:hover::before {
    opacity: 0.04; }
  .lmdc-ripple-surface--primary:not(.lmdc-ripple-upgraded):focus::before, .lmdc-ripple-surface--primary.lmdc-ripple-upgraded--background-focused::before {
    transition-duration: 75ms;
    opacity: 0.12; }
  .lmdc-ripple-surface--primary:not(.lmdc-ripple-upgraded)::after {
    transition: opacity 150ms linear; }
  .lmdc-ripple-surface--primary:not(.lmdc-ripple-upgraded):active::after {
    transition-duration: 75ms;
    opacity: 0.16; }
  .lmdc-ripple-surface--primary.lmdc-ripple-upgraded {
    --mdc-ripple-fg-opacity: $opacity; }
  .lmdc-ripple-surface--accent::before, .lmdc-ripple-surface--accent::after {
    /* @alternate */
    background-color: #018786; }
    @supports not (-ms-ime-align: auto) {
      .lmdc-ripple-surface--accent::before, .lmdc-ripple-surface--accent::after {
        background-color: var(--mdc-theme-secondary, #018786); } }
  .lmdc-ripple-surface--accent:hover::before {
    opacity: 0.04; }
  .lmdc-ripple-surface--accent:not(.lmdc-ripple-upgraded):focus::before, .lmdc-ripple-surface--accent.lmdc-ripple-upgraded--background-focused::before {
    transition-duration: 75ms;
    opacity: 0.12; }
  .lmdc-ripple-surface--accent:not(.lmdc-ripple-upgraded)::after {
    transition: opacity 150ms linear; }
  .lmdc-ripple-surface--accent:not(.lmdc-ripple-upgraded):active::after {
    transition-duration: 75ms;
    opacity: 0.16; }
  .lmdc-ripple-surface--accent.lmdc-ripple-upgraded {
    --mdc-ripple-fg-opacity: $opacity; }

/* TODO(sgomes): Figure out what to do about desktop font sizes. */
/* TODO(sgomes): Figure out what to do about i18n and i18n font sizes. */
/**
 * Creates a rule that will be applied when an MDC Web component is within the context of an RTL layout.
 *
 * Usage Example:
 * ```scss
 * .mdc-foo {
 *   position: absolute;
 *   left: 0;
 *
 *   @include mdc-rtl {
 *     left: auto;
 *     right: 0;
 *   }
 *
 *   &__bar {
 *     margin-left: 4px;
 *     @include mdc-rtl(".mdc-foo") {
 *       margin-left: auto;
 *       margin-right: 4px;
 *     }
 *   }
 * }
 *
 * .mdc-foo--mod {
 *   padding-left: 4px;
 *
 *   @include mdc-rtl {
 *     padding-left: auto;
 *     padding-right: 4px;
 *   }
 * }
 * ```
 *
 * Note that this works by checking for [dir="rtl"] on an ancestor element. While this will work
 * in most cases, it will in some cases lead to false negatives, e.g.
 *
 * ```html
 * <html dir="rtl">
 *   <!-- ... -->
 *   <div dir="ltr">
 *     <div class="mdc-foo">Styled incorrectly as RTL!</div>
 *   </div>
 * </html>
 * ```
 *
 * In the future, selectors such as :dir (http://mdn.io/:dir) will help us mitigate this.
 */
/**
 * Takes a base box-model property - e.g. margin / border / padding - along with a default
 * direction and value, and emits rules which apply the value to the
 * "<base-property>-<default-direction>" property by default, but flips the direction
 * when within an RTL context.
 *
 * For example:
 *
 * ```scss
 * .mdc-foo {
 *   @include mdc-rtl-reflexive-box(margin, left, 8px);
 * }
 * ```
 * is equivalent to:
 *
 * ```scss
 * .mdc-foo {
 *   margin-left: 8px;
 *
 *   @include mdc-rtl {
 *     margin-right: 8px;
 *     margin-left: 0;
 *   }
 * }
 * ```
 * whereas:
 *
 * ```scss
 * .mdc-foo {
 *   @include mdc-rtl-reflexive-box(margin, right, 8px);
 * }
 * ```
 * is equivalent to:
 *
 * ```scss
 * .mdc-foo {
 *   margin-right: 8px;
 *
 *   @include mdc-rtl {
 *     margin-right: 0;
 *     margin-left: 8px;
 *   }
 * }
 * ```
 *
 * You can also pass a 4th optional $root-selector argument which will be forwarded to `mdc-rtl`,
 * e.g. `@include mdc-rtl-reflexive-box(margin, left, 8px, ".mdc-component")`.
 *
 * Note that this function will always zero out the original value in an RTL context. If you're
 * trying to flip the values, use mdc-rtl-reflexive-property().
 */
/**
 * Takes a base property and emits rules that assign <base-property>-left to <left-value> and
 * <base-property>-right to <right-value> in a LTR context, and vice versa in a RTL context.
 * For example:
 *
 * ```scss
 * .mdc-foo {
 *   @include mdc-rtl-reflexive-property(margin, auto, 12px);
 * }
 * ```
 * is equivalent to:
 *
 * ```scss
 * .mdc-foo {
 *   margin-left: auto;
 *   margin-right: 12px;
 *
 *   @include mdc-rtl {
 *     margin-left: 12px;
 *     margin-right: auto;
 *   }
 * }
 * ```
 *
 * A 4th optional $root-selector argument can be given, which will be passed to `mdc-rtl`.
 */
/**
 * Takes an argument specifying a horizontal position property (either "left" or "right") as well
 * as a value, and applies that value to the specified position in a LTR context, and flips it in a
 * RTL context. For example:
 *
 * ```scss
 * .mdc-foo {
 *   @include mdc-rtl-reflexive-position(left, 0);
 *   position: absolute;
 * }
 * ```
 * is equivalent to:
 *
 * ```scss
 *  .mdc-foo {
 *    position: absolute;
 *    left: 0;
 *    right: initial;
 *
 *    @include mdc-rtl {
 *      right: 0;
 *      left: initial;
 *    }
 *  }
 * ```
 * An optional third $root-selector argument may also be given, which is passed to `mdc-rtl`.
 */
/**
 * Creates a rule that will be applied when an MDC Web component is within the context of an RTL layout.
 *
 * Usage Example:
 * ```scss
 * .mdc-foo {
 *   position: absolute;
 *   left: 0;
 *
 *   @include mdc-rtl {
 *     left: auto;
 *     right: 0;
 *   }
 *
 *   &__bar {
 *     margin-left: 4px;
 *     @include mdc-rtl(".mdc-foo") {
 *       margin-left: auto;
 *       margin-right: 4px;
 *     }
 *   }
 * }
 *
 * .mdc-foo--mod {
 *   padding-left: 4px;
 *
 *   @include mdc-rtl {
 *     padding-left: auto;
 *     padding-right: 4px;
 *   }
 * }
 * ```
 *
 * Note that this works by checking for [dir="rtl"] on an ancestor element. While this will work
 * in most cases, it will in some cases lead to false negatives, e.g.
 *
 * ```html
 * <html dir="rtl">
 *   <!-- ... -->
 *   <div dir="ltr">
 *     <div class="mdc-foo">Styled incorrectly as RTL!</div>
 *   </div>
 * </html>
 * ```
 *
 * In the future, selectors such as :dir (http://mdn.io/:dir) will help us mitigate this.
 */
/**
 * Takes a base box-model property - e.g. margin / border / padding - along with a default
 * direction and value, and emits rules which apply the value to the
 * "<base-property>-<default-direction>" property by default, but flips the direction
 * when within an RTL context.
 *
 * For example:
 *
 * ```scss
 * .mdc-foo {
 *   @include mdc-rtl-reflexive-box(margin, left, 8px);
 * }
 * ```
 * is equivalent to:
 *
 * ```scss
 * .mdc-foo {
 *   margin-left: 8px;
 *
 *   @include mdc-rtl {
 *     margin-right: 8px;
 *     margin-left: 0;
 *   }
 * }
 * ```
 * whereas:
 *
 * ```scss
 * .mdc-foo {
 *   @include mdc-rtl-reflexive-box(margin, right, 8px);
 * }
 * ```
 * is equivalent to:
 *
 * ```scss
 * .mdc-foo {
 *   margin-right: 8px;
 *
 *   @include mdc-rtl {
 *     margin-right: 0;
 *     margin-left: 8px;
 *   }
 * }
 * ```
 *
 * You can also pass a 4th optional $root-selector argument which will be forwarded to `mdc-rtl`,
 * e.g. `@include mdc-rtl-reflexive-box(margin, left, 8px, ".mdc-component")`.
 *
 * Note that this function will always zero out the original value in an RTL context. If you're
 * trying to flip the values, use mdc-rtl-reflexive-property().
 */
/**
 * Takes a base property and emits rules that assign <base-property>-left to <left-value> and
 * <base-property>-right to <right-value> in a LTR context, and vice versa in a RTL context.
 * For example:
 *
 * ```scss
 * .mdc-foo {
 *   @include mdc-rtl-reflexive-property(margin, auto, 12px);
 * }
 * ```
 * is equivalent to:
 *
 * ```scss
 * .mdc-foo {
 *   margin-left: auto;
 *   margin-right: 12px;
 *
 *   @include mdc-rtl {
 *     margin-left: 12px;
 *     margin-right: auto;
 *   }
 * }
 * ```
 *
 * A 4th optional $root-selector argument can be given, which will be passed to `mdc-rtl`.
 */
/**
 * Takes an argument specifying a horizontal position property (either "left" or "right") as well
 * as a value, and applies that value to the specified position in a LTR context, and flips it in a
 * RTL context. For example:
 *
 * ```scss
 * .mdc-foo {
 *   @include mdc-rtl-reflexive-position(left, 0);
 *   position: absolute;
 * }
 * ```
 * is equivalent to:
 *
 * ```scss
 *  .mdc-foo {
 *    position: absolute;
 *    left: 0;
 *    right: initial;
 *
 *    @include mdc-rtl {
 *      right: 0;
 *      left: initial;
 *    }
 *  }
 * ```
 * An optional third $root-selector argument may also be given, which is passed to `mdc-rtl`.
 */
.lmdc-select__label {
  left: 0;
  right: initial;
  position: absolute;
  bottom: 8px;
  left: 0;
  -webkit-transform-origin: left top;
          transform-origin: left top;
  transition: -webkit-transform 180ms cubic-bezier(0.4, 0, 0.2, 1);
  transition: transform 180ms cubic-bezier(0.4, 0, 0.2, 1);
  transition: transform 180ms cubic-bezier(0.4, 0, 0.2, 1), -webkit-transform 180ms cubic-bezier(0.4, 0, 0.2, 1);
  pointer-events: none;
  will-change: transform; }
  [dir="rtl"] .lmdc-select__label, .lmdc-select__label[dir="rtl"] {
    left: initial;
    right: 0; }
  .lmdc-select[dir="rtl"] .lmdc-select__label,
  [dir="rtl"] .lmdc-select .lmdc-select__label {
    -webkit-transform-origin: right top;
            transform-origin: right top; }
  .lmdc-select__label--float-above {
    -webkit-transform: translateY(-100%) scale(0.75);
            transform: translateY(-100%) scale(0.75); }

.lmdc-select__bottom-line {
  position: absolute;
  bottom: 0;
  left: 0;
  width: 100%;
  height: 1px;
  -webkit-transform: scaleY(1);
          transform: scaleY(1);
  -webkit-transform-origin: bottom;
          transform-origin: bottom;
  transition: -webkit-transform 180ms cubic-bezier(0.4, 0, 0.2, 1);
  transition: transform 180ms cubic-bezier(0.4, 0, 0.2, 1);
  transition: transform 180ms cubic-bezier(0.4, 0, 0.2, 1), -webkit-transform 180ms cubic-bezier(0.4, 0, 0.2, 1); }
  .lmdc-select__bottom-line::after {
    position: absolute;
    bottom: 0;
    left: 0;
    width: 100%;
    height: 1px;
    -webkit-transform: scaleX(0);
            transform: scaleX(0);
    transition: -webkit-transform 180ms cubic-bezier(0.4, 0, 0.2, 1);
    transition: transform 180ms cubic-bezier(0.4, 0, 0.2, 1);
    transition: transform 180ms cubic-bezier(0.4, 0, 0.2, 1), -webkit-transform 180ms cubic-bezier(0.4, 0, 0.2, 1);
    opacity: 0;
    content: "";
    z-index: 2; }

.lmdc-select__bottom-line--active::after {
  opacity: 1; }

.lmdc-select {
  font-family: Roboto, sans-serif;
  -moz-osx-font-smoothing: grayscale;
  -webkit-font-smoothing: antialiased;
  letter-spacing: 0.04em;
  background-image: url(data:image/svg+xml,%3Csvg%20width%3D%2210px%22%20height%3D%225px%22%20viewBox%3D%227%2010%2010%205%22%20version%3D%221.1%22%20xmlns%3D%22http%3A%2F%2Fwww.w3.org%2F2000%2Fsvg%22%20xmlns%3Axlink%3D%22http%3A%2F%2Fwww.w3.org%2F1999%2Fxlink%22%3E%0A%20%20%20%20%3Cpolygon%20id%3D%22Shape%22%20stroke%3D%22none%22%20fill%3D%22%230%22%20fill-rule%3D%22evenodd%22%20opacity%3D%220.54%22%20points%3D%227%2010%2012%2015%2017%2010%22%3E%3C%2Fpolygon%3E%0A%3C%2Fsvg%3E);
  display: inline-flex;
  position: relative;
  align-items: center;
  justify-content: flex-start;
  box-sizing: border-box;
  height: 48px;
  border: none;
  outline: none;
  background-repeat: no-repeat;
  background-position: right 8px bottom 8px;
  cursor: pointer;
  overflow: visible; }
  .lmdc-select:not(.lmdc-select--disabled) .lmdc-select__surface,
  .lmdc-select:not(.lmdc-select--disabled) .lmdc-select__selected-text {
    /* @alternate */
    color: rgba(0, 0, 0, 0.87);
    color: var(--mdc-theme-text-primary-on-light, rgba(0, 0, 0, 0.87)); }
  .lmdc-select:not(.lmdc-select--disabled) .lmdc-select__label {
    color: rgba(0, 0, 0, 0.6); }
  .lmdc-select:not(.lmdc-select--disabled) .lmdc-select__bottom-line {
    background-color: rgba(0, 0, 0, 0.5); }
  .lmdc-select:not(.lmdc-select--disabled) .lmdc-select__surface:focus .lmdc-select__bottom-line {
    /* @alternate */
    background-color: #6200ee;
    background-color: var(--mdc-theme-primary, #6200ee); }
  .lmdc-select:not(.lmdc-select--disabled).lmdc-select--open .lmdc-select__bottom-line {
    /* @alternate */
    background-color: #6200ee;
    background-color: var(--mdc-theme-primary, #6200ee); }
  .lmdc-select:not(.lmdc-select--disabled) .lmdc-select__bottom-line::after {
    /* @alternate */
    background-color: #6200ee;
    background-color: var(--mdc-theme-primary, #6200ee); }
  .lmdc-select:not(.lmdc-select--disabled) .lmdc-select__surface:focus .lmdc-select__label, .lmdc-select:not(.lmdc-select--disabled).lmdc-select--open .lmdc-select__label {
    color: rgba(98, 0, 238, 0.87); }
  [dir="rtl"] .lmdc-select, .lmdc-select[dir="rtl"] {
    background-position: left 8px bottom 8px; }
  .lmdc-select__menu {
    position: fixed;
    top: 0;
    left: 0;
    max-height: 100%;
    -webkit-transform-origin: center center;
            transform-origin: center center;
    z-index: 4; }
  .lmdc-select__surface {
    padding-left: 0;
    padding-right: 26px;
    display: flex;
    position: relative;
    flex-grow: 1;
    width: 100%;
    height: 48px;
    padding-bottom: 8px;
    border: none;
    outline: none;
    overflow: hidden; }
    [dir="rtl"] .lmdc-select__surface, .lmdc-select__surface[dir="rtl"] {
      padding-left: 26px;
      padding-right: 0; }
    .lmdc-select__surface::before, .lmdc-select__surface::after {
      background-color: black; }
    .lmdc-select__surface:hover::before {
      opacity: 0.04; }
    .lmdc-select__surface:not(.lmdc-ripple-upgraded):focus::before, .lmdc-select__surface.lmdc-ripple-upgraded--background-focused::before {
      transition-duration: 75ms;
      opacity: 0.12; }
    .lmdc-select__surface:not(.lmdc-ripple-upgraded)::after {
      transition: opacity 150ms linear; }
    .lmdc-select__surface:not(.lmdc-ripple-upgraded):active::after {
      transition-duration: 75ms;
      opacity: 0.16; }
    .lmdc-select__surface.lmdc-ripple-upgraded {
      --mdc-ripple-fg-opacity: $opacity; }
  .lmdc-select__selected-text {
    display: flex;
    position: absolute;
    bottom: 8px;
    align-items: flex-end;
    transition: opacity 125ms 0ms cubic-bezier(0.4, 0, 0.6, 1), -webkit-transform 125ms 0ms cubic-bezier(0.4, 0, 0.6, 1);
    transition: opacity 125ms 0ms cubic-bezier(0.4, 0, 0.6, 1), transform 125ms 0ms cubic-bezier(0.4, 0, 0.6, 1);
    transition: opacity 125ms 0ms cubic-bezier(0.4, 0, 0.6, 1), transform 125ms 0ms cubic-bezier(0.4, 0, 0.6, 1), -webkit-transform 125ms 0ms cubic-bezier(0.4, 0, 0.6, 1);
    white-space: nowrap;
    overflow: hidden; }
  .lmdc-select .lmdc-select__surface:focus .lmdc-select__bottom-line::after {
    -webkit-transform: scale(1, 2);
            transform: scale(1, 2);
    opacity: 1; }

.lmdc-select--box {
  height: 56px;
  border-radius: 4px 4px 0 0;
  background-position: right 10px center; }
  .lmdc-select--box:not(.lmdc-select--disabled) .lmdc-select__surface {
    background-color: rgba(0, 0, 0, 0.04); }
  [dir="rtl"] .lmdc-select--box, .lmdc-select--box[dir="rtl"] {
    background-position: left 10px center; }
  .lmdc-select--box .lmdc-select__surface {
    font-family: Roboto, sans-serif;
    -moz-osx-font-smoothing: grayscale;
    -webkit-font-smoothing: antialiased;
    font-size: 1rem;
    line-height: 1.75rem;
    font-weight: 400;
    letter-spacing: 0.04em;
    text-decoration: inherit;
    text-transform: inherit;
    padding-left: 16px;
    padding-right: 26px;
    --mdc-ripple-fg-size: 0;
    --mdc-ripple-left: 0;
    --mdc-ripple-top: 0;
    --mdc-ripple-fg-scale: 1;
    --mdc-ripple-fg-translate-end: 0;
    --mdc-ripple-fg-translate-start: 0;
    -webkit-tap-highlight-color: rgba(0, 0, 0, 0);
    will-change: transform, opacity;
    height: 56px;
    padding-bottom: 0;
    border-radius: 4px 4px 0 0; }
    [dir="rtl"] .lmdc-select--box .lmdc-select__surface, .lmdc-select--box .lmdc-select__surface[dir="rtl"] {
      padding-left: 26px;
      padding-right: 16px; }
    .lmdc-select--box .lmdc-select__surface::before, .lmdc-select--box .lmdc-select__surface::after {
      position: absolute;
      border-radius: 50%;
      opacity: 0;
      pointer-events: none;
      content: ""; }
    .lmdc-select--box .lmdc-select__surface::before {
      transition: opacity 15ms linear;
      z-index: 1; }
    .lmdc-select--box .lmdc-select__surface.lmdc-ripple-upgraded::before {
      -webkit-transform: scale(var(--mdc-ripple-fg-scale, 1));
              transform: scale(var(--mdc-ripple-fg-scale, 1)); }
    .lmdc-select--box .lmdc-select__surface.lmdc-ripple-upgraded::after {
      top: 0;
      left: 0;
      -webkit-transform: scale(0);
              transform: scale(0);
      -webkit-transform-origin: center center;
              transform-origin: center center; }
    .lmdc-select--box .lmdc-select__surface.lmdc-ripple-upgraded--unbounded::after {
      top: var(--mdc-ripple-top, 0);
      left: var(--mdc-ripple-left, 0); }
    .lmdc-select--box .lmdc-select__surface.lmdc-ripple-upgraded--foreground-activation::after {
      -webkit-animation: 225ms mdc-ripple-fg-radius-in forwards, 75ms mdc-ripple-fg-opacity-in forwards;
              animation: 225ms mdc-ripple-fg-radius-in forwards, 75ms mdc-ripple-fg-opacity-in forwards; }
    .lmdc-select--box .lmdc-select__surface.lmdc-ripple-upgraded--foreground-deactivation::after {
      -webkit-animation: 150ms mdc-ripple-fg-opacity-out;
              animation: 150ms mdc-ripple-fg-opacity-out;
      -webkit-transform: translate(var(--mdc-ripple-fg-translate-end, 0)) scale(var(--mdc-ripple-fg-scale, 1));
              transform: translate(var(--mdc-ripple-fg-translate-end, 0)) scale(var(--mdc-ripple-fg-scale, 1)); }
    .lmdc-select--box .lmdc-select__surface::before, .lmdc-select--box .lmdc-select__surface::after {
      top: calc(50% - 100%);
      left: calc(50% - 100%);
      width: 200%;
      height: 200%; }
    .lmdc-select--box .lmdc-select__surface.lmdc-ripple-upgraded::after {
      width: var(--mdc-ripple-fg-size, 100%);
      height: var(--mdc-ripple-fg-size, 100%); }
  .lmdc-select--box .lmdc-select__label {
    left: 16px;
    right: initial;
    bottom: 12px; }
    [dir="rtl"] .lmdc-select--box .lmdc-select__label, .lmdc-select--box .lmdc-select__label[dir="rtl"] {
      left: initial;
      right: 16px; }
    .lmdc-select--box .lmdc-select__label--float-above {
      -webkit-transform: translateY(-40%) scale(0.75, 0.75);
              transform: translateY(-40%) scale(0.75, 0.75); }
  .lmdc-select--box .lmdc-select__selected-text {
    position: inherit;
    bottom: 0;
    margin-bottom: 6px; }

.lmdc-select--open .lmdc-select__surface::before {
  opacity: 0.12; }

.lmdc-select--open .lmdc-select__selected-text {
  -webkit-transform: translateY(8px);
          transform: translateY(8px);
  transition: opacity 125ms 125ms cubic-bezier(0, 0, 0.2, 1), -webkit-transform 125ms 125ms cubic-bezier(0, 0, 0.2, 1);
  transition: opacity 125ms 125ms cubic-bezier(0, 0, 0.2, 1), transform 125ms 125ms cubic-bezier(0, 0, 0.2, 1);
  transition: opacity 125ms 125ms cubic-bezier(0, 0, 0.2, 1), transform 125ms 125ms cubic-bezier(0, 0, 0.2, 1), -webkit-transform 125ms 125ms cubic-bezier(0, 0, 0.2, 1);
  opacity: 0; }

.lmdc-select--open .lmdc-select__bottom-line::after {
  -webkit-transform: scaleY(2);
          transform: scaleY(2);
  opacity: 1; }

.lmdc-select--disabled {
  background-image: url(data:image/svg+xml,%3Csvg%20width%3D%2210px%22%20height%3D%225px%22%20viewBox%3D%227%2010%2010%205%22%20version%3D%221.1%22%20xmlns%3D%22http%3A%2F%2Fwww.w3.org%2F2000%2Fsvg%22%20xmlns%3Axlink%3D%22http%3A%2F%2Fwww.w3.org%2F1999%2Fxlink%22%3E%0A%20%20%20%20%3Cpolygon%20id%3D%22Shape%22%20stroke%3D%22none%22%20fill%3D%22%230%22%20fill-rule%3D%22evenodd%22%20opacity%3D%220.38%22%20points%3D%227%2010%2012%2015%2017%2010%22%3E%3C%2Fpolygon%3E%0A%3C%2Fsvg%3E);
  border-bottom-width: 1px;
  border-bottom-style: dotted;
  opacity: .38;
  cursor: default;
  pointer-events: none;
  -webkit-user-select: none;
     -moz-user-select: none;
      -ms-user-select: none;
          user-select: none; }
  .lmdc-select--disabled .lmdc-select__label {
    color: black; }
  .lmdc-select--disabled .lmdc-select__bottom-line {
    display: none; }

.lmdc-select-scroll-lock {
  overflow: hidden; }

/**
 * Creates a rule that will be applied when an MDC Web component is within the context of an RTL layout.
 *
 * Usage Example:
 * ```scss
 * .mdc-foo {
 *   position: absolute;
 *   left: 0;
 *
 *   @include mdc-rtl {
 *     left: auto;
 *     right: 0;
 *   }
 *
 *   &__bar {
 *     margin-left: 4px;
 *     @include mdc-rtl(".mdc-foo") {
 *       margin-left: auto;
 *       margin-right: 4px;
 *     }
 *   }
 * }
 *
 * .mdc-foo--mod {
 *   padding-left: 4px;
 *
 *   @include mdc-rtl {
 *     padding-left: auto;
 *     padding-right: 4px;
 *   }
 * }
 * ```
 *
 * Note that this works by checking for [dir="rtl"] on an ancestor element. While this will work
 * in most cases, it will in some cases lead to false negatives, e.g.
 *
 * ```html
 * <html dir="rtl">
 *   <!-- ... -->
 *   <div dir="ltr">
 *     <div class="mdc-foo">Styled incorrectly as RTL!</div>
 *   </div>
 * </html>
 * ```
 *
 * In the future, selectors such as :dir (http://mdn.io/:dir) will help us mitigate this.
 */
/**
 * Takes a base box-model property - e.g. margin / border / padding - along with a default
 * direction and value, and emits rules which apply the value to the
 * "<base-property>-<default-direction>" property by default, but flips the direction
 * when within an RTL context.
 *
 * For example:
 *
 * ```scss
 * .mdc-foo {
 *   @include mdc-rtl-reflexive-box(margin, left, 8px);
 * }
 * ```
 * is equivalent to:
 *
 * ```scss
 * .mdc-foo {
 *   margin-left: 8px;
 *
 *   @include mdc-rtl {
 *     margin-right: 8px;
 *     margin-left: 0;
 *   }
 * }
 * ```
 * whereas:
 *
 * ```scss
 * .mdc-foo {
 *   @include mdc-rtl-reflexive-box(margin, right, 8px);
 * }
 * ```
 * is equivalent to:
 *
 * ```scss
 * .mdc-foo {
 *   margin-right: 8px;
 *
 *   @include mdc-rtl {
 *     margin-right: 0;
 *     margin-left: 8px;
 *   }
 * }
 * ```
 *
 * You can also pass a 4th optional $root-selector argument which will be forwarded to `mdc-rtl`,
 * e.g. `@include mdc-rtl-reflexive-box(margin, left, 8px, ".mdc-component")`.
 *
 * Note that this function will always zero out the original value in an RTL context. If you're
 * trying to flip the values, use mdc-rtl-reflexive-property().
 */
/**
 * Takes a base property and emits rules that assign <base-property>-left to <left-value> and
 * <base-property>-right to <right-value> in a LTR context, and vice versa in a RTL context.
 * For example:
 *
 * ```scss
 * .mdc-foo {
 *   @include mdc-rtl-reflexive-property(margin, auto, 12px);
 * }
 * ```
 * is equivalent to:
 *
 * ```scss
 * .mdc-foo {
 *   margin-left: auto;
 *   margin-right: 12px;
 *
 *   @include mdc-rtl {
 *     margin-left: 12px;
 *     margin-right: auto;
 *   }
 * }
 * ```
 *
 * A 4th optional $root-selector argument can be given, which will be passed to `mdc-rtl`.
 */
/**
 * Takes an argument specifying a horizontal position property (either "left" or "right") as well
 * as a value, and applies that value to the specified position in a LTR context, and flips it in a
 * RTL context. For example:
 *
 * ```scss
 * .mdc-foo {
 *   @include mdc-rtl-reflexive-position(left, 0);
 *   position: absolute;
 * }
 * ```
 * is equivalent to:
 *
 * ```scss
 *  .mdc-foo {
 *    position: absolute;
 *    left: 0;
 *    right: initial;
 *
 *    @include mdc-rtl {
 *      right: 0;
 *      left: initial;
 *    }
 *  }
 * ```
 * An optional third $root-selector argument may also be given, which is passed to `mdc-rtl`.
 */
/* TODO(sgomes): Figure out what to do about desktop font sizes. */
/* TODO(sgomes): Figure out what to do about i18n and i18n font sizes. */
/* postcss-bem-linter: define snackbar */
.lmdc-snackbar {
  display: flex;
  position: fixed;
  bottom: 0;
  left: 50%;
  align-items: center;
  justify-content: flex-start;
  box-sizing: border-box;
  padding-right: 24px;
  padding-left: 24px;
  -webkit-transform: translate(-50%, 100%);
          transform: translate(-50%, 100%);
  transition: -webkit-transform 0.25s 0ms cubic-bezier(0.4, 0, 1, 1);
  transition: transform 0.25s 0ms cubic-bezier(0.4, 0, 1, 1);
  transition: transform 0.25s 0ms cubic-bezier(0.4, 0, 1, 1), -webkit-transform 0.25s 0ms cubic-bezier(0.4, 0, 1, 1);
  background-color: #323232;
  pointer-events: none;
  will-change: transform; }
  @media (max-width: 599px) {
    .lmdc-snackbar {
      left: 0;
      width: 100%;
      -webkit-transform: translate(0, 100%);
              transform: translate(0, 100%); } }
  @media (min-width: 600px) {
    .lmdc-snackbar {
      min-width: 288px;
      max-width: 568px;
      border-radius: 2px; } }

@media (min-width: 600px) {
  .lmdc-snackbar--align-start {
    left: 24px;
    right: initial;
    bottom: 24px;
    -webkit-transform: translate(0, 200%);
            transform: translate(0, 200%); }
    [dir="rtl"] .lmdc-snackbar--align-start, .lmdc-snackbar--align-start[dir="rtl"] {
      left: initial;
      right: 24px; } }

@media (max-width: 599px) {
  .lmdc-snackbar--align-start {
    bottom: 0;
    left: 0;
    width: 100%;
    -webkit-transform: translate(0, 100%);
            transform: translate(0, 100%); } }

.lmdc-snackbar--active {
  -webkit-transform: translate(0);
          transform: translate(0);
  transition: -webkit-transform 0.25s 0ms cubic-bezier(0, 0, 0.2, 1);
  transition: transform 0.25s 0ms cubic-bezier(0, 0, 0.2, 1);
  transition: transform 0.25s 0ms cubic-bezier(0, 0, 0.2, 1), -webkit-transform 0.25s 0ms cubic-bezier(0, 0, 0.2, 1);
  pointer-events: auto; }
  .lmdc-snackbar--active:not(.lmdc-snackbar--align-start) {
    -webkit-transform: translate(-50%, 0);
            transform: translate(-50%, 0); }
    @media (max-width: 599px) {
      .lmdc-snackbar--active:not(.lmdc-snackbar--align-start) {
        bottom: 0;
        left: 0;
        width: 100%;
        -webkit-transform: translate(0);
                transform: translate(0); } }

.lmdc-snackbar__action-wrapper {
  padding-left: 24px;
  padding-right: 0; }
  [dir="rtl"] .lmdc-snackbar__action-wrapper, .lmdc-snackbar__action-wrapper[dir="rtl"] {
    padding-left: 0;
    padding-right: 24px; }

.lmdc-snackbar--action-on-bottom {
  flex-direction: column; }

.lmdc-snackbar__text {
  font-family: Roboto, sans-serif;
  -moz-osx-font-smoothing: grayscale;
  -webkit-font-smoothing: antialiased;
  font-size: 0.875rem;
  line-height: 1.25rem;
  font-weight: 400;
  letter-spacing: 0.04em;
  text-decoration: inherit;
  text-transform: inherit;
  margin-left: 0;
  margin-right: auto;
  display: flex;
  align-items: center;
  height: 48px;
  transition: opacity 0.3s 0ms cubic-bezier(0.4, 0, 1, 1);
  opacity: 0;
  color: white; }
  .lmdc-snackbar[dir="rtl"] .lmdc-snackbar__text,
  [dir="rtl"] .lmdc-snackbar .lmdc-snackbar__text {
    margin-left: auto;
    margin-right: 0; }
  @media (min-width: 600px) {
    .lmdc-snackbar__text {
      padding-left: 0;
      padding-right: 24px; }
      [dir="rtl"] .lmdc-snackbar__text, .lmdc-snackbar__text[dir="rtl"] {
        padding-left: 24px;
        padding-right: 0; } }

.lmdc-snackbar--action-on-bottom .lmdc-snackbar__text {
  margin-right: inherit; }

.lmdc-snackbar--action-on-bottom .lmdc-snackbar__action-wrapper {
  margin-left: auto;
  margin-right: 0;
  flex-direction: column;
  justify-content: flex-start;
  margin-top: -12px;
  margin-bottom: 8px; }
  [dir="rtl"] .lmdc-snackbar--action-on-bottom .lmdc-snackbar__action-wrapper, .lmdc-snackbar--action-on-bottom .lmdc-snackbar__action-wrapper[dir="rtl"] {
    margin-left: 0;
    margin-right: auto; }

.lmdc-snackbar--multiline .lmdc-snackbar__text {
  height: 80px; }

.lmdc-snackbar__action-button {
  font-family: Roboto, sans-serif;
  -moz-osx-font-smoothing: grayscale;
  -webkit-font-smoothing: antialiased;
  font-size: 0.875rem;
  line-height: 2.25rem;
  font-weight: 500;
  letter-spacing: 0.04em;
  text-decoration: none;
  text-transform: uppercase;
  /* @alternate */
  color: #018786;
  color: var(--mdc-theme-secondary, #018786);
  padding: 0;
  transition: opacity 0.3s 0ms cubic-bezier(0.4, 0, 1, 1);
  border: none;
  outline: none;
  background-color: transparent;
  opacity: 0;
  -webkit-user-select: none;
     -moz-user-select: none;
      -ms-user-select: none;
          user-select: none;
  -webkit-appearance: none;
  visibility: hidden; }
  .lmdc-snackbar__action-button::-moz-focus-inner {
    border: 0; }
  .lmdc-snackbar__action-button:hover {
    cursor: pointer; }
  .lmdc-snackbar__action-button:not([aria-hidden]) {
    visibility: inherit; }

.lmdc-snackbar--active .lmdc-snackbar__text,
.lmdc-snackbar--active .lmdc-snackbar__action-button:not([aria-hidden]) {
  transition: opacity 0.3s 0ms cubic-bezier(0.4, 0, 1, 1);
  opacity: 1; }

/* stylelint-disable plugin/selector-bem-pattern */
.lmdc-snackbar--multiline.lmdc-snackbar--action-on-bottom .lmdc-snackbar__text {
  margin: 0; }

/* stylelint-enable plugin/selector-bem-pattern */
/* postcss-bem-linter: end */
/**
 * The css property used for elevation. In most cases this should not be changed. It is exposed
 * as a variable for abstraction / easy use when needing to reference the property directly, for
 * example in a `will-change` rule.
 */
/**
 * The default duration value for elevation transitions.
 */
/**
 * The default easing value for elevation transitions.
 */
/**
 * Applies the correct CSS rules to an element to give it the elevation specified by $z-value.
 * The $z-value must be between 0 and 24.
 * If $color has an alpha channel, it will be ignored and overridden. To increase the opacity of the shadow, use
 * $opacity-boost.
 */
/**
 * Returns a string that can be used as the value for a `transition` property for elevation.
 * Calling this function directly is useful in situations where a component needs to transition
 * more than one property.
 *
 * ```scss
 * .foo {
 *   transition: mdc-elevation-transition-value(), opacity 100ms ease;
 *   will-change: $mdc-elevation-property, opacity;
 * }
 * ```
 */
.lmdc-switch {
  display: inline-block;
  position: relative; }
  .lmdc-switch__native-control {
    position: absolute;
    top: -14px;
    left: -14px;
    width: 48px;
    height: 48px;
    display: inline-block;
    margin-top: -3px;
    transition: -webkit-transform 90ms cubic-bezier(0.4, 0, 0.2, 1);
    transition: transform 90ms cubic-bezier(0.4, 0, 0.2, 1);
    transition: transform 90ms cubic-bezier(0.4, 0, 0.2, 1), -webkit-transform 90ms cubic-bezier(0.4, 0, 0.2, 1);
    opacity: 0;
    cursor: pointer;
    z-index: 2; }
    .lmdc-switch__native-control:checked {
      -webkit-transform: translateX(14px);
              transform: translateX(14px); }

.lmdc-switch__native-control:enabled:not(:checked) ~ .lmdc-switch__background::before {
  background-color: #000; }

.lmdc-switch__native-control:enabled:not(:checked) ~ .lmdc-switch__background .lmdc-switch__knob {
  background-color: #fafafa; }

.lmdc-switch__native-control:enabled:not(:checked) ~ .lmdc-switch__background .lmdc-switch__knob::before {
  background-color: #9e9e9e; }

.lmdc-switch__native-control:enabled:checked ~ .lmdc-switch__background::before {
  /* @alternate */
  background-color: #018786;
  background-color: var(--mdc-theme-secondary, #018786); }

.lmdc-switch__native-control:enabled:checked ~ .lmdc-switch__background .lmdc-switch__knob {
  /* @alternate */
  background-color: #018786;
  background-color: var(--mdc-theme-secondary, #018786); }

.lmdc-switch__native-control:enabled:checked ~ .lmdc-switch__background .lmdc-switch__knob::before {
  /* @alternate */
  background-color: #018786;
  background-color: var(--mdc-theme-secondary, #018786); }

.lmdc-switch__background {
  display: block;
  position: relative;
  width: 34px;
  height: 14px;
  border-radius: 50%;
  outline: none;
  -webkit-user-select: none;
     -moz-user-select: none;
      -ms-user-select: none;
          user-select: none; }
  .lmdc-switch__background::before {
    display: block;
    position: absolute;
    top: 0;
    right: 0;
    bottom: 0;
    left: 0;
    transition: opacity 90ms cubic-bezier(0.4, 0, 0.2, 1), background-color 90ms cubic-bezier(0.4, 0, 0.2, 1);
    border-radius: 7px;
    opacity: .38;
    content: ""; }

.lmdc-switch__knob {
  box-shadow: 0px 3px 1px -2px rgba(0, 0, 0, 0.2), 0px 2px 2px 0px rgba(0, 0, 0, 0.14), 0px 1px 5px 0px rgba(0, 0, 0, 0.12);
  display: block;
  position: absolute;
  top: -3px;
  left: 0;
  width: 20px;
  height: 20px;
  -webkit-transform: translateX(0);
          transform: translateX(0);
  transition: background-color 90ms cubic-bezier(0.4, 0, 0.2, 1), -webkit-transform 90ms cubic-bezier(0.4, 0, 0.2, 1);
  transition: transform 90ms cubic-bezier(0.4, 0, 0.2, 1), background-color 90ms cubic-bezier(0.4, 0, 0.2, 1);
  transition: transform 90ms cubic-bezier(0.4, 0, 0.2, 1), background-color 90ms cubic-bezier(0.4, 0, 0.2, 1), -webkit-transform 90ms cubic-bezier(0.4, 0, 0.2, 1);
  border-radius: 50%;
  z-index: 1; }
  .lmdc-switch__knob::before {
    position: absolute;
    top: -14px;
    left: -14px;
    width: 48px;
    height: 48px;
    -webkit-transform: scale(0);
            transform: scale(0);
    transition: background-color 90ms cubic-bezier(0.4, 0, 0.2, 1), -webkit-transform 90ms cubic-bezier(0.4, 0, 0.2, 1);
    transition: transform 90ms cubic-bezier(0.4, 0, 0.2, 1), background-color 90ms cubic-bezier(0.4, 0, 0.2, 1);
    transition: transform 90ms cubic-bezier(0.4, 0, 0.2, 1), background-color 90ms cubic-bezier(0.4, 0, 0.2, 1), -webkit-transform 90ms cubic-bezier(0.4, 0, 0.2, 1);
    border-radius: 50%;
    opacity: .2;
    content: ""; }

.lmdc-switch__native-control:focus ~ .lmdc-switch__background .lmdc-switch__knob::before {
  -webkit-transform: scale(1);
          transform: scale(1); }

.lmdc-switch__native-control:checked ~ .lmdc-switch__background::before {
  opacity: .5; }

.lmdc-switch__native-control:checked ~ .lmdc-switch__background .lmdc-switch__knob {
  -webkit-transform: translateX(14px);
          transform: translateX(14px); }
  .lmdc-switch__native-control:checked ~ .lmdc-switch__background .lmdc-switch__knob::before {
    opacity: .15; }

.lmdc-switch__native-control:disabled {
  cursor: initial; }

.lmdc-switch__native-control:disabled ~ .lmdc-switch__background::before {
  background-color: #000;
  opacity: .12; }

.lmdc-switch__native-control:disabled ~ .lmdc-switch__background .lmdc-switch__knob {
  background-color: #bdbdbd; }

/* TODO(sgomes): Figure out what to do about desktop font sizes. */
/* TODO(sgomes): Figure out what to do about i18n and i18n font sizes. */
.lmdc-tab {
  font-family: Roboto, sans-serif;
  -moz-osx-font-smoothing: grayscale;
  -webkit-font-smoothing: antialiased;
  font-size: 0.875rem;
  line-height: 1.5rem;
  font-weight: 500;
  letter-spacing: 0.04em;
  text-decoration: inherit;
  text-transform: inherit;
  /* @alternate */
  color: rgba(0, 0, 0, 0.54);
  color: var(--mdc-theme-text-secondary-on-background, rgba(0, 0, 0, 0.54));
  --mdc-ripple-fg-size: 0;
  --mdc-ripple-left: 0;
  --mdc-ripple-top: 0;
  --mdc-ripple-fg-scale: 1;
  --mdc-ripple-fg-translate-end: 0;
  --mdc-ripple-fg-translate-start: 0;
  -webkit-tap-highlight-color: rgba(0, 0, 0, 0);
  will-change: transform, opacity;
  display: table-cell;
  position: relative;
  box-sizing: border-box;
  min-width: 160px;
  min-height: 48px;
  padding: 0 24px;
  text-align: center;
  text-decoration: none;
  white-space: nowrap;
  cursor: pointer;
  overflow: hidden;
  vertical-align: middle; }
  .lmdc-tab .lmdc-tab__icon {
    /* @alternate */
    color: rgba(0, 0, 0, 0.54);
    color: var(--mdc-theme-text-secondary-on-background, rgba(0, 0, 0, 0.54)); }
  .lmdc-tab::before, .lmdc-tab::after {
    position: absolute;
    border-radius: 50%;
    opacity: 0;
    pointer-events: none;
    content: ""; }
  .lmdc-tab::before {
    transition: opacity 15ms linear;
    z-index: 1; }
  .lmdc-tab.lmdc-ripple-upgraded::before {
    -webkit-transform: scale(var(--mdc-ripple-fg-scale, 1));
            transform: scale(var(--mdc-ripple-fg-scale, 1)); }
  .lmdc-tab.lmdc-ripple-upgraded::after {
    top: 0;
    left: 0;
    -webkit-transform: scale(0);
            transform: scale(0);
    -webkit-transform-origin: center center;
            transform-origin: center center; }
  .lmdc-tab.lmdc-ripple-upgraded--unbounded::after {
    top: var(--mdc-ripple-top, 0);
    left: var(--mdc-ripple-left, 0); }
  .lmdc-tab.lmdc-ripple-upgraded--foreground-activation::after {
    -webkit-animation: 225ms mdc-ripple-fg-radius-in forwards, 75ms mdc-ripple-fg-opacity-in forwards;
            animation: 225ms mdc-ripple-fg-radius-in forwards, 75ms mdc-ripple-fg-opacity-in forwards; }
  .lmdc-tab.lmdc-ripple-upgraded--foreground-deactivation::after {
    -webkit-animation: 150ms mdc-ripple-fg-opacity-out;
            animation: 150ms mdc-ripple-fg-opacity-out;
    -webkit-transform: translate(var(--mdc-ripple-fg-translate-end, 0)) scale(var(--mdc-ripple-fg-scale, 1));
            transform: translate(var(--mdc-ripple-fg-translate-end, 0)) scale(var(--mdc-ripple-fg-scale, 1)); }
  .lmdc-tab::before, .lmdc-tab::after {
    background-color: black; }
  .lmdc-tab:hover::before {
    opacity: 0.04; }
  .lmdc-tab:not(.lmdc-ripple-upgraded):focus::before, .lmdc-tab.lmdc-ripple-upgraded--background-focused::before {
    transition-duration: 75ms;
    opacity: 0.12; }
  .lmdc-tab:not(.lmdc-ripple-upgraded)::after {
    transition: opacity 150ms linear; }
  .lmdc-tab:not(.lmdc-ripple-upgraded):active::after {
    transition-duration: 75ms;
    opacity: 0.16; }
  .lmdc-tab.lmdc-ripple-upgraded {
    --mdc-ripple-fg-opacity: $opacity; }
  .lmdc-tab::before, .lmdc-tab::after {
    top: calc(50% - 100%);
    left: calc(50% - 100%);
    width: 200%;
    height: 200%; }
  .lmdc-tab.lmdc-ripple-upgraded::after {
    width: var(--mdc-ripple-fg-size, 100%);
    height: var(--mdc-ripple-fg-size, 100%); }
  .lmdc-tab:hover {
    /* @alternate */
    color: rgba(0, 0, 0, 0.87);
    color: var(--mdc-theme-text-primary-on-background, rgba(0, 0, 0, 0.87)); }
    .lmdc-tab:hover .lmdc-tab__icon {
      /* @alternate */
      color: rgba(0, 0, 0, 0.87);
      color: var(--mdc-theme-text-primary-on-background, rgba(0, 0, 0, 0.87)); }
  .lmdc-tab:focus {
    outline: none; }
  @media screen and (max-width: 600px) {
    .lmdc-tab {
      min-width: 72px;
      padding: 0 12px; } }
  .lmdc-tab__icon, .lmdc-tab .lmdc-tab__icon {
    display: block;
    margin: 0 auto;
    width: 24px;
    height: 24px; }
    .lmdc-tab-bar--icons-with-text .lmdc-tab__icon {
      margin-top: 4px; }
  .lmdc-tab__icon-text {
    display: block;
    margin: 0 auto; }
  .lmdc-tab__icon + .lmdc-tab__icon-text, .lmdc-tab .lmdc-tab__icon + .lmdc-tab__icon-text {
    padding-top: 6px; }

.lmdc-tab--active {
  /* @alternate */
  color: rgba(0, 0, 0, 0.87);
  color: var(--mdc-theme-text-primary-on-background, rgba(0, 0, 0, 0.87)); }
  .lmdc-tab--active .lmdc-tab__icon {
    /* @alternate */
    color: rgba(0, 0, 0, 0.87);
    color: var(--mdc-theme-text-primary-on-background, rgba(0, 0, 0, 0.87)); }
  .lmdc-tab--active::before {
    bottom: 0; }

.lmdc-tab__indicator {
  /* @alternate */
  background-color: rgba(0, 0, 0, 0.87);
  background-color: var(--mdc-theme-text-primary-on-light, rgba(0, 0, 0, 0.87));
  position: absolute;
  bottom: 0;
  height: 2px;
  visibility: hidden;
  left: 2px;
  width: calc(100% - 4px); }

.lmdc-tab-bar:not(.lmdc-tab-bar-upgraded) .lmdc-tab--active .lmdc-tab__indicator,
.lmdc-tab-bar:not(.lmdc-tab-bar-upgraded) .lmdc-tab:hover .lmdc-tab__indicator,
.lmdc-tab-bar:not(.lmdc-tab-bar-upgraded) .lmdc-tab:active .lmdc-tab__indicator {
  visibility: visible; }

.lmdc-tab-bar:not(.lmdc-tab-bar-upgraded) .lmdc-tab:not(.lmdc-tab--active):hover .lmdc-tab__indicator {
  opacity: .38; }

.lmdc-tab-bar:not(.lmdc-tab-bar-upgraded) .lmdc-tab--active,
.lmdc-tab-bar:not(.lmdc-tab-bar-upgraded) .lmdc-tab:not(.lmdc-tab--active):active .lmdc-tab__indicator {
  opacity: .87; }

/**
 * Creates a rule that will be applied when an MDC Web component is within the context of an RTL layout.
 *
 * Usage Example:
 * ```scss
 * .mdc-foo {
 *   position: absolute;
 *   left: 0;
 *
 *   @include mdc-rtl {
 *     left: auto;
 *     right: 0;
 *   }
 *
 *   &__bar {
 *     margin-left: 4px;
 *     @include mdc-rtl(".mdc-foo") {
 *       margin-left: auto;
 *       margin-right: 4px;
 *     }
 *   }
 * }
 *
 * .mdc-foo--mod {
 *   padding-left: 4px;
 *
 *   @include mdc-rtl {
 *     padding-left: auto;
 *     padding-right: 4px;
 *   }
 * }
 * ```
 *
 * Note that this works by checking for [dir="rtl"] on an ancestor element. While this will work
 * in most cases, it will in some cases lead to false negatives, e.g.
 *
 * ```html
 * <html dir="rtl">
 *   <!-- ... -->
 *   <div dir="ltr">
 *     <div class="mdc-foo">Styled incorrectly as RTL!</div>
 *   </div>
 * </html>
 * ```
 *
 * In the future, selectors such as :dir (http://mdn.io/:dir) will help us mitigate this.
 */
/**
 * Takes a base box-model property - e.g. margin / border / padding - along with a default
 * direction and value, and emits rules which apply the value to the
 * "<base-property>-<default-direction>" property by default, but flips the direction
 * when within an RTL context.
 *
 * For example:
 *
 * ```scss
 * .mdc-foo {
 *   @include mdc-rtl-reflexive-box(margin, left, 8px);
 * }
 * ```
 * is equivalent to:
 *
 * ```scss
 * .mdc-foo {
 *   margin-left: 8px;
 *
 *   @include mdc-rtl {
 *     margin-right: 8px;
 *     margin-left: 0;
 *   }
 * }
 * ```
 * whereas:
 *
 * ```scss
 * .mdc-foo {
 *   @include mdc-rtl-reflexive-box(margin, right, 8px);
 * }
 * ```
 * is equivalent to:
 *
 * ```scss
 * .mdc-foo {
 *   margin-right: 8px;
 *
 *   @include mdc-rtl {
 *     margin-right: 0;
 *     margin-left: 8px;
 *   }
 * }
 * ```
 *
 * You can also pass a 4th optional $root-selector argument which will be forwarded to `mdc-rtl`,
 * e.g. `@include mdc-rtl-reflexive-box(margin, left, 8px, ".mdc-component")`.
 *
 * Note that this function will always zero out the original value in an RTL context. If you're
 * trying to flip the values, use mdc-rtl-reflexive-property().
 */
/**
 * Takes a base property and emits rules that assign <base-property>-left to <left-value> and
 * <base-property>-right to <right-value> in a LTR context, and vice versa in a RTL context.
 * For example:
 *
 * ```scss
 * .mdc-foo {
 *   @include mdc-rtl-reflexive-property(margin, auto, 12px);
 * }
 * ```
 * is equivalent to:
 *
 * ```scss
 * .mdc-foo {
 *   margin-left: auto;
 *   margin-right: 12px;
 *
 *   @include mdc-rtl {
 *     margin-left: 12px;
 *     margin-right: auto;
 *   }
 * }
 * ```
 *
 * A 4th optional $root-selector argument can be given, which will be passed to `mdc-rtl`.
 */
/**
 * Takes an argument specifying a horizontal position property (either "left" or "right") as well
 * as a value, and applies that value to the specified position in a LTR context, and flips it in a
 * RTL context. For example:
 *
 * ```scss
 * .mdc-foo {
 *   @include mdc-rtl-reflexive-position(left, 0);
 *   position: absolute;
 * }
 * ```
 * is equivalent to:
 *
 * ```scss
 *  .mdc-foo {
 *    position: absolute;
 *    left: 0;
 *    right: initial;
 *
 *    @include mdc-rtl {
 *      right: 0;
 *      left: initial;
 *    }
 *  }
 * ```
 * An optional third $root-selector argument may also be given, which is passed to `mdc-rtl`.
 */
.lmdc-tab-bar__indicator,
.lmdc-tab__indicator {
  /* @alternate */
  background-color: rgba(0, 0, 0, 0.87);
  background-color: var(--mdc-theme-text-primary-on-background, rgba(0, 0, 0, 0.87)); }

.lmdc-tab-bar {
  display: table;
  position: relative;
  height: 48px;
  margin: 0 auto;
  text-transform: uppercase; }

.lmdc-tab-bar__indicator {
  /* @alternate */
  background-color: rgba(0, 0, 0, 0.87);
  background-color: var(--mdc-theme-text-primary-on-light, rgba(0, 0, 0, 0.87));
  position: absolute;
  bottom: 0;
  height: 2px;
  visibility: hidden;
  width: 100%;
  left: 0;
  -webkit-transform-origin: left top;
          transform-origin: left top;
  transition: -webkit-transform 240ms 0ms cubic-bezier(0, 0, 0.2, 1);
  transition: transform 240ms 0ms cubic-bezier(0, 0, 0.2, 1);
  transition: transform 240ms 0ms cubic-bezier(0, 0, 0.2, 1), -webkit-transform 240ms 0ms cubic-bezier(0, 0, 0.2, 1);
  will-change: transform; }

.lmdc-tab-bar--icons-with-text {
  height: 72px; }

/**
 * Creates a rule that will be applied when an MDC Web component is within the context of an RTL layout.
 *
 * Usage Example:
 * ```scss
 * .mdc-foo {
 *   position: absolute;
 *   left: 0;
 *
 *   @include mdc-rtl {
 *     left: auto;
 *     right: 0;
 *   }
 *
 *   &__bar {
 *     margin-left: 4px;
 *     @include mdc-rtl(".mdc-foo") {
 *       margin-left: auto;
 *       margin-right: 4px;
 *     }
 *   }
 * }
 *
 * .mdc-foo--mod {
 *   padding-left: 4px;
 *
 *   @include mdc-rtl {
 *     padding-left: auto;
 *     padding-right: 4px;
 *   }
 * }
 * ```
 *
 * Note that this works by checking for [dir="rtl"] on an ancestor element. While this will work
 * in most cases, it will in some cases lead to false negatives, e.g.
 *
 * ```html
 * <html dir="rtl">
 *   <!-- ... -->
 *   <div dir="ltr">
 *     <div class="mdc-foo">Styled incorrectly as RTL!</div>
 *   </div>
 * </html>
 * ```
 *
 * In the future, selectors such as :dir (http://mdn.io/:dir) will help us mitigate this.
 */
/**
 * Takes a base box-model property - e.g. margin / border / padding - along with a default
 * direction and value, and emits rules which apply the value to the
 * "<base-property>-<default-direction>" property by default, but flips the direction
 * when within an RTL context.
 *
 * For example:
 *
 * ```scss
 * .mdc-foo {
 *   @include mdc-rtl-reflexive-box(margin, left, 8px);
 * }
 * ```
 * is equivalent to:
 *
 * ```scss
 * .mdc-foo {
 *   margin-left: 8px;
 *
 *   @include mdc-rtl {
 *     margin-right: 8px;
 *     margin-left: 0;
 *   }
 * }
 * ```
 * whereas:
 *
 * ```scss
 * .mdc-foo {
 *   @include mdc-rtl-reflexive-box(margin, right, 8px);
 * }
 * ```
 * is equivalent to:
 *
 * ```scss
 * .mdc-foo {
 *   margin-right: 8px;
 *
 *   @include mdc-rtl {
 *     margin-right: 0;
 *     margin-left: 8px;
 *   }
 * }
 * ```
 *
 * You can also pass a 4th optional $root-selector argument which will be forwarded to `mdc-rtl`,
 * e.g. `@include mdc-rtl-reflexive-box(margin, left, 8px, ".mdc-component")`.
 *
 * Note that this function will always zero out the original value in an RTL context. If you're
 * trying to flip the values, use mdc-rtl-reflexive-property().
 */
/**
 * Takes a base property and emits rules that assign <base-property>-left to <left-value> and
 * <base-property>-right to <right-value> in a LTR context, and vice versa in a RTL context.
 * For example:
 *
 * ```scss
 * .mdc-foo {
 *   @include mdc-rtl-reflexive-property(margin, auto, 12px);
 * }
 * ```
 * is equivalent to:
 *
 * ```scss
 * .mdc-foo {
 *   margin-left: auto;
 *   margin-right: 12px;
 *
 *   @include mdc-rtl {
 *     margin-left: 12px;
 *     margin-right: auto;
 *   }
 * }
 * ```
 *
 * A 4th optional $root-selector argument can be given, which will be passed to `mdc-rtl`.
 */
/**
 * Takes an argument specifying a horizontal position property (either "left" or "right") as well
 * as a value, and applies that value to the specified position in a LTR context, and flips it in a
 * RTL context. For example:
 *
 * ```scss
 * .mdc-foo {
 *   @include mdc-rtl-reflexive-position(left, 0);
 *   position: absolute;
 * }
 * ```
 * is equivalent to:
 *
 * ```scss
 *  .mdc-foo {
 *    position: absolute;
 *    left: 0;
 *    right: initial;
 *
 *    @include mdc-rtl {
 *      right: 0;
 *      left: initial;
 *    }
 *  }
 * ```
 * An optional third $root-selector argument may also be given, which is passed to `mdc-rtl`.
 */
.lmdc-tab-bar-scroller {
  display: flex;
  align-items: center;
  box-sizing: border-box;
  width: 100%;
  background-color: inherit;
  overflow: hidden; }
  .lmdc-tab-bar-scroller__scroll-frame {
    display: flex;
    position: relative;
    flex: 1;
    justify-content: flex-start;
    overflow: hidden; }
    .lmdc-tab-bar-scroller__scroll-frame__tabs {
      transition: -webkit-transform 240ms 0ms cubic-bezier(0, 0, 0.2, 1);
      transition: transform 240ms 0ms cubic-bezier(0, 0, 0.2, 1);
      transition: transform 240ms 0ms cubic-bezier(0, 0, 0.2, 1), -webkit-transform 240ms 0ms cubic-bezier(0, 0, 0.2, 1);
      will-change: transform; }
  .lmdc-tab-bar-scroller__indicator {
    display: flex;
    align-items: center;
    justify-content: center;
    width: 48px;
    cursor: pointer;
    visibility: hidden;
    /* @alternate */
    color: rgba(0, 0, 0, 0.54);
    color: var(--mdc-theme-text-secondary-on-background, rgba(0, 0, 0, 0.54)); }
    .lmdc-tab-bar-scroller__indicator:hover {
      /* @alternate */
      color: rgba(0, 0, 0, 0.87);
      color: var(--mdc-theme-text-primary-on-background, rgba(0, 0, 0, 0.87)); }
    .lmdc-tab-bar-scroller__indicator__inner {
      color: inherit;
      text-decoration: inherit;
      cursor: inherit; }
      .lmdc-tab-bar-scroller__indicator__inner:focus {
        outline-color: inherit; }
      .lmdc-tab-bar-scroller[dir="rtl"] .lmdc-tab-bar-scroller__indicator__inner,
      [dir="rtl"] .lmdc-tab-bar-scroller .lmdc-tab-bar-scroller__indicator__inner {
        -webkit-transform: rotate(180deg);
                transform: rotate(180deg); }
    .lmdc-tab-bar-scroller__indicator__inner:hover {
      color: inherit; }
  .lmdc-tab-bar-scroller__indicator--enabled {
    visibility: visible; }

/**
 * Creates a rule that will be applied when an MDC Web component is within the context of an RTL layout.
 *
 * Usage Example:
 * ```scss
 * .mdc-foo {
 *   position: absolute;
 *   left: 0;
 *
 *   @include mdc-rtl {
 *     left: auto;
 *     right: 0;
 *   }
 *
 *   &__bar {
 *     margin-left: 4px;
 *     @include mdc-rtl(".mdc-foo") {
 *       margin-left: auto;
 *       margin-right: 4px;
 *     }
 *   }
 * }
 *
 * .mdc-foo--mod {
 *   padding-left: 4px;
 *
 *   @include mdc-rtl {
 *     padding-left: auto;
 *     padding-right: 4px;
 *   }
 * }
 * ```
 *
 * Note that this works by checking for [dir="rtl"] on an ancestor element. While this will work
 * in most cases, it will in some cases lead to false negatives, e.g.
 *
 * ```html
 * <html dir="rtl">
 *   <!-- ... -->
 *   <div dir="ltr">
 *     <div class="mdc-foo">Styled incorrectly as RTL!</div>
 *   </div>
 * </html>
 * ```
 *
 * In the future, selectors such as :dir (http://mdn.io/:dir) will help us mitigate this.
 */
/**
 * Takes a base box-model property - e.g. margin / border / padding - along with a default
 * direction and value, and emits rules which apply the value to the
 * "<base-property>-<default-direction>" property by default, but flips the direction
 * when within an RTL context.
 *
 * For example:
 *
 * ```scss
 * .mdc-foo {
 *   @include mdc-rtl-reflexive-box(margin, left, 8px);
 * }
 * ```
 * is equivalent to:
 *
 * ```scss
 * .mdc-foo {
 *   margin-left: 8px;
 *
 *   @include mdc-rtl {
 *     margin-right: 8px;
 *     margin-left: 0;
 *   }
 * }
 * ```
 * whereas:
 *
 * ```scss
 * .mdc-foo {
 *   @include mdc-rtl-reflexive-box(margin, right, 8px);
 * }
 * ```
 * is equivalent to:
 *
 * ```scss
 * .mdc-foo {
 *   margin-right: 8px;
 *
 *   @include mdc-rtl {
 *     margin-right: 0;
 *     margin-left: 8px;
 *   }
 * }
 * ```
 *
 * You can also pass a 4th optional $root-selector argument which will be forwarded to `mdc-rtl`,
 * e.g. `@include mdc-rtl-reflexive-box(margin, left, 8px, ".mdc-component")`.
 *
 * Note that this function will always zero out the original value in an RTL context. If you're
 * trying to flip the values, use mdc-rtl-reflexive-property().
 */
/**
 * Takes a base property and emits rules that assign <base-property>-left to <left-value> and
 * <base-property>-right to <right-value> in a LTR context, and vice versa in a RTL context.
 * For example:
 *
 * ```scss
 * .mdc-foo {
 *   @include mdc-rtl-reflexive-property(margin, auto, 12px);
 * }
 * ```
 * is equivalent to:
 *
 * ```scss
 * .mdc-foo {
 *   margin-left: auto;
 *   margin-right: 12px;
 *
 *   @include mdc-rtl {
 *     margin-left: 12px;
 *     margin-right: auto;
 *   }
 * }
 * ```
 *
 * A 4th optional $root-selector argument can be given, which will be passed to `mdc-rtl`.
 */
/**
 * Takes an argument specifying a horizontal position property (either "left" or "right") as well
 * as a value, and applies that value to the specified position in a LTR context, and flips it in a
 * RTL context. For example:
 *
 * ```scss
 * .mdc-foo {
 *   @include mdc-rtl-reflexive-position(left, 0);
 *   position: absolute;
 * }
 * ```
 * is equivalent to:
 *
 * ```scss
 *  .mdc-foo {
 *    position: absolute;
 *    left: 0;
 *    right: initial;
 *
 *    @include mdc-rtl {
 *      right: 0;
 *      left: initial;
 *    }
 *  }
 * ```
 * An optional third $root-selector argument may also be given, which is passed to `mdc-rtl`.
 */
.lmdc-floating-label {
  position: absolute;
  bottom: 8px;
  left: 0;
  -webkit-transform-origin: left top;
          transform-origin: left top;
  transition: color 180ms cubic-bezier(0.4, 0, 0.2, 1), -webkit-transform 180ms cubic-bezier(0.4, 0, 0.2, 1);
  transition: transform 180ms cubic-bezier(0.4, 0, 0.2, 1), color 180ms cubic-bezier(0.4, 0, 0.2, 1);
  transition: transform 180ms cubic-bezier(0.4, 0, 0.2, 1), color 180ms cubic-bezier(0.4, 0, 0.2, 1), -webkit-transform 180ms cubic-bezier(0.4, 0, 0.2, 1);
  cursor: text; }
  [dir="rtl"] .lmdc-floating-label, .lmdc-floating-label[dir="rtl"] {
    right: 0;
    left: auto;
    -webkit-transform-origin: right top;
            transform-origin: right top; }

.lmdc-floating-label--float-above {
  cursor: auto; }

.lmdc-floating-label--float-above {
  -webkit-transform: translateY(-100%) scale(0.75);
          transform: translateY(-100%) scale(0.75); }

.lmdc-floating-label--shake {
  -webkit-animation: mdc-floating-label-shake-float-above-standard 250ms 1;
          animation: mdc-floating-label-shake-float-above-standard 250ms 1; }

@keyframes mdc-floating-label-shake-float-above-standard {
  0% {
    -webkit-transform: translateX(calc(0 - 0%)) translateY(-100%) scale(0.75);
            transform: translateX(calc(0 - 0%)) translateY(-100%) scale(0.75); }
  33% {
    -webkit-animation-timing-function: cubic-bezier(0.5, 0, 0.70173, 0.49582);
            animation-timing-function: cubic-bezier(0.5, 0, 0.70173, 0.49582);
    -webkit-transform: translateX(calc(4% - 0%)) translateY(-100%) scale(0.75);
            transform: translateX(calc(4% - 0%)) translateY(-100%) scale(0.75); }
  66% {
    -webkit-animation-timing-function: cubic-bezier(0.30244, 0.38135, 0.55, 0.95635);
            animation-timing-function: cubic-bezier(0.30244, 0.38135, 0.55, 0.95635);
    -webkit-transform: translateX(calc(-4% - 0%)) translateY(-100%) scale(0.75);
            transform: translateX(calc(-4% - 0%)) translateY(-100%) scale(0.75); }
  100% {
    -webkit-transform: translateX(calc(0 - 0%)) translateY(-100%) scale(0.75);
            transform: translateX(calc(0 - 0%)) translateY(-100%) scale(0.75); } }

.lmdc-line-ripple {
  position: absolute;
  bottom: 0;
  left: 0;
  width: 100%;
  height: 2px;
  -webkit-transform: scaleX(0);
          transform: scaleX(0);
  transition: opacity 180ms cubic-bezier(0.4, 0, 0.2, 1), -webkit-transform 180ms cubic-bezier(0.4, 0, 0.2, 1);
  transition: transform 180ms cubic-bezier(0.4, 0, 0.2, 1), opacity 180ms cubic-bezier(0.4, 0, 0.2, 1);
  transition: transform 180ms cubic-bezier(0.4, 0, 0.2, 1), opacity 180ms cubic-bezier(0.4, 0, 0.2, 1), -webkit-transform 180ms cubic-bezier(0.4, 0, 0.2, 1);
  opacity: 0;
  z-index: 2; }

.lmdc-line-ripple--active {
  -webkit-transform: scaleX(1);
          transform: scaleX(1);
  opacity: 1; }

.lmdc-line-ripple--deactivating {
  opacity: 0; }

/**
 * Creates a rule that will be applied when an MDC Web component is within the context of an RTL layout.
 *
 * Usage Example:
 * ```scss
 * .mdc-foo {
 *   position: absolute;
 *   left: 0;
 *
 *   @include mdc-rtl {
 *     left: auto;
 *     right: 0;
 *   }
 *
 *   &__bar {
 *     margin-left: 4px;
 *     @include mdc-rtl(".mdc-foo") {
 *       margin-left: auto;
 *       margin-right: 4px;
 *     }
 *   }
 * }
 *
 * .mdc-foo--mod {
 *   padding-left: 4px;
 *
 *   @include mdc-rtl {
 *     padding-left: auto;
 *     padding-right: 4px;
 *   }
 * }
 * ```
 *
 * Note that this works by checking for [dir="rtl"] on an ancestor element. While this will work
 * in most cases, it will in some cases lead to false negatives, e.g.
 *
 * ```html
 * <html dir="rtl">
 *   <!-- ... -->
 *   <div dir="ltr">
 *     <div class="mdc-foo">Styled incorrectly as RTL!</div>
 *   </div>
 * </html>
 * ```
 *
 * In the future, selectors such as :dir (http://mdn.io/:dir) will help us mitigate this.
 */
/**
 * Takes a base box-model property - e.g. margin / border / padding - along with a default
 * direction and value, and emits rules which apply the value to the
 * "<base-property>-<default-direction>" property by default, but flips the direction
 * when within an RTL context.
 *
 * For example:
 *
 * ```scss
 * .mdc-foo {
 *   @include mdc-rtl-reflexive-box(margin, left, 8px);
 * }
 * ```
 * is equivalent to:
 *
 * ```scss
 * .mdc-foo {
 *   margin-left: 8px;
 *
 *   @include mdc-rtl {
 *     margin-right: 8px;
 *     margin-left: 0;
 *   }
 * }
 * ```
 * whereas:
 *
 * ```scss
 * .mdc-foo {
 *   @include mdc-rtl-reflexive-box(margin, right, 8px);
 * }
 * ```
 * is equivalent to:
 *
 * ```scss
 * .mdc-foo {
 *   margin-right: 8px;
 *
 *   @include mdc-rtl {
 *     margin-right: 0;
 *     margin-left: 8px;
 *   }
 * }
 * ```
 *
 * You can also pass a 4th optional $root-selector argument which will be forwarded to `mdc-rtl`,
 * e.g. `@include mdc-rtl-reflexive-box(margin, left, 8px, ".mdc-component")`.
 *
 * Note that this function will always zero out the original value in an RTL context. If you're
 * trying to flip the values, use mdc-rtl-reflexive-property().
 */
/**
 * Takes a base property and emits rules that assign <base-property>-left to <left-value> and
 * <base-property>-right to <right-value> in a LTR context, and vice versa in a RTL context.
 * For example:
 *
 * ```scss
 * .mdc-foo {
 *   @include mdc-rtl-reflexive-property(margin, auto, 12px);
 * }
 * ```
 * is equivalent to:
 *
 * ```scss
 * .mdc-foo {
 *   margin-left: auto;
 *   margin-right: 12px;
 *
 *   @include mdc-rtl {
 *     margin-left: 12px;
 *     margin-right: auto;
 *   }
 * }
 * ```
 *
 * A 4th optional $root-selector argument can be given, which will be passed to `mdc-rtl`.
 */
/**
 * Takes an argument specifying a horizontal position property (either "left" or "right") as well
 * as a value, and applies that value to the specified position in a LTR context, and flips it in a
 * RTL context. For example:
 *
 * ```scss
 * .mdc-foo {
 *   @include mdc-rtl-reflexive-position(left, 0);
 *   position: absolute;
 * }
 * ```
 * is equivalent to:
 *
 * ```scss
 *  .mdc-foo {
 *    position: absolute;
 *    left: 0;
 *    right: initial;
 *
 *    @include mdc-rtl {
 *      right: 0;
 *      left: initial;
 *    }
 *  }
 * ```
 * An optional third $root-selector argument may also be given, which is passed to `mdc-rtl`.
 */
/* TODO(sgomes): Figure out what to do about desktop font sizes. */
/* TODO(sgomes): Figure out what to do about i18n and i18n font sizes. */
/* TODO(sgomes): Figure out what to do about desktop font sizes. */
/* TODO(sgomes): Figure out what to do about i18n and i18n font sizes. */
.lmdc-text-field-helper-text {
  margin: 0;
  transition: opacity 180ms cubic-bezier(0.4, 0, 0.2, 1);
  opacity: 0;
  font-size: .75rem;
  will-change: opacity; }
  .lmdc-text-field + .lmdc-text-field-helper-text {
    margin-bottom: 8px; }

.lmdc-text-field-helper-text--persistent {
  transition: none;
  opacity: 1;
  will-change: initial; }

.lmdc-text-field--with-leading-icon .lmdc-text-field__icon,
.lmdc-text-field--with-trailing-icon .lmdc-text-field__icon {
  position: absolute;
  bottom: 16px;
  cursor: pointer; }

.lmdc-text-field__icon:not([tabindex]),
.lmdc-text-field__icon[tabindex="-1"] {
  cursor: default;
  pointer-events: none; }

.lmdc-text-field__idle-outline {
  border-radius: 4px;
  position: absolute;
  top: 0;
  left: 0;
  width: calc(100% - 4px);
  height: calc(100% - 4px);
  transition: opacity 100ms ease;
  border: 1px solid;
  opacity: 1; }

.lmdc-text-field__outline {
  --mdc-ripple-fg-size: 0;
  --mdc-ripple-left: 0;
  --mdc-ripple-top: 0;
  --mdc-ripple-fg-scale: 1;
  --mdc-ripple-fg-translate-end: 0;
  --mdc-ripple-fg-translate-start: 0;
  -webkit-tap-highlight-color: rgba(0, 0, 0, 0);
  will-change: transform, opacity;
  border-radius: 4px;
  position: absolute;
  top: 0;
  left: 0;
  width: calc(100% - 1px);
  height: calc(100% - 2px);
  transition: opacity 180ms cubic-bezier(0.4, 0, 0.2, 1);
  opacity: 0;
  overflow: hidden; }
  .lmdc-text-field__outline::before, .lmdc-text-field__outline::after {
    position: absolute;
    border-radius: 50%;
    opacity: 0;
    pointer-events: none;
    content: ""; }
  .lmdc-text-field__outline::before {
    transition: opacity 15ms linear;
    z-index: 1; }
  .lmdc-text-field__outline.lmdc-ripple-upgraded::before {
    -webkit-transform: scale(var(--mdc-ripple-fg-scale, 1));
            transform: scale(var(--mdc-ripple-fg-scale, 1)); }
  .lmdc-text-field__outline.lmdc-ripple-upgraded::after {
    top: 0;
    left: 0;
    -webkit-transform: scale(0);
            transform: scale(0);
    -webkit-transform-origin: center center;
            transform-origin: center center; }
  .lmdc-text-field__outline.lmdc-ripple-upgraded--unbounded::after {
    top: var(--mdc-ripple-top, 0);
    left: var(--mdc-ripple-left, 0); }
  .lmdc-text-field__outline.lmdc-ripple-upgraded--foreground-activation::after {
    -webkit-animation: 225ms mdc-ripple-fg-radius-in forwards, 75ms mdc-ripple-fg-opacity-in forwards;
            animation: 225ms mdc-ripple-fg-radius-in forwards, 75ms mdc-ripple-fg-opacity-in forwards; }
  .lmdc-text-field__outline.lmdc-ripple-upgraded--foreground-deactivation::after {
    -webkit-animation: 150ms mdc-ripple-fg-opacity-out;
            animation: 150ms mdc-ripple-fg-opacity-out;
    -webkit-transform: translate(var(--mdc-ripple-fg-translate-end, 0)) scale(var(--mdc-ripple-fg-scale, 1));
            transform: translate(var(--mdc-ripple-fg-translate-end, 0)) scale(var(--mdc-ripple-fg-scale, 1)); }
  .lmdc-text-field__outline::before, .lmdc-text-field__outline::after {
    top: calc(50% - 100%);
    left: calc(50% - 100%);
    width: 200%;
    height: 200%; }
  .lmdc-text-field__outline.lmdc-ripple-upgraded::after {
    width: var(--mdc-ripple-fg-size, 100%);
    height: var(--mdc-ripple-fg-size, 100%); }
  .lmdc-text-field__outline::before, .lmdc-text-field__outline::after {
    /* @alternate */
    background-color: rgba(0, 0, 0, 0.87); }
    @supports not (-ms-ime-align: auto) {
      .lmdc-text-field__outline::before, .lmdc-text-field__outline::after {
        background-color: var(--mdc-theme-text-primary-on-background, rgba(0, 0, 0, 0.87)); } }
  .lmdc-text-field__outline:not(.lmdc-ripple-upgraded)::after {
    transition: opacity 150ms linear; }
  .lmdc-text-field__outline:not(.lmdc-ripple-upgraded):active::after {
    transition-duration: 75ms;
    opacity: 0.16; }
  .lmdc-text-field__outline.lmdc-ripple-upgraded {
    --mdc-ripple-fg-opacity: $opacity; }
  .lmdc-text-field__outline svg {
    position: absolute;
    width: 100%;
    height: 100%; }

.lmdc-text-field__outline-path {
  stroke-width: 1px;
  transition: stroke 180ms cubic-bezier(0.4, 0, 0.2, 1), stroke-width 180ms cubic-bezier(0.4, 0, 0.2, 1), opacity 180ms cubic-bezier(0.4, 0, 0.2, 1);
  fill: transparent; }

.lmdc-text-field {
  display: inline-block;
  position: relative;
  margin-bottom: 8px;
  will-change: opacity, transform, color; }
  .lmdc-text-field:not(.lmdc-text-field--disabled):not(.lmdc-text-field--outlined):not(.lmdc-text-field--textarea) .lmdc-text-field__input {
    border-bottom-color: rgba(0, 0, 0, 0.5); }
  .lmdc-text-field:not(.lmdc-text-field--disabled):not(.lmdc-text-field--outlined):not(.lmdc-text-field--textarea) .lmdc-text-field__input:hover {
    border-bottom-color: black; }
  .lmdc-text-field .lmdc-line-ripple {
    /* @alternate */
    background-color: #6200ee;
    background-color: var(--mdc-theme-primary, #6200ee); }
  .lmdc-text-field:not(.lmdc-text-field--disabled) .lmdc-text-field__input {
    /* @alternate */
    color: rgba(0, 0, 0, 0.87);
    color: var(--mdc-theme-text-primary-on-background, rgba(0, 0, 0, 0.87)); }
  .lmdc-text-field:not(.lmdc-text-field--disabled) .lmdc-floating-label {
    color: rgba(0, 0, 0, 0.6); }
  .lmdc-text-field:not(.lmdc-text-field--disabled) .lmdc-text-field__input::-webkit-input-placeholder {
    color: rgba(0, 0, 0, 0.6); }
  .lmdc-text-field:not(.lmdc-text-field--disabled) .lmdc-text-field__input:-ms-input-placeholder {
    color: rgba(0, 0, 0, 0.6); }
  .lmdc-text-field:not(.lmdc-text-field--disabled) .lmdc-text-field__input::-ms-input-placeholder {
    color: rgba(0, 0, 0, 0.6); }
  .lmdc-text-field:not(.lmdc-text-field--disabled) .lmdc-text-field__input::placeholder {
    color: rgba(0, 0, 0, 0.6); }
  .lmdc-text-field:not(.lmdc-text-field--disabled) + .lmdc-text-field-helper-text {
    /* @alternate */
    color: rgba(0, 0, 0, 0.38);
    color: var(--mdc-theme-text-hint-on-background, rgba(0, 0, 0, 0.38)); }
  .lmdc-text-field:not(.lmdc-text-field--disabled):not(.lmdc-text-field--textarea) {
    border-bottom-color: rgba(0, 0, 0, 0.12); }
  .lmdc-text-field:not(.lmdc-text-field--disabled) .lmdc-text-field__icon {
    color: black; }

.lmdc-text-field__input {
  font-family: Roboto, sans-serif;
  -moz-osx-font-smoothing: grayscale;
  -webkit-font-smoothing: antialiased;
  letter-spacing: 0.04em;
  width: 100%;
  padding: 0 0 8px;
  transition: opacity 180ms cubic-bezier(0.4, 0, 0.2, 1);
  border: none;
  border-bottom: 1px solid;
  border-radius: 0;
  background: none;
  font-size: inherit;
  -webkit-appearance: none;
     -moz-appearance: none;
          appearance: none; }
  .lmdc-text-field__input::-webkit-input-placeholder {
    transition: color 180ms cubic-bezier(0.4, 0, 0.2, 1);
    opacity: 1; }
  .lmdc-text-field__input:-ms-input-placeholder {
    transition: color 180ms cubic-bezier(0.4, 0, 0.2, 1);
    opacity: 1; }
  .lmdc-text-field__input::-ms-input-placeholder {
    transition: color 180ms cubic-bezier(0.4, 0, 0.2, 1);
    opacity: 1; }
  .lmdc-text-field__input::placeholder {
    transition: color 180ms cubic-bezier(0.4, 0, 0.2, 1);
    opacity: 1; }
  .lmdc-text-field__input:focus {
    outline: none; }
  .lmdc-text-field__input:invalid {
    box-shadow: none; }
  .lmdc-text-field__input:-webkit-autofill + .lmdc-floating-label {
    -webkit-transform: translateY(-100%) scale(0.75);
            transform: translateY(-100%) scale(0.75);
    cursor: auto; }

.lmdc-text-field--outlined {
  height: 56px;
  border: none; }
  .lmdc-text-field--outlined:not(.lmdc-text-field--disabled) .lmdc-text-field__idle-outline {
    border-color: rgba(0, 0, 0, 0.12); }
  .lmdc-text-field--outlined:not(.lmdc-text-field--disabled):not(.lmdc-text-field--focused) .lmdc-text-field__outline .lmdc-text-field__outline-path {
    stroke: rgba(0, 0, 0, 0.12); }
  .lmdc-text-field--outlined:not(.lmdc-text-field--disabled) .lmdc-text-field__input:hover ~ .lmdc-text-field__idle-outline,
  .lmdc-text-field--outlined:not(.lmdc-text-field--disabled) .lmdc-text-field__icon:hover ~ .lmdc-text-field__idle-outline {
    border-color: rgba(0, 0, 0, 0.87); }
  .lmdc-text-field--outlined:not(.lmdc-text-field--disabled).lmdc-text-field--focused .lmdc-text-field__outline-path {
    /* @alternate */
    stroke: #6200ee;
    stroke: var(--mdc-theme-primary, #6200ee); }
  .lmdc-text-field--outlined .lmdc-floating-label--float-above {
    -webkit-transform: translateY(-130%) scale(0.75);
            transform: translateY(-130%) scale(0.75); }
  .lmdc-text-field--outlined .lmdc-floating-label--shake {
    -webkit-animation: mdc-floating-label-shake-float-above-text-field-outlined 250ms 1;
            animation: mdc-floating-label-shake-float-above-text-field-outlined 250ms 1; }
  .lmdc-text-field--outlined .lmdc-text-field__input {
    display: flex;
    height: 30px;
    padding: 12px;
    border: none;
    background-color: transparent;
    z-index: 1; }
  .lmdc-text-field--outlined .lmdc-floating-label {
    left: 16px;
    right: initial;
    position: absolute;
    bottom: 20px;
    transition: -webkit-transform 260ms ease;
    transition: transform 260ms ease;
    transition: transform 260ms ease, -webkit-transform 260ms ease; }
    [dir="rtl"] .lmdc-text-field--outlined .lmdc-floating-label, .lmdc-text-field--outlined .lmdc-floating-label[dir="rtl"] {
      left: initial;
      right: 16px; }
  .lmdc-text-field--outlined .lmdc-text-field__icon {
    z-index: 2; }
  .lmdc-text-field--outlined .lmdc-text-field__input:hover ~ .lmdc-text-field__idle-outline {
    border: 1px solid; }
  .lmdc-text-field--outlined .lmdc-text-field__icon:hover ~ .lmdc-text-field__idle-outline {
    border: 1px solid rgba(0, 0, 0, 0.87); }

.lmdc-text-field--outlined.lmdc-text-field--focused .lmdc-text-field__outline-path {
  stroke-width: 2px; }

.lmdc-text-field--outlined.lmdc-text-field--disabled .lmdc-text-field__input {
  color: rgba(0, 0, 0, 0.38); }

.lmdc-text-field--outlined.lmdc-text-field--disabled .lmdc-text-field__idle-outline {
  border-color: rgba(0, 0, 0, 0.06); }

.lmdc-text-field--outlined.lmdc-text-field--disabled:not(.lmdc-text-field--focused) .lmdc-text-field__outline .lmdc-text-field__outline-path {
  stroke: rgba(0, 0, 0, 0.06); }

.lmdc-text-field--outlined.lmdc-text-field--disabled .lmdc-text-field__input {
  border-bottom: none; }

.lmdc-text-field--outlined.lmdc-text-field--disabled .lmdc-text-field__outline-path {
  stroke-width: 1px; }

.lmdc-text-field--outlined.lmdc-text-field--dense {
  height: 48px; }
  .lmdc-text-field--outlined.lmdc-text-field--dense .lmdc-floating-label--float-above {
    -webkit-transform: translateY(-145%) scale(0.923);
            transform: translateY(-145%) scale(0.923); }
  .lmdc-text-field--outlined.lmdc-text-field--dense .lmdc-floating-label--shake {
    -webkit-animation: mdc-floating-label-shake-float-above-text-field-outlined-dense 250ms 1;
            animation: mdc-floating-label-shake-float-above-text-field-outlined-dense 250ms 1; }
  .lmdc-text-field--outlined.lmdc-text-field--dense .lmdc-text-field__input {
    padding: 12px 12px 7px; }
  .lmdc-text-field--outlined.lmdc-text-field--dense .lmdc-floating-label {
    bottom: 18px; }
  .lmdc-text-field--outlined.lmdc-text-field--dense .lmdc-text-field__icon {
    top: 12px; }

.lmdc-text-field--box {
  --mdc-ripple-fg-size: 0;
  --mdc-ripple-left: 0;
  --mdc-ripple-top: 0;
  --mdc-ripple-fg-scale: 1;
  --mdc-ripple-fg-translate-end: 0;
  --mdc-ripple-fg-translate-start: 0;
  -webkit-tap-highlight-color: rgba(0, 0, 0, 0);
  will-change: transform, opacity;
  border-radius: 4px 4px 0 0;
  display: inline-flex;
  position: relative;
  height: 56px;
  margin-top: 16px;
  overflow: hidden; }
  .lmdc-text-field--box::before, .lmdc-text-field--box::after {
    position: absolute;
    border-radius: 50%;
    opacity: 0;
    pointer-events: none;
    content: ""; }
  .lmdc-text-field--box::before {
    transition: opacity 15ms linear;
    z-index: 1; }
  .lmdc-text-field--box.lmdc-ripple-upgraded::before {
    -webkit-transform: scale(var(--mdc-ripple-fg-scale, 1));
            transform: scale(var(--mdc-ripple-fg-scale, 1)); }
  .lmdc-text-field--box.lmdc-ripple-upgraded::after {
    top: 0;
    left: 0;
    -webkit-transform: scale(0);
            transform: scale(0);
    -webkit-transform-origin: center center;
            transform-origin: center center; }
  .lmdc-text-field--box.lmdc-ripple-upgraded--unbounded::after {
    top: var(--mdc-ripple-top, 0);
    left: var(--mdc-ripple-left, 0); }
  .lmdc-text-field--box.lmdc-ripple-upgraded--foreground-activation::after {
    -webkit-animation: 225ms mdc-ripple-fg-radius-in forwards, 75ms mdc-ripple-fg-opacity-in forwards;
            animation: 225ms mdc-ripple-fg-radius-in forwards, 75ms mdc-ripple-fg-opacity-in forwards; }
  .lmdc-text-field--box.lmdc-ripple-upgraded--foreground-deactivation::after {
    -webkit-animation: 150ms mdc-ripple-fg-opacity-out;
            animation: 150ms mdc-ripple-fg-opacity-out;
    -webkit-transform: translate(var(--mdc-ripple-fg-translate-end, 0)) scale(var(--mdc-ripple-fg-scale, 1));
            transform: translate(var(--mdc-ripple-fg-translate-end, 0)) scale(var(--mdc-ripple-fg-scale, 1)); }
  .lmdc-text-field--box::before, .lmdc-text-field--box::after {
    /* @alternate */
    background-color: rgba(0, 0, 0, 0.87); }
    @supports not (-ms-ime-align: auto) {
      .lmdc-text-field--box::before, .lmdc-text-field--box::after {
        background-color: var(--mdc-theme-text-primary-on-background, rgba(0, 0, 0, 0.87)); } }
  .lmdc-text-field--box:hover::before {
    opacity: 0.04; }
  .lmdc-text-field--box:not(.lmdc-ripple-upgraded):focus::before, .lmdc-text-field--box:not(.lmdc-ripple-upgraded):focus-within::before, .lmdc-text-field--box.lmdc-ripple-upgraded--background-focused::before {
    transition-duration: 75ms;
    opacity: 0.12; }
  .lmdc-text-field--box:not(.lmdc-ripple-upgraded)::after {
    transition: opacity 150ms linear; }
  .lmdc-text-field--box:not(.lmdc-ripple-upgraded):active::after {
    transition-duration: 75ms;
    opacity: 0.16; }
  .lmdc-text-field--box.lmdc-ripple-upgraded {
    --mdc-ripple-fg-opacity: $opacity; }
  .lmdc-text-field--box::before, .lmdc-text-field--box::after {
    top: calc(50% - 100%);
    left: calc(50% - 100%);
    width: 200%;
    height: 200%; }
  .lmdc-text-field--box.lmdc-ripple-upgraded::after {
    width: var(--mdc-ripple-fg-size, 100%);
    height: var(--mdc-ripple-fg-size, 100%); }
  .lmdc-text-field--box:not(.lmdc-text-field--disabled) {
    background-color: rgba(0, 0, 0, 0.04); }
  .lmdc-text-field--box .lmdc-floating-label--float-above {
    -webkit-transform: translateY(-50%) scale(0.75);
            transform: translateY(-50%) scale(0.75); }
  .lmdc-text-field--box .lmdc-floating-label--shake {
    -webkit-animation: mdc-floating-label-shake-float-above-text-field-box 250ms 1;
            animation: mdc-floating-label-shake-float-above-text-field-box 250ms 1; }
  .lmdc-text-field--box .lmdc-text-field__input {
    align-self: flex-end;
    box-sizing: border-box;
    height: 100%;
    padding: 20px 16px 0; }
  .lmdc-text-field--box .lmdc-floating-label {
    left: 16px;
    right: initial;
    position: absolute;
    bottom: 20px;
    width: calc(100% - 48px);
    text-overflow: ellipsis;
    white-space: nowrap;
    pointer-events: none;
    overflow: hidden;
    will-change: transform; }
    [dir="rtl"] .lmdc-text-field--box .lmdc-floating-label, .lmdc-text-field--box .lmdc-floating-label[dir="rtl"] {
      left: initial;
      right: 16px; }

.lmdc-text-field--box.lmdc-text-field--disabled {
  background-color: rgba(0, 0, 0, 0.02);
  border-bottom: none; }
  .lmdc-text-field--box.lmdc-text-field--disabled .lmdc-text-field__input {
    border-bottom-color: rgba(0, 0, 0, 0.06); }
  .lmdc-text-field--box.lmdc-text-field--disabled:not(.lmdc-text-field--disabled) .lmdc-floating-label {
    /* @alternate */
    color: rgba(0, 0, 0, 0.38);
    color: var(--mdc-theme-text-hint-on-background, rgba(0, 0, 0, 0.38)); }
  .lmdc-text-field--box.lmdc-text-field--disabled:not(.lmdc-text-field--disabled) .lmdc-text-field__input::-webkit-input-placeholder {
    /* @alternate */
    color: rgba(0, 0, 0, 0.38);
    color: var(--mdc-theme-text-hint-on-background, rgba(0, 0, 0, 0.38)); }
  .lmdc-text-field--box.lmdc-text-field--disabled:not(.lmdc-text-field--disabled) .lmdc-text-field__input:-ms-input-placeholder {
    /* @alternate */
    color: rgba(0, 0, 0, 0.38);
    color: var(--mdc-theme-text-hint-on-background, rgba(0, 0, 0, 0.38)); }
  .lmdc-text-field--box.lmdc-text-field--disabled:not(.lmdc-text-field--disabled) .lmdc-text-field__input::-ms-input-placeholder {
    /* @alternate */
    color: rgba(0, 0, 0, 0.38);
    color: var(--mdc-theme-text-hint-on-background, rgba(0, 0, 0, 0.38)); }
  .lmdc-text-field--box.lmdc-text-field--disabled:not(.lmdc-text-field--disabled) .lmdc-text-field__input::placeholder {
    /* @alternate */
    color: rgba(0, 0, 0, 0.38);
    color: var(--mdc-theme-text-hint-on-background, rgba(0, 0, 0, 0.38)); }

.lmdc-text-field--box.lmdc-text-field--dense .lmdc-floating-label--float-above {
  -webkit-transform: translateY(-90%) scale(0.923);
          transform: translateY(-90%) scale(0.923); }

.lmdc-text-field--box.lmdc-text-field--dense .lmdc-floating-label--shake {
  -webkit-animation: mdc-floating-label-shake-float-above-text-field-box-dense 250ms 1;
          animation: mdc-floating-label-shake-float-above-text-field-box-dense 250ms 1; }

.lmdc-text-field--box.lmdc-text-field--dense .lmdc-text-field__input {
  padding: 12px 12px 0; }

.lmdc-text-field--with-leading-icon .lmdc-text-field__icon {
  left: 15px;
  right: initial; }
  [dir="rtl"] .lmdc-text-field--with-leading-icon .lmdc-text-field__icon, .lmdc-text-field--with-leading-icon .lmdc-text-field__icon[dir="rtl"] {
    left: initial;
    right: 15px; }

.lmdc-text-field--with-leading-icon .lmdc-text-field__input {
  padding-left: 48px;
  padding-right: 15px; }
  [dir="rtl"] .lmdc-text-field--with-leading-icon .lmdc-text-field__input, .lmdc-text-field--with-leading-icon .lmdc-text-field__input[dir="rtl"] {
    padding-left: 15px;
    padding-right: 48px; }

.lmdc-text-field--with-leading-icon .lmdc-floating-label {
  left: 48px;
  right: initial; }
  [dir="rtl"] .lmdc-text-field--with-leading-icon .lmdc-floating-label, .lmdc-text-field--with-leading-icon .lmdc-floating-label[dir="rtl"] {
    left: initial;
    right: 48px; }

.lmdc-text-field--with-leading-icon.lmdc-text-field--outlined .lmdc-floating-label--float-above {
  -webkit-transform: translateY(-130%) translateX(-32px) scale(0.75);
          transform: translateY(-130%) translateX(-32px) scale(0.75); }
  [dir="rtl"] .lmdc-text-field--with-leading-icon.lmdc-text-field--outlined .lmdc-floating-label--float-above, .lmdc-text-field--with-leading-icon.lmdc-text-field--outlined .lmdc-floating-label--float-above[dir="rtl"] {
    -webkit-transform: translateY(-130%) translateX(32px) scale(0.75);
            transform: translateY(-130%) translateX(32px) scale(0.75); }

.lmdc-text-field--with-leading-icon.lmdc-text-field--outlined .lmdc-floating-label--shake {
  -webkit-animation: mdc-floating-label-shake-float-above-text-field-outlined-leading-icon 250ms 1;
          animation: mdc-floating-label-shake-float-above-text-field-outlined-leading-icon 250ms 1; }

.lmdc-text-field--with-leading-icon.lmdc-text-field--outlined.lmdc-text-field--dense .lmdc-floating-label--float-above {
  -webkit-transform: translateY(-145%) translateX(-21px) scale(0.923);
          transform: translateY(-145%) translateX(-21px) scale(0.923); }
  [dir="rtl"] .lmdc-text-field--with-leading-icon.lmdc-text-field--outlined.lmdc-text-field--dense .lmdc-floating-label--float-above, .lmdc-text-field--with-leading-icon.lmdc-text-field--outlined.lmdc-text-field--dense .lmdc-floating-label--float-above[dir="rtl"] {
    -webkit-transform: translateY(-145%) translateX(21px) scale(0.923);
            transform: translateY(-145%) translateX(21px) scale(0.923); }

.lmdc-text-field--with-leading-icon.lmdc-text-field--outlined.lmdc-text-field--dense .lmdc-floating-label--shake {
  -webkit-animation: mdc-floating-label-shake-float-above-text-field-outlined-leading-icon-dense 250ms 1;
          animation: mdc-floating-label-shake-float-above-text-field-outlined-leading-icon-dense 250ms 1; }

.lmdc-text-field--with-trailing-icon .lmdc-text-field__icon {
  left: initial;
  right: 15px; }
  [dir="rtl"] .lmdc-text-field--with-trailing-icon .lmdc-text-field__icon, .lmdc-text-field--with-trailing-icon .lmdc-text-field__icon[dir="rtl"] {
    left: 15px;
    right: initial; }

.lmdc-text-field--with-trailing-icon .lmdc-text-field__input {
  padding-left: 15px;
  padding-right: 48px; }
  [dir="rtl"] .lmdc-text-field--with-trailing-icon .lmdc-text-field__input, .lmdc-text-field--with-trailing-icon .lmdc-text-field__input[dir="rtl"] {
    padding-left: 48px;
    padding-right: 15px; }

.lmdc-text-field--with-leading-icon.lmdc-text-field--dense .lmdc-text-field__icon,
.lmdc-text-field--with-trailing-icon.lmdc-text-field--dense .lmdc-text-field__icon {
  bottom: 16px;
  -webkit-transform: scale(0.8);
          transform: scale(0.8); }

.lmdc-text-field--with-leading-icon.lmdc-text-field--dense .lmdc-text-field__icon {
  left: 12px;
  right: initial; }
  [dir="rtl"] .lmdc-text-field--with-leading-icon.lmdc-text-field--dense .lmdc-text-field__icon, .lmdc-text-field--with-leading-icon.lmdc-text-field--dense .lmdc-text-field__icon[dir="rtl"] {
    left: initial;
    right: 12px; }

.lmdc-text-field--with-leading-icon.lmdc-text-field--dense .lmdc-text-field__input {
  padding-left: 38px;
  padding-right: 12px; }
  [dir="rtl"] .lmdc-text-field--with-leading-icon.lmdc-text-field--dense .lmdc-text-field__input, .lmdc-text-field--with-leading-icon.lmdc-text-field--dense .lmdc-text-field__input[dir="rtl"] {
    padding-left: 12px;
    padding-right: 38px; }

.lmdc-text-field--with-leading-icon.lmdc-text-field--dense .lmdc-floating-label {
  left: 38px;
  right: initial; }
  [dir="rtl"] .lmdc-text-field--with-leading-icon.lmdc-text-field--dense .lmdc-floating-label, .lmdc-text-field--with-leading-icon.lmdc-text-field--dense .lmdc-floating-label[dir="rtl"] {
    left: initial;
    right: 38px; }

.lmdc-text-field--with-trailing-icon.lmdc-text-field--dense .lmdc-text-field__icon {
  left: initial;
  right: 12px; }
  [dir="rtl"] .lmdc-text-field--with-trailing-icon.lmdc-text-field--dense .lmdc-text-field__icon, .lmdc-text-field--with-trailing-icon.lmdc-text-field--dense .lmdc-text-field__icon[dir="rtl"] {
    left: 12px;
    right: initial; }

.lmdc-text-field--with-trailing-icon.lmdc-text-field--dense .lmdc-text-field__input {
  padding-left: 12px;
  padding-right: 38px; }
  [dir="rtl"] .lmdc-text-field--with-trailing-icon.lmdc-text-field--dense .lmdc-text-field__input, .lmdc-text-field--with-trailing-icon.lmdc-text-field--dense .lmdc-text-field__input[dir="rtl"] {
    padding-left: 38px;
    padding-right: 12px; }

.lmdc-text-field--upgraded:not(.lmdc-text-field--fullwidth):not(.lmdc-text-field--box) {
  display: inline-flex;
  position: relative;
  align-items: flex-end;
  box-sizing: border-box;
  margin-top: 16px; }
  .lmdc-text-field--upgraded:not(.lmdc-text-field--fullwidth):not(.lmdc-text-field--box):not(.lmdc-text-field--textarea):not(.lmdc-text-field--outlined) {
    height: 48px; }
  .lmdc-text-field--upgraded:not(.lmdc-text-field--fullwidth):not(.lmdc-text-field--box) .lmdc-floating-label {
    pointer-events: none; }

.lmdc-text-field--dense {
  margin-top: 12px;
  margin-bottom: 4px;
  font-size: .813rem; }
  .lmdc-text-field--dense .lmdc-floating-label--float-above {
    -webkit-transform: translateY(-110%) scale(0.923);
            transform: translateY(-110%) scale(0.923); }

.lmdc-text-field__input:required + .lmdc-floating-label::after {
  margin-left: 1px;
  content: "*"; }

.lmdc-text-field--textarea {
  border-radius: 4px;
  display: flex;
  width: -webkit-fit-content;
  width: -moz-fit-content;
  width: fit-content;
  height: initial;
  transition: none;
  border: 1px solid;
  overflow: hidden; }
  .lmdc-text-field--textarea .lmdc-floating-label {
    border-radius: 4px 4px 0 0; }
  .lmdc-text-field--textarea .lmdc-text-field__input {
    border-radius: 2px; }
  .lmdc-text-field--textarea:not(.lmdc-text-field--disabled) {
    border-color: rgba(0, 0, 0, 0.73); }
    .lmdc-text-field--textarea:not(.lmdc-text-field--disabled) .lmdc-text-field__input:focus {
      border-color: rgba(0, 0, 0, 0.73); }
  .lmdc-text-field--textarea .lmdc-floating-label--float-above {
    -webkit-transform: translateY(-50%) scale(0.923);
            transform: translateY(-50%) scale(0.923); }
  .lmdc-text-field--textarea .lmdc-floating-label--shake {
    -webkit-animation: mdc-floating-label-shake-float-above-textarea 250ms 1;
            animation: mdc-floating-label-shake-float-above-textarea 250ms 1; }
  .lmdc-text-field--textarea .lmdc-text-field__input {
    margin: 0;
    padding: 16px;
    padding-top: 32px;
    border: 1px solid transparent; }
  .lmdc-text-field--textarea .lmdc-floating-label {
    left: 1px;
    right: initial;
    background-color: white;
    top: 18px;
    bottom: auto;
    margin-top: 2px;
    margin-left: 8px;
    padding: 8px;
    line-height: 1.15; }
    [dir="rtl"] .lmdc-text-field--textarea .lmdc-floating-label, .lmdc-text-field--textarea .lmdc-floating-label[dir="rtl"] {
      left: initial;
      right: 1px; }

.lmdc-text-field--fullwidth {
  width: 100%; }
  .lmdc-text-field--fullwidth .lmdc-text-field__input {
    resize: vertical; }
  .lmdc-text-field--fullwidth:not(.lmdc-text-field--textarea) {
    display: block;
    box-sizing: border-box;
    height: 56px;
    margin: 0;
    border: none;
    border-bottom: 1px solid;
    outline: none; }
    .lmdc-text-field--fullwidth:not(.lmdc-text-field--textarea) .lmdc-text-field__input {
      width: 100%;
      height: 100%;
      padding: 0;
      resize: none;
      border: none !important; }

.lmdc-text-field--fullwidth.lmdc-text-field--invalid:not(.lmdc-text-field--disabled):not(.lmdc-text-field--textarea) {
  border-bottom-color: #d50000; }

.lmdc-text-field--dense + .lmdc-text-field-helper-text {
  margin-bottom: 4px; }

.lmdc-text-field--box + .lmdc-text-field-helper-text,
.lmdc-text-field--outlined + .lmdc-text-field-helper-text {
  margin-right: 16px;
  margin-left: 16px; }

.lmdc-form-field > .lmdc-text-field + label {
  align-self: flex-start; }

.lmdc-text-field--focused:not(.lmdc-text-field--disabled) .lmdc-floating-label {
  /* @alternate */
  color: #6200ee;
  color: var(--mdc-theme-primary, #6200ee); }

.lmdc-text-field--focused:not(.lmdc-text-field--disabled) .lmdc-text-field__input::-webkit-input-placeholder {
  /* @alternate */
  color: #6200ee;
  color: var(--mdc-theme-primary, #6200ee); }

.lmdc-text-field--focused:not(.lmdc-text-field--disabled) .lmdc-text-field__input:-ms-input-placeholder {
  /* @alternate */
  color: #6200ee;
  color: var(--mdc-theme-primary, #6200ee); }

.lmdc-text-field--focused:not(.lmdc-text-field--disabled) .lmdc-text-field__input::-ms-input-placeholder {
  /* @alternate */
  color: #6200ee;
  color: var(--mdc-theme-primary, #6200ee); }

.lmdc-text-field--focused:not(.lmdc-text-field--disabled) .lmdc-text-field__input::placeholder {
  /* @alternate */
  color: #6200ee;
  color: var(--mdc-theme-primary, #6200ee); }

.lmdc-text-field--focused .lmdc-text-field__input:required + .lmdc-floating-label::after {
  color: #d50000; }

.lmdc-text-field--focused + .lmdc-text-field-helper-text:not(.lmdc-text-field-helper-text--validation-msg) {
  opacity: 1; }

.lmdc-text-field--textarea.lmdc-text-field--focused:not(.lmdc-text-field--disabled) {
  /* @alternate */
  border-color: #6200ee;
  border-color: var(--mdc-theme-primary, #6200ee); }
  .lmdc-text-field--textarea.lmdc-text-field--focused:not(.lmdc-text-field--disabled) .lmdc-text-field__input:focus {
    /* @alternate */
    border-color: #6200ee;
    border-color: var(--mdc-theme-primary, #6200ee); }

.lmdc-text-field--invalid:not(.lmdc-text-field--disabled):not(.lmdc-text-field--outlined):not(.lmdc-text-field--textarea) .lmdc-text-field__input {
  border-bottom-color: #d50000; }

.lmdc-text-field--invalid:not(.lmdc-text-field--disabled):not(.lmdc-text-field--outlined):not(.lmdc-text-field--textarea) .lmdc-text-field__input:hover {
  border-bottom-color: #d50000; }

.lmdc-text-field--invalid:not(.lmdc-text-field--disabled) .lmdc-line-ripple {
  background-color: #d50000; }

.lmdc-text-field--invalid:not(.lmdc-text-field--disabled) .lmdc-floating-label {
  color: #d50000; }

.lmdc-text-field--invalid:not(.lmdc-text-field--disabled) .lmdc-text-field__input::-webkit-input-placeholder {
  color: #d50000; }

.lmdc-text-field--invalid:not(.lmdc-text-field--disabled) .lmdc-text-field__input:-ms-input-placeholder {
  color: #d50000; }

.lmdc-text-field--invalid:not(.lmdc-text-field--disabled) .lmdc-text-field__input::-ms-input-placeholder {
  color: #d50000; }

.lmdc-text-field--invalid:not(.lmdc-text-field--disabled) .lmdc-text-field__input::placeholder {
  color: #d50000; }

.lmdc-text-field--invalid:not(.lmdc-text-field--disabled).lmdc-text-field--invalid + .lmdc-text-field-helper-text--validation-msg {
  color: #d50000; }

.lmdc-text-field--invalid + .lmdc-text-field-helper-text--validation-msg {
  opacity: 1; }

.lmdc-text-field--textarea.lmdc-text-field--invalid:not(.lmdc-text-field--disabled) {
  border-color: #d50000; }
  .lmdc-text-field--textarea.lmdc-text-field--invalid:not(.lmdc-text-field--disabled) .lmdc-text-field__input:focus {
    border-color: #d50000; }

.lmdc-text-field--outlined.lmdc-text-field--invalid:not(.lmdc-text-field--disabled) .lmdc-text-field__idle-outline {
  border-color: #d50000; }

.lmdc-text-field--outlined.lmdc-text-field--invalid:not(.lmdc-text-field--disabled):not(.lmdc-text-field--focused) .lmdc-text-field__outline .lmdc-text-field__outline-path {
  stroke: #d50000; }

.lmdc-text-field--outlined.lmdc-text-field--invalid:not(.lmdc-text-field--disabled) .lmdc-text-field__input:hover ~ .lmdc-text-field__idle-outline,
.lmdc-text-field--outlined.lmdc-text-field--invalid:not(.lmdc-text-field--disabled) .lmdc-text-field__icon:hover ~ .lmdc-text-field__idle-outline {
  border-color: #d50000; }

.lmdc-text-field--outlined.lmdc-text-field--invalid:not(.lmdc-text-field--disabled).lmdc-text-field--focused .lmdc-text-field__outline-path {
  stroke: #d50000; }

.lmdc-text-field--disabled {
  pointer-events: none; }
  .lmdc-text-field--disabled .lmdc-text-field__input {
    border-bottom-color: rgba(35, 31, 32, 0.26); }
  .lmdc-text-field--disabled .lmdc-text-field__input {
    /* @alternate */
    color: rgba(0, 0, 0, 0.38);
    color: var(--mdc-theme-text-disabled-on-background, rgba(0, 0, 0, 0.38)); }
  .lmdc-text-field--disabled .lmdc-floating-label {
    /* @alternate */
    color: rgba(0, 0, 0, 0.38);
    color: var(--mdc-theme-text-disabled-on-background, rgba(0, 0, 0, 0.38)); }
  .lmdc-text-field--disabled .lmdc-text-field__input::-webkit-input-placeholder {
    /* @alternate */
    color: rgba(0, 0, 0, 0.38);
    color: var(--mdc-theme-text-disabled-on-background, rgba(0, 0, 0, 0.38)); }
  .lmdc-text-field--disabled .lmdc-text-field__input:-ms-input-placeholder {
    /* @alternate */
    color: rgba(0, 0, 0, 0.38);
    color: var(--mdc-theme-text-disabled-on-background, rgba(0, 0, 0, 0.38)); }
  .lmdc-text-field--disabled .lmdc-text-field__input::-ms-input-placeholder {
    /* @alternate */
    color: rgba(0, 0, 0, 0.38);
    color: var(--mdc-theme-text-disabled-on-background, rgba(0, 0, 0, 0.38)); }
  .lmdc-text-field--disabled .lmdc-text-field__input::placeholder {
    /* @alternate */
    color: rgba(0, 0, 0, 0.38);
    color: var(--mdc-theme-text-disabled-on-background, rgba(0, 0, 0, 0.38)); }
  .lmdc-text-field--disabled + .lmdc-text-field-helper-text {
    /* @alternate */
    color: rgba(0, 0, 0, 0.38);
    color: var(--mdc-theme-text-disabled-on-background, rgba(0, 0, 0, 0.38)); }
  .lmdc-text-field--disabled .lmdc-text-field__icon {
    color: rgba(0, 0, 0, 0.3); }
  .lmdc-text-field--disabled:not(.lmdc-text-field--textarea) {
    border-bottom-color: rgba(0, 0, 0, 0.12); }
  .lmdc-text-field--disabled .lmdc-text-field__input {
    border-bottom: 1px dotted; }
  .lmdc-text-field--disabled .lmdc-floating-label {
    cursor: default; }

.lmdc-text-field--textarea.lmdc-text-field--disabled {
  border-color: rgba(35, 31, 32, 0.26);
  background-color: #f9f9f9;
  border-style: solid; }
  .lmdc-text-field--textarea.lmdc-text-field--disabled .lmdc-text-field__input:focus {
    border-color: rgba(35, 31, 32, 0.26); }
  .lmdc-text-field--textarea.lmdc-text-field--disabled .lmdc-text-field__input {
    border: 1px solid transparent; }
  .lmdc-text-field--textarea.lmdc-text-field--disabled .lmdc-floating-label {
    background-color: #f9f9f9; }

.lmdc-floating-label--float-above ~ .lmdc-text-field__idle-outline {
  opacity: 0; }

.lmdc-floating-label--float-above ~ .lmdc-text-field__outline {
  opacity: 1; }

@-webkit-keyframes mdc-floating-label-shake-float-above-text-field-box {
  0% {
    -webkit-transform: translateX(calc(0 - 0%)) translateY(-50%) scale(0.75);
            transform: translateX(calc(0 - 0%)) translateY(-50%) scale(0.75); }
  33% {
    -webkit-animation-timing-function: cubic-bezier(0.5, 0, 0.70173, 0.49582);
            animation-timing-function: cubic-bezier(0.5, 0, 0.70173, 0.49582);
    -webkit-transform: translateX(calc(4% - 0%)) translateY(-50%) scale(0.75);
            transform: translateX(calc(4% - 0%)) translateY(-50%) scale(0.75); }
  66% {
    -webkit-animation-timing-function: cubic-bezier(0.30244, 0.38135, 0.55, 0.95635);
            animation-timing-function: cubic-bezier(0.30244, 0.38135, 0.55, 0.95635);
    -webkit-transform: translateX(calc(-4% - 0%)) translateY(-50%) scale(0.75);
            transform: translateX(calc(-4% - 0%)) translateY(-50%) scale(0.75); }
  100% {
    -webkit-transform: translateX(calc(0 - 0%)) translateY(-50%) scale(0.75);
            transform: translateX(calc(0 - 0%)) translateY(-50%) scale(0.75); } }

@keyframes mdc-floating-label-shake-float-above-text-field-box {
  0% {
    -webkit-transform: translateX(calc(0 - 0%)) translateY(-50%) scale(0.75);
            transform: translateX(calc(0 - 0%)) translateY(-50%) scale(0.75); }
  33% {
    -webkit-animation-timing-function: cubic-bezier(0.5, 0, 0.70173, 0.49582);
            animation-timing-function: cubic-bezier(0.5, 0, 0.70173, 0.49582);
    -webkit-transform: translateX(calc(4% - 0%)) translateY(-50%) scale(0.75);
            transform: translateX(calc(4% - 0%)) translateY(-50%) scale(0.75); }
  66% {
    -webkit-animation-timing-function: cubic-bezier(0.30244, 0.38135, 0.55, 0.95635);
            animation-timing-function: cubic-bezier(0.30244, 0.38135, 0.55, 0.95635);
    -webkit-transform: translateX(calc(-4% - 0%)) translateY(-50%) scale(0.75);
            transform: translateX(calc(-4% - 0%)) translateY(-50%) scale(0.75); }
  100% {
    -webkit-transform: translateX(calc(0 - 0%)) translateY(-50%) scale(0.75);
            transform: translateX(calc(0 - 0%)) translateY(-50%) scale(0.75); } }

@-webkit-keyframes mdc-floating-label-shake-float-above-text-field-box-dense {
  0% {
    -webkit-transform: translateX(calc(0 - 0%)) translateY(-90%) scale(0.923);
            transform: translateX(calc(0 - 0%)) translateY(-90%) scale(0.923); }
  33% {
    -webkit-animation-timing-function: cubic-bezier(0.5, 0, 0.70173, 0.49582);
            animation-timing-function: cubic-bezier(0.5, 0, 0.70173, 0.49582);
    -webkit-transform: translateX(calc(4% - 0%)) translateY(-90%) scale(0.923);
            transform: translateX(calc(4% - 0%)) translateY(-90%) scale(0.923); }
  66% {
    -webkit-animation-timing-function: cubic-bezier(0.30244, 0.38135, 0.55, 0.95635);
            animation-timing-function: cubic-bezier(0.30244, 0.38135, 0.55, 0.95635);
    -webkit-transform: translateX(calc(-4% - 0%)) translateY(-90%) scale(0.923);
            transform: translateX(calc(-4% - 0%)) translateY(-90%) scale(0.923); }
  100% {
    -webkit-transform: translateX(calc(0 - 0%)) translateY(-90%) scale(0.923);
            transform: translateX(calc(0 - 0%)) translateY(-90%) scale(0.923); } }

@keyframes mdc-floating-label-shake-float-above-text-field-box-dense {
  0% {
    -webkit-transform: translateX(calc(0 - 0%)) translateY(-90%) scale(0.923);
            transform: translateX(calc(0 - 0%)) translateY(-90%) scale(0.923); }
  33% {
    -webkit-animation-timing-function: cubic-bezier(0.5, 0, 0.70173, 0.49582);
            animation-timing-function: cubic-bezier(0.5, 0, 0.70173, 0.49582);
    -webkit-transform: translateX(calc(4% - 0%)) translateY(-90%) scale(0.923);
            transform: translateX(calc(4% - 0%)) translateY(-90%) scale(0.923); }
  66% {
    -webkit-animation-timing-function: cubic-bezier(0.30244, 0.38135, 0.55, 0.95635);
            animation-timing-function: cubic-bezier(0.30244, 0.38135, 0.55, 0.95635);
    -webkit-transform: translateX(calc(-4% - 0%)) translateY(-90%) scale(0.923);
            transform: translateX(calc(-4% - 0%)) translateY(-90%) scale(0.923); }
  100% {
    -webkit-transform: translateX(calc(0 - 0%)) translateY(-90%) scale(0.923);
            transform: translateX(calc(0 - 0%)) translateY(-90%) scale(0.923); } }

@-webkit-keyframes mdc-floating-label-shake-float-above-text-field-outlined {
  0% {
    -webkit-transform: translateX(calc(0 - 0%)) translateY(-130%) scale(0.75);
            transform: translateX(calc(0 - 0%)) translateY(-130%) scale(0.75); }
  33% {
    -webkit-animation-timing-function: cubic-bezier(0.5, 0, 0.70173, 0.49582);
            animation-timing-function: cubic-bezier(0.5, 0, 0.70173, 0.49582);
    -webkit-transform: translateX(calc(4% - 0%)) translateY(-130%) scale(0.75);
            transform: translateX(calc(4% - 0%)) translateY(-130%) scale(0.75); }
  66% {
    -webkit-animation-timing-function: cubic-bezier(0.30244, 0.38135, 0.55, 0.95635);
            animation-timing-function: cubic-bezier(0.30244, 0.38135, 0.55, 0.95635);
    -webkit-transform: translateX(calc(-4% - 0%)) translateY(-130%) scale(0.75);
            transform: translateX(calc(-4% - 0%)) translateY(-130%) scale(0.75); }
  100% {
    -webkit-transform: translateX(calc(0 - 0%)) translateY(-130%) scale(0.75);
            transform: translateX(calc(0 - 0%)) translateY(-130%) scale(0.75); } }

@keyframes mdc-floating-label-shake-float-above-text-field-outlined {
  0% {
    -webkit-transform: translateX(calc(0 - 0%)) translateY(-130%) scale(0.75);
            transform: translateX(calc(0 - 0%)) translateY(-130%) scale(0.75); }
  33% {
    -webkit-animation-timing-function: cubic-bezier(0.5, 0, 0.70173, 0.49582);
            animation-timing-function: cubic-bezier(0.5, 0, 0.70173, 0.49582);
    -webkit-transform: translateX(calc(4% - 0%)) translateY(-130%) scale(0.75);
            transform: translateX(calc(4% - 0%)) translateY(-130%) scale(0.75); }
  66% {
    -webkit-animation-timing-function: cubic-bezier(0.30244, 0.38135, 0.55, 0.95635);
            animation-timing-function: cubic-bezier(0.30244, 0.38135, 0.55, 0.95635);
    -webkit-transform: translateX(calc(-4% - 0%)) translateY(-130%) scale(0.75);
            transform: translateX(calc(-4% - 0%)) translateY(-130%) scale(0.75); }
  100% {
    -webkit-transform: translateX(calc(0 - 0%)) translateY(-130%) scale(0.75);
            transform: translateX(calc(0 - 0%)) translateY(-130%) scale(0.75); } }

@-webkit-keyframes mdc-floating-label-shake-float-above-text-field-outlined-dense {
  0% {
    -webkit-transform: translateX(calc(0 - 0%)) translateY(-145%) scale(0.923);
            transform: translateX(calc(0 - 0%)) translateY(-145%) scale(0.923); }
  33% {
    -webkit-animation-timing-function: cubic-bezier(0.5, 0, 0.70173, 0.49582);
            animation-timing-function: cubic-bezier(0.5, 0, 0.70173, 0.49582);
    -webkit-transform: translateX(calc(4% - 0%)) translateY(-145%) scale(0.923);
            transform: translateX(calc(4% - 0%)) translateY(-145%) scale(0.923); }
  66% {
    -webkit-animation-timing-function: cubic-bezier(0.30244, 0.38135, 0.55, 0.95635);
            animation-timing-function: cubic-bezier(0.30244, 0.38135, 0.55, 0.95635);
    -webkit-transform: translateX(calc(-4% - 0%)) translateY(-145%) scale(0.923);
            transform: translateX(calc(-4% - 0%)) translateY(-145%) scale(0.923); }
  100% {
    -webkit-transform: translateX(calc(0 - 0%)) translateY(-145%) scale(0.923);
            transform: translateX(calc(0 - 0%)) translateY(-145%) scale(0.923); } }

@keyframes mdc-floating-label-shake-float-above-text-field-outlined-dense {
  0% {
    -webkit-transform: translateX(calc(0 - 0%)) translateY(-145%) scale(0.923);
            transform: translateX(calc(0 - 0%)) translateY(-145%) scale(0.923); }
  33% {
    -webkit-animation-timing-function: cubic-bezier(0.5, 0, 0.70173, 0.49582);
            animation-timing-function: cubic-bezier(0.5, 0, 0.70173, 0.49582);
    -webkit-transform: translateX(calc(4% - 0%)) translateY(-145%) scale(0.923);
            transform: translateX(calc(4% - 0%)) translateY(-145%) scale(0.923); }
  66% {
    -webkit-animation-timing-function: cubic-bezier(0.30244, 0.38135, 0.55, 0.95635);
            animation-timing-function: cubic-bezier(0.30244, 0.38135, 0.55, 0.95635);
    -webkit-transform: translateX(calc(-4% - 0%)) translateY(-145%) scale(0.923);
            transform: translateX(calc(-4% - 0%)) translateY(-145%) scale(0.923); }
  100% {
    -webkit-transform: translateX(calc(0 - 0%)) translateY(-145%) scale(0.923);
            transform: translateX(calc(0 - 0%)) translateY(-145%) scale(0.923); } }

@-webkit-keyframes mdc-floating-label-shake-float-above-text-field-outlined-leading-icon {
  0% {
    -webkit-transform: translateX(calc(0 - 32px)) translateY(-130%) scale(0.75);
            transform: translateX(calc(0 - 32px)) translateY(-130%) scale(0.75); }
  33% {
    -webkit-animation-timing-function: cubic-bezier(0.5, 0, 0.70173, 0.49582);
            animation-timing-function: cubic-bezier(0.5, 0, 0.70173, 0.49582);
    -webkit-transform: translateX(calc(4% - 32px)) translateY(-130%) scale(0.75);
            transform: translateX(calc(4% - 32px)) translateY(-130%) scale(0.75); }
  66% {
    -webkit-animation-timing-function: cubic-bezier(0.30244, 0.38135, 0.55, 0.95635);
            animation-timing-function: cubic-bezier(0.30244, 0.38135, 0.55, 0.95635);
    -webkit-transform: translateX(calc(-4% - 32px)) translateY(-130%) scale(0.75);
            transform: translateX(calc(-4% - 32px)) translateY(-130%) scale(0.75); }
  100% {
    -webkit-transform: translateX(calc(0 - 32px)) translateY(-130%) scale(0.75);
            transform: translateX(calc(0 - 32px)) translateY(-130%) scale(0.75); } }

@keyframes mdc-floating-label-shake-float-above-text-field-outlined-leading-icon {
  0% {
    -webkit-transform: translateX(calc(0 - 32px)) translateY(-130%) scale(0.75);
            transform: translateX(calc(0 - 32px)) translateY(-130%) scale(0.75); }
  33% {
    -webkit-animation-timing-function: cubic-bezier(0.5, 0, 0.70173, 0.49582);
            animation-timing-function: cubic-bezier(0.5, 0, 0.70173, 0.49582);
    -webkit-transform: translateX(calc(4% - 32px)) translateY(-130%) scale(0.75);
            transform: translateX(calc(4% - 32px)) translateY(-130%) scale(0.75); }
  66% {
    -webkit-animation-timing-function: cubic-bezier(0.30244, 0.38135, 0.55, 0.95635);
            animation-timing-function: cubic-bezier(0.30244, 0.38135, 0.55, 0.95635);
    -webkit-transform: translateX(calc(-4% - 32px)) translateY(-130%) scale(0.75);
            transform: translateX(calc(-4% - 32px)) translateY(-130%) scale(0.75); }
  100% {
    -webkit-transform: translateX(calc(0 - 32px)) translateY(-130%) scale(0.75);
            transform: translateX(calc(0 - 32px)) translateY(-130%) scale(0.75); } }

@-webkit-keyframes mdc-floating-label-shake-float-above-text-field-outlined-leading-icon-dense {
  0% {
    -webkit-transform: translateX(calc(0 - 21px)) translateY(-145%) scale(0.923);
            transform: translateX(calc(0 - 21px)) translateY(-145%) scale(0.923); }
  33% {
    -webkit-animation-timing-function: cubic-bezier(0.5, 0, 0.70173, 0.49582);
            animation-timing-function: cubic-bezier(0.5, 0, 0.70173, 0.49582);
    -webkit-transform: translateX(calc(4% - 21px)) translateY(-145%) scale(0.923);
            transform: translateX(calc(4% - 21px)) translateY(-145%) scale(0.923); }
  66% {
    -webkit-animation-timing-function: cubic-bezier(0.30244, 0.38135, 0.55, 0.95635);
            animation-timing-function: cubic-bezier(0.30244, 0.38135, 0.55, 0.95635);
    -webkit-transform: translateX(calc(-4% - 21px)) translateY(-145%) scale(0.923);
            transform: translateX(calc(-4% - 21px)) translateY(-145%) scale(0.923); }
  100% {
    -webkit-transform: translateX(calc(0 - 21px)) translateY(-145%) scale(0.923);
            transform: translateX(calc(0 - 21px)) translateY(-145%) scale(0.923); } }

@keyframes mdc-floating-label-shake-float-above-text-field-outlined-leading-icon-dense {
  0% {
    -webkit-transform: translateX(calc(0 - 21px)) translateY(-145%) scale(0.923);
            transform: translateX(calc(0 - 21px)) translateY(-145%) scale(0.923); }
  33% {
    -webkit-animation-timing-function: cubic-bezier(0.5, 0, 0.70173, 0.49582);
            animation-timing-function: cubic-bezier(0.5, 0, 0.70173, 0.49582);
    -webkit-transform: translateX(calc(4% - 21px)) translateY(-145%) scale(0.923);
            transform: translateX(calc(4% - 21px)) translateY(-145%) scale(0.923); }
  66% {
    -webkit-animation-timing-function: cubic-bezier(0.30244, 0.38135, 0.55, 0.95635);
            animation-timing-function: cubic-bezier(0.30244, 0.38135, 0.55, 0.95635);
    -webkit-transform: translateX(calc(-4% - 21px)) translateY(-145%) scale(0.923);
            transform: translateX(calc(-4% - 21px)) translateY(-145%) scale(0.923); }
  100% {
    -webkit-transform: translateX(calc(0 - 21px)) translateY(-145%) scale(0.923);
            transform: translateX(calc(0 - 21px)) translateY(-145%) scale(0.923); } }

@-webkit-keyframes mdc-floating-label-shake-float-above-textarea {
  0% {
    -webkit-transform: translateX(calc(0 - 0%)) translateY(-50%) scale(0.923);
            transform: translateX(calc(0 - 0%)) translateY(-50%) scale(0.923); }
  33% {
    -webkit-animation-timing-function: cubic-bezier(0.5, 0, 0.70173, 0.49582);
            animation-timing-function: cubic-bezier(0.5, 0, 0.70173, 0.49582);
    -webkit-transform: translateX(calc(4% - 0%)) translateY(-50%) scale(0.923);
            transform: translateX(calc(4% - 0%)) translateY(-50%) scale(0.923); }
  66% {
    -webkit-animation-timing-function: cubic-bezier(0.30244, 0.38135, 0.55, 0.95635);
            animation-timing-function: cubic-bezier(0.30244, 0.38135, 0.55, 0.95635);
    -webkit-transform: translateX(calc(-4% - 0%)) translateY(-50%) scale(0.923);
            transform: translateX(calc(-4% - 0%)) translateY(-50%) scale(0.923); }
  100% {
    -webkit-transform: translateX(calc(0 - 0%)) translateY(-50%) scale(0.923);
            transform: translateX(calc(0 - 0%)) translateY(-50%) scale(0.923); } }

@keyframes mdc-floating-label-shake-float-above-textarea {
  0% {
    -webkit-transform: translateX(calc(0 - 0%)) translateY(-50%) scale(0.923);
            transform: translateX(calc(0 - 0%)) translateY(-50%) scale(0.923); }
  33% {
    -webkit-animation-timing-function: cubic-bezier(0.5, 0, 0.70173, 0.49582);
            animation-timing-function: cubic-bezier(0.5, 0, 0.70173, 0.49582);
    -webkit-transform: translateX(calc(4% - 0%)) translateY(-50%) scale(0.923);
            transform: translateX(calc(4% - 0%)) translateY(-50%) scale(0.923); }
  66% {
    -webkit-animation-timing-function: cubic-bezier(0.30244, 0.38135, 0.55, 0.95635);
            animation-timing-function: cubic-bezier(0.30244, 0.38135, 0.55, 0.95635);
    -webkit-transform: translateX(calc(-4% - 0%)) translateY(-50%) scale(0.923);
            transform: translateX(calc(-4% - 0%)) translateY(-50%) scale(0.923); }
  100% {
    -webkit-transform: translateX(calc(0 - 0%)) translateY(-50%) scale(0.923);
            transform: translateX(calc(0 - 0%)) translateY(-50%) scale(0.923); } }

:root {
  --mdc-theme-primary: #6200ee;
  --mdc-theme-primary-light: #b37eff;
  --mdc-theme-primary-dark: #8936ff;
  --mdc-theme-secondary: #018786;
  --mdc-theme-secondary-light: #02cecc;
  --mdc-theme-secondary-dark: #004040;
  --mdc-theme-background: #fff;
  --mdc-theme-text-primary-on-primary: white;
  --mdc-theme-text-secondary-on-primary: rgba(255, 255, 255, 0.7);
  --mdc-theme-text-hint-on-primary: rgba(255, 255, 255, 0.5);
  --mdc-theme-text-disabled-on-primary: rgba(255, 255, 255, 0.5);
  --mdc-theme-text-icon-on-primary: rgba(255, 255, 255, 0.5);
  --mdc-theme-text-primary-on-primary-light: rgba(0, 0, 0, 0.87);
  --mdc-theme-text-secondary-on-primary-light: rgba(0, 0, 0, 0.54);
  --mdc-theme-text-hint-on-primary-light: rgba(0, 0, 0, 0.38);
  --mdc-theme-text-disabled-on-primary-light: rgba(0, 0, 0, 0.38);
  --mdc-theme-text-icon-on-primary-light: rgba(0, 0, 0, 0.38);
  --mdc-theme-text-primary-on-primary-dark: white;
  --mdc-theme-text-secondary-on-primary-dark: rgba(255, 255, 255, 0.7);
  --mdc-theme-text-hint-on-primary-dark: rgba(255, 255, 255, 0.5);
  --mdc-theme-text-disabled-on-primary-dark: rgba(255, 255, 255, 0.5);
  --mdc-theme-text-icon-on-primary-dark: rgba(255, 255, 255, 0.5);
  --mdc-theme-text-primary-on-secondary: white;
  --mdc-theme-text-secondary-on-secondary: rgba(255, 255, 255, 0.7);
  --mdc-theme-text-hint-on-secondary: rgba(255, 255, 255, 0.5);
  --mdc-theme-text-disabled-on-secondary: rgba(255, 255, 255, 0.5);
  --mdc-theme-text-icon-on-secondary: rgba(255, 255, 255, 0.5);
  --mdc-theme-text-primary-on-secondary-light: rgba(0, 0, 0, 0.87);
  --mdc-theme-text-secondary-on-secondary-light: rgba(0, 0, 0, 0.54);
  --mdc-theme-text-hint-on-secondary-light: rgba(0, 0, 0, 0.38);
  --mdc-theme-text-disabled-on-secondary-light: rgba(0, 0, 0, 0.38);
  --mdc-theme-text-icon-on-secondary-light: rgba(0, 0, 0, 0.38);
  --mdc-theme-text-primary-on-secondary-dark: white;
  --mdc-theme-text-secondary-on-secondary-dark: rgba(255, 255, 255, 0.7);
  --mdc-theme-text-hint-on-secondary-dark: rgba(255, 255, 255, 0.5);
  --mdc-theme-text-disabled-on-secondary-dark: rgba(255, 255, 255, 0.5);
  --mdc-theme-text-icon-on-secondary-dark: rgba(255, 255, 255, 0.5);
  --mdc-theme-text-primary-on-background: rgba(0, 0, 0, 0.87);
  --mdc-theme-text-secondary-on-background: rgba(0, 0, 0, 0.54);
  --mdc-theme-text-hint-on-background: rgba(0, 0, 0, 0.38);
  --mdc-theme-text-disabled-on-background: rgba(0, 0, 0, 0.38);
  --mdc-theme-text-icon-on-background: rgba(0, 0, 0, 0.38);
  --mdc-theme-text-primary-on-light: rgba(0, 0, 0, 0.87);
  --mdc-theme-text-secondary-on-light: rgba(0, 0, 0, 0.54);
  --mdc-theme-text-hint-on-light: rgba(0, 0, 0, 0.38);
  --mdc-theme-text-disabled-on-light: rgba(0, 0, 0, 0.38);
  --mdc-theme-text-icon-on-light: rgba(0, 0, 0, 0.38);
  --mdc-theme-text-primary-on-dark: white;
  --mdc-theme-text-secondary-on-dark: rgba(255, 255, 255, 0.7);
  --mdc-theme-text-hint-on-dark: rgba(255, 255, 255, 0.5);
  --mdc-theme-text-disabled-on-dark: rgba(255, 255, 255, 0.5);
  --mdc-theme-text-icon-on-dark: rgba(255, 255, 255, 0.5); }

.lmdc-theme--background {
  /* @alternate */
  background-color: #fff;
  background-color: var(--mdc-theme-background, #fff); }

.lmdc-theme--primary {
  /* @alternate */
  color: #6200ee !important;
  color: var(--mdc-theme-primary, #6200ee) !important; }

.lmdc-theme--primary-light {
  /* @alternate */
  color: #b37eff !important;
  color: var(--mdc-theme-primary-light, #b37eff) !important; }

.lmdc-theme--primary-dark {
  /* @alternate */
  color: #8936ff !important;
  color: var(--mdc-theme-primary-dark, #8936ff) !important; }

.lmdc-theme--secondary {
  /* @alternate */
  color: #018786 !important;
  color: var(--mdc-theme-secondary, #018786) !important; }

.lmdc-theme--secondary-light {
  /* @alternate */
  color: #02cecc !important;
  color: var(--mdc-theme-secondary-light, #02cecc) !important; }

.lmdc-theme--secondary-dark {
  /* @alternate */
  color: #004040 !important;
  color: var(--mdc-theme-secondary-dark, #004040) !important; }

.lmdc-theme--text-primary-on-primary {
  /* @alternate */
  color: white !important;
  color: var(--mdc-theme-text-primary-on-primary, white) !important; }

.lmdc-theme--text-secondary-on-primary {
  /* @alternate */
  color: rgba(255, 255, 255, 0.7) !important;
  color: var(--mdc-theme-text-secondary-on-primary, rgba(255, 255, 255, 0.7)) !important; }

.lmdc-theme--text-hint-on-primary {
  /* @alternate */
  color: rgba(255, 255, 255, 0.5) !important;
  color: var(--mdc-theme-text-hint-on-primary, rgba(255, 255, 255, 0.5)) !important; }

.lmdc-theme--text-disabled-on-primary {
  /* @alternate */
  color: rgba(255, 255, 255, 0.5) !important;
  color: var(--mdc-theme-text-disabled-on-primary, rgba(255, 255, 255, 0.5)) !important; }

.lmdc-theme--text-icon-on-primary {
  /* @alternate */
  color: rgba(255, 255, 255, 0.5) !important;
  color: var(--mdc-theme-text-icon-on-primary, rgba(255, 255, 255, 0.5)) !important; }

.lmdc-theme--text-primary-on-primary-light {
  /* @alternate */
  color: rgba(0, 0, 0, 0.87) !important;
  color: var(--mdc-theme-text-primary-on-primary-light, rgba(0, 0, 0, 0.87)) !important; }

.lmdc-theme--text-secondary-on-primary-light {
  /* @alternate */
  color: rgba(0, 0, 0, 0.54) !important;
  color: var(--mdc-theme-text-secondary-on-primary-light, rgba(0, 0, 0, 0.54)) !important; }

.lmdc-theme--text-hint-on-primary-light {
  /* @alternate */
  color: rgba(0, 0, 0, 0.38) !important;
  color: var(--mdc-theme-text-hint-on-primary-light, rgba(0, 0, 0, 0.38)) !important; }

.lmdc-theme--text-disabled-on-primary-light {
  /* @alternate */
  color: rgba(0, 0, 0, 0.38) !important;
  color: var(--mdc-theme-text-disabled-on-primary-light, rgba(0, 0, 0, 0.38)) !important; }

.lmdc-theme--text-icon-on-primary-light {
  /* @alternate */
  color: rgba(0, 0, 0, 0.38) !important;
  color: var(--mdc-theme-text-icon-on-primary-light, rgba(0, 0, 0, 0.38)) !important; }

.lmdc-theme--text-primary-on-primary-dark {
  /* @alternate */
  color: white !important;
  color: var(--mdc-theme-text-primary-on-primary-dark, white) !important; }

.lmdc-theme--text-secondary-on-primary-dark {
  /* @alternate */
  color: rgba(255, 255, 255, 0.7) !important;
  color: var(--mdc-theme-text-secondary-on-primary-dark, rgba(255, 255, 255, 0.7)) !important; }

.lmdc-theme--text-hint-on-primary-dark {
  /* @alternate */
  color: rgba(255, 255, 255, 0.5) !important;
  color: var(--mdc-theme-text-hint-on-primary-dark, rgba(255, 255, 255, 0.5)) !important; }

.lmdc-theme--text-disabled-on-primary-dark {
  /* @alternate */
  color: rgba(255, 255, 255, 0.5) !important;
  color: var(--mdc-theme-text-disabled-on-primary-dark, rgba(255, 255, 255, 0.5)) !important; }

.lmdc-theme--text-icon-on-primary-dark {
  /* @alternate */
  color: rgba(255, 255, 255, 0.5) !important;
  color: var(--mdc-theme-text-icon-on-primary-dark, rgba(255, 255, 255, 0.5)) !important; }

.lmdc-theme--text-primary-on-secondary {
  /* @alternate */
  color: white !important;
  color: var(--mdc-theme-text-primary-on-secondary, white) !important; }

.lmdc-theme--text-secondary-on-secondary {
  /* @alternate */
  color: rgba(255, 255, 255, 0.7) !important;
  color: var(--mdc-theme-text-secondary-on-secondary, rgba(255, 255, 255, 0.7)) !important; }

.lmdc-theme--text-hint-on-secondary {
  /* @alternate */
  color: rgba(255, 255, 255, 0.5) !important;
  color: var(--mdc-theme-text-hint-on-secondary, rgba(255, 255, 255, 0.5)) !important; }

.lmdc-theme--text-disabled-on-secondary {
  /* @alternate */
  color: rgba(255, 255, 255, 0.5) !important;
  color: var(--mdc-theme-text-disabled-on-secondary, rgba(255, 255, 255, 0.5)) !important; }

.lmdc-theme--text-icon-on-secondary {
  /* @alternate */
  color: rgba(255, 255, 255, 0.5) !important;
  color: var(--mdc-theme-text-icon-on-secondary, rgba(255, 255, 255, 0.5)) !important; }

.lmdc-theme--text-primary-on-secondary-light {
  /* @alternate */
  color: rgba(0, 0, 0, 0.87) !important;
  color: var(--mdc-theme-text-primary-on-secondary-light, rgba(0, 0, 0, 0.87)) !important; }

.lmdc-theme--text-secondary-on-secondary-light {
  /* @alternate */
  color: rgba(0, 0, 0, 0.54) !important;
  color: var(--mdc-theme-text-secondary-on-secondary-light, rgba(0, 0, 0, 0.54)) !important; }

.lmdc-theme--text-hint-on-secondary-light {
  /* @alternate */
  color: rgba(0, 0, 0, 0.38) !important;
  color: var(--mdc-theme-text-hint-on-secondary-light, rgba(0, 0, 0, 0.38)) !important; }

.lmdc-theme--text-disabled-on-secondary-light {
  /* @alternate */
  color: rgba(0, 0, 0, 0.38) !important;
  color: var(--mdc-theme-text-disabled-on-secondary-light, rgba(0, 0, 0, 0.38)) !important; }

.lmdc-theme--text-icon-on-secondary-light {
  /* @alternate */
  color: rgba(0, 0, 0, 0.38) !important;
  color: var(--mdc-theme-text-icon-on-secondary-light, rgba(0, 0, 0, 0.38)) !important; }

.lmdc-theme--text-primary-on-secondary-dark {
  /* @alternate */
  color: white !important;
  color: var(--mdc-theme-text-primary-on-secondary-dark, white) !important; }

.lmdc-theme--text-secondary-on-secondary-dark {
  /* @alternate */
  color: rgba(255, 255, 255, 0.7) !important;
  color: var(--mdc-theme-text-secondary-on-secondary-dark, rgba(255, 255, 255, 0.7)) !important; }

.lmdc-theme--text-hint-on-secondary-dark {
  /* @alternate */
  color: rgba(255, 255, 255, 0.5) !important;
  color: var(--mdc-theme-text-hint-on-secondary-dark, rgba(255, 255, 255, 0.5)) !important; }

.lmdc-theme--text-disabled-on-secondary-dark {
  /* @alternate */
  color: rgba(255, 255, 255, 0.5) !important;
  color: var(--mdc-theme-text-disabled-on-secondary-dark, rgba(255, 255, 255, 0.5)) !important; }

.lmdc-theme--text-icon-on-secondary-dark {
  /* @alternate */
  color: rgba(255, 255, 255, 0.5) !important;
  color: var(--mdc-theme-text-icon-on-secondary-dark, rgba(255, 255, 255, 0.5)) !important; }

.lmdc-theme--text-primary-on-background {
  /* @alternate */
  color: rgba(0, 0, 0, 0.87) !important;
  color: var(--mdc-theme-text-primary-on-background, rgba(0, 0, 0, 0.87)) !important; }

.lmdc-theme--text-secondary-on-background {
  /* @alternate */
  color: rgba(0, 0, 0, 0.54) !important;
  color: var(--mdc-theme-text-secondary-on-background, rgba(0, 0, 0, 0.54)) !important; }

.lmdc-theme--text-hint-on-background {
  /* @alternate */
  color: rgba(0, 0, 0, 0.38) !important;
  color: var(--mdc-theme-text-hint-on-background, rgba(0, 0, 0, 0.38)) !important; }

.lmdc-theme--text-disabled-on-background {
  /* @alternate */
  color: rgba(0, 0, 0, 0.38) !important;
  color: var(--mdc-theme-text-disabled-on-background, rgba(0, 0, 0, 0.38)) !important; }

.lmdc-theme--text-icon-on-background {
  /* @alternate */
  color: rgba(0, 0, 0, 0.38) !important;
  color: var(--mdc-theme-text-icon-on-background, rgba(0, 0, 0, 0.38)) !important; }

.lmdc-theme--text-primary-on-light {
  /* @alternate */
  color: rgba(0, 0, 0, 0.87) !important;
  color: var(--mdc-theme-text-primary-on-light, rgba(0, 0, 0, 0.87)) !important; }

.lmdc-theme--text-secondary-on-light {
  /* @alternate */
  color: rgba(0, 0, 0, 0.54) !important;
  color: var(--mdc-theme-text-secondary-on-light, rgba(0, 0, 0, 0.54)) !important; }

.lmdc-theme--text-hint-on-light {
  /* @alternate */
  color: rgba(0, 0, 0, 0.38) !important;
  color: var(--mdc-theme-text-hint-on-light, rgba(0, 0, 0, 0.38)) !important; }

.lmdc-theme--text-disabled-on-light {
  /* @alternate */
  color: rgba(0, 0, 0, 0.38) !important;
  color: var(--mdc-theme-text-disabled-on-light, rgba(0, 0, 0, 0.38)) !important; }

.lmdc-theme--text-icon-on-light {
  /* @alternate */
  color: rgba(0, 0, 0, 0.38) !important;
  color: var(--mdc-theme-text-icon-on-light, rgba(0, 0, 0, 0.38)) !important; }

.lmdc-theme--text-primary-on-dark {
  /* @alternate */
  color: white !important;
  color: var(--mdc-theme-text-primary-on-dark, white) !important; }

.lmdc-theme--text-secondary-on-dark {
  /* @alternate */
  color: rgba(255, 255, 255, 0.7) !important;
  color: var(--mdc-theme-text-secondary-on-dark, rgba(255, 255, 255, 0.7)) !important; }

.lmdc-theme--text-hint-on-dark {
  /* @alternate */
  color: rgba(255, 255, 255, 0.5) !important;
  color: var(--mdc-theme-text-hint-on-dark, rgba(255, 255, 255, 0.5)) !important; }

.lmdc-theme--text-disabled-on-dark {
  /* @alternate */
  color: rgba(255, 255, 255, 0.5) !important;
  color: var(--mdc-theme-text-disabled-on-dark, rgba(255, 255, 255, 0.5)) !important; }

.lmdc-theme--text-icon-on-dark {
  /* @alternate */
  color: rgba(255, 255, 255, 0.5) !important;
  color: var(--mdc-theme-text-icon-on-dark, rgba(255, 255, 255, 0.5)) !important; }

.lmdc-theme--primary-bg {
  /* @alternate */
  background-color: #6200ee !important;
  background-color: var(--mdc-theme-primary, #6200ee) !important; }

.lmdc-theme--primary-light-bg {
  /* @alternate */
  background-color: #b37eff !important;
  background-color: var(--mdc-theme-primary-light, #b37eff) !important; }

.lmdc-theme--primary-dark-bg {
  /* @alternate */
  background-color: #8936ff !important;
  background-color: var(--mdc-theme-primary-dark, #8936ff) !important; }

.lmdc-theme--secondary-bg {
  /* @alternate */
  background-color: #018786 !important;
  background-color: var(--mdc-theme-secondary, #018786) !important; }

.lmdc-theme--secondary-light-bg {
  /* @alternate */
  background-color: #02cecc !important;
  background-color: var(--mdc-theme-secondary-light, #02cecc) !important; }

.lmdc-theme--secondary-dark-bg {
  /* @alternate */
  background-color: #004040 !important;
  background-color: var(--mdc-theme-secondary-dark, #004040) !important; }

/**
 * The css property used for elevation. In most cases this should not be changed. It is exposed
 * as a variable for abstraction / easy use when needing to reference the property directly, for
 * example in a `will-change` rule.
 */
/**
 * The default duration value for elevation transitions.
 */
/**
 * The default easing value for elevation transitions.
 */
/**
 * Applies the correct CSS rules to an element to give it the elevation specified by $z-value.
 * The $z-value must be between 0 and 24.
 * If $color has an alpha channel, it will be ignored and overridden. To increase the opacity of the shadow, use
 * $opacity-boost.
 */
/**
 * Returns a string that can be used as the value for a `transition` property for elevation.
 * Calling this function directly is useful in situations where a component needs to transition
 * more than one property.
 *
 * ```scss
 * .foo {
 *   transition: mdc-elevation-transition-value(), opacity 100ms ease;
 *   will-change: $mdc-elevation-property, opacity;
 * }
 * ```
 */
/**
 * Creates a rule that will be applied when an MDC Web component is within the context of an RTL layout.
 *
 * Usage Example:
 * ```scss
 * .mdc-foo {
 *   position: absolute;
 *   left: 0;
 *
 *   @include mdc-rtl {
 *     left: auto;
 *     right: 0;
 *   }
 *
 *   &__bar {
 *     margin-left: 4px;
 *     @include mdc-rtl(".mdc-foo") {
 *       margin-left: auto;
 *       margin-right: 4px;
 *     }
 *   }
 * }
 *
 * .mdc-foo--mod {
 *   padding-left: 4px;
 *
 *   @include mdc-rtl {
 *     padding-left: auto;
 *     padding-right: 4px;
 *   }
 * }
 * ```
 *
 * Note that this works by checking for [dir="rtl"] on an ancestor element. While this will work
 * in most cases, it will in some cases lead to false negatives, e.g.
 *
 * ```html
 * <html dir="rtl">
 *   <!-- ... -->
 *   <div dir="ltr">
 *     <div class="mdc-foo">Styled incorrectly as RTL!</div>
 *   </div>
 * </html>
 * ```
 *
 * In the future, selectors such as :dir (http://mdn.io/:dir) will help us mitigate this.
 */
/**
 * Takes a base box-model property - e.g. margin / border / padding - along with a default
 * direction and value, and emits rules which apply the value to the
 * "<base-property>-<default-direction>" property by default, but flips the direction
 * when within an RTL context.
 *
 * For example:
 *
 * ```scss
 * .mdc-foo {
 *   @include mdc-rtl-reflexive-box(margin, left, 8px);
 * }
 * ```
 * is equivalent to:
 *
 * ```scss
 * .mdc-foo {
 *   margin-left: 8px;
 *
 *   @include mdc-rtl {
 *     margin-right: 8px;
 *     margin-left: 0;
 *   }
 * }
 * ```
 * whereas:
 *
 * ```scss
 * .mdc-foo {
 *   @include mdc-rtl-reflexive-box(margin, right, 8px);
 * }
 * ```
 * is equivalent to:
 *
 * ```scss
 * .mdc-foo {
 *   margin-right: 8px;
 *
 *   @include mdc-rtl {
 *     margin-right: 0;
 *     margin-left: 8px;
 *   }
 * }
 * ```
 *
 * You can also pass a 4th optional $root-selector argument which will be forwarded to `mdc-rtl`,
 * e.g. `@include mdc-rtl-reflexive-box(margin, left, 8px, ".mdc-component")`.
 *
 * Note that this function will always zero out the original value in an RTL context. If you're
 * trying to flip the values, use mdc-rtl-reflexive-property().
 */
/**
 * Takes a base property and emits rules that assign <base-property>-left to <left-value> and
 * <base-property>-right to <right-value> in a LTR context, and vice versa in a RTL context.
 * For example:
 *
 * ```scss
 * .mdc-foo {
 *   @include mdc-rtl-reflexive-property(margin, auto, 12px);
 * }
 * ```
 * is equivalent to:
 *
 * ```scss
 * .mdc-foo {
 *   margin-left: auto;
 *   margin-right: 12px;
 *
 *   @include mdc-rtl {
 *     margin-left: 12px;
 *     margin-right: auto;
 *   }
 * }
 * ```
 *
 * A 4th optional $root-selector argument can be given, which will be passed to `mdc-rtl`.
 */
/**
 * Takes an argument specifying a horizontal position property (either "left" or "right") as well
 * as a value, and applies that value to the specified position in a LTR context, and flips it in a
 * RTL context. For example:
 *
 * ```scss
 * .mdc-foo {
 *   @include mdc-rtl-reflexive-position(left, 0);
 *   position: absolute;
 * }
 * ```
 * is equivalent to:
 *
 * ```scss
 *  .mdc-foo {
 *    position: absolute;
 *    left: 0;
 *    right: initial;
 *
 *    @include mdc-rtl {
 *      right: 0;
 *      left: initial;
 *    }
 *  }
 * ```
 * An optional third $root-selector argument may also be given, which is passed to `mdc-rtl`.
 */
/* TODO(sgomes): Figure out what to do about desktop font sizes. */
/* TODO(sgomes): Figure out what to do about i18n and i18n font sizes. */
.lmdc-toolbar {
  /* @alternate */
  background-color: #6200ee;
  background-color: var(--mdc-theme-primary, #6200ee);
  color: white;
  display: flex;
  position: relative;
  flex-direction: column;
  justify-content: space-between;
  box-sizing: border-box;
  width: 100%; }
  .lmdc-toolbar .lmdc-toolbar__icon {
    color: white; }
    .lmdc-toolbar .lmdc-toolbar__icon::before, .lmdc-toolbar .lmdc-toolbar__icon::after {
      background-color: white; }
    .lmdc-toolbar .lmdc-toolbar__icon:hover::before {
      opacity: 0.08; }
    .lmdc-toolbar .lmdc-toolbar__icon:not(.lmdc-ripple-upgraded):focus::before, .lmdc-toolbar .lmdc-toolbar__icon.lmdc-ripple-upgraded--background-focused::before {
      transition-duration: 75ms;
      opacity: 0.24; }
    .lmdc-toolbar .lmdc-toolbar__icon:not(.lmdc-ripple-upgraded)::after {
      transition: opacity 150ms linear; }
    .lmdc-toolbar .lmdc-toolbar__icon:not(.lmdc-ripple-upgraded):active::after {
      transition-duration: 75ms;
      opacity: 0.32; }
    .lmdc-toolbar .lmdc-toolbar__icon.lmdc-ripple-upgraded {
      --mdc-ripple-fg-opacity: $opacity; }
  .lmdc-toolbar__row {
    display: flex;
    position: relative;
    align-items: center;
    box-sizing: border-box;
    width: 100%;
    height: auto;
    min-height: 64px; }
    @media (max-width: 959px) and (orientation: landscape) {
      .lmdc-toolbar__row {
        min-height: 48px; } }
    @media (max-width: 599px) {
      .lmdc-toolbar__row {
        min-height: 56px; } }
  .lmdc-toolbar__section {
    display: inline-flex;
    flex: 1;
    align-items: start;
    justify-content: center;
    box-sizing: border-box;
    min-width: 0;
    height: 100%;
    padding: 8px;
    z-index: 1; }
    @media (max-width: 959px) and (orientation: landscape) {
      .lmdc-toolbar__section {
        padding: 0 0; } }
    @media (max-width: 599px) {
      .lmdc-toolbar__section {
        padding: 4px 0; } }
    .lmdc-toolbar__section--align-start {
      padding-left: 12px;
      padding-right: 0;
      justify-content: flex-start;
      order: -1; }
      [dir="rtl"] .lmdc-toolbar__section--align-start, .lmdc-toolbar__section--align-start[dir="rtl"] {
        padding-left: 0;
        padding-right: 12px; }
      @media (max-width: 959px) and (orientation: landscape) {
        .lmdc-toolbar__section--align-start {
          padding-left: 4px;
          padding-right: 0; }
          [dir="rtl"] .lmdc-toolbar__section--align-start, .lmdc-toolbar__section--align-start[dir="rtl"] {
            padding-left: 0;
            padding-right: 4px; } }
      @media (max-width: 599px) {
        .lmdc-toolbar__section--align-start {
          padding-left: 4px;
          padding-right: 0; }
          [dir="rtl"] .lmdc-toolbar__section--align-start, .lmdc-toolbar__section--align-start[dir="rtl"] {
            padding-left: 0;
            padding-right: 4px; } }
    .lmdc-toolbar__section--align-end {
      padding-left: 0;
      padding-right: 12px;
      justify-content: flex-end;
      order: 1; }
      [dir="rtl"] .lmdc-toolbar__section--align-end, .lmdc-toolbar__section--align-end[dir="rtl"] {
        padding-left: 12px;
        padding-right: 0; }
      @media (max-width: 959px) and (orientation: landscape) {
        .lmdc-toolbar__section--align-end {
          padding-left: 0;
          padding-right: 4px; }
          [dir="rtl"] .lmdc-toolbar__section--align-end, .lmdc-toolbar__section--align-end[dir="rtl"] {
            padding-left: 4px;
            padding-right: 0; } }
      @media (max-width: 599px) {
        .lmdc-toolbar__section--align-end {
          padding-left: 0;
          padding-right: 4px; }
          [dir="rtl"] .lmdc-toolbar__section--align-end, .lmdc-toolbar__section--align-end[dir="rtl"] {
            padding-left: 4px;
            padding-right: 0; } }
  .lmdc-toolbar__title {
    font-family: Roboto, sans-serif;
    -moz-osx-font-smoothing: grayscale;
    -webkit-font-smoothing: antialiased;
    font-size: 1.25rem;
    line-height: 2rem;
    font-weight: 500;
    letter-spacing: 0.02em;
    text-decoration: inherit;
    text-transform: inherit;
    text-overflow: ellipsis;
    white-space: nowrap;
    overflow: hidden;
    margin-left: 24px;
    margin-right: 0;
    align-self: center;
    padding: 12px 0;
    line-height: 1.5rem;
    z-index: 1; }
    [dir="rtl"] .lmdc-toolbar__title, .lmdc-toolbar__title[dir="rtl"] {
      margin-left: 0;
      margin-right: 24px; }
  .lmdc-toolbar__icon, .lmdc-toolbar__menu-icon {
    --mdc-ripple-fg-size: 0;
    --mdc-ripple-left: 0;
    --mdc-ripple-top: 0;
    --mdc-ripple-fg-scale: 1;
    --mdc-ripple-fg-translate-end: 0;
    --mdc-ripple-fg-translate-start: 0;
    -webkit-tap-highlight-color: rgba(0, 0, 0, 0);
    will-change: transform, opacity;
    display: flex;
    position: relative;
    align-items: start;
    justify-content: center;
    width: 24px;
    height: 24px;
    padding: 12px;
    border: none;
    outline: none;
    background-color: transparent;
    color: inherit;
    text-decoration: none;
    cursor: pointer; }
    .lmdc-toolbar__icon::before, .lmdc-toolbar__icon::after, .lmdc-toolbar__menu-icon::before, .lmdc-toolbar__menu-icon::after {
      position: absolute;
      border-radius: 50%;
      opacity: 0;
      pointer-events: none;
      content: ""; }
    .lmdc-toolbar__icon::before, .lmdc-toolbar__menu-icon::before {
      transition: opacity 15ms linear;
      z-index: 1; }
    .lmdc-toolbar__icon.lmdc-ripple-upgraded::before, .lmdc-toolbar__menu-icon.lmdc-ripple-upgraded::before {
      -webkit-transform: scale(var(--mdc-ripple-fg-scale, 1));
              transform: scale(var(--mdc-ripple-fg-scale, 1)); }
    .lmdc-toolbar__icon.lmdc-ripple-upgraded::after, .lmdc-toolbar__menu-icon.lmdc-ripple-upgraded::after {
      top: 0;
      left: 0;
      -webkit-transform: scale(0);
              transform: scale(0);
      -webkit-transform-origin: center center;
              transform-origin: center center; }
    .lmdc-toolbar__icon.lmdc-ripple-upgraded--unbounded::after, .lmdc-toolbar__menu-icon.lmdc-ripple-upgraded--unbounded::after {
      top: var(--mdc-ripple-top, 0);
      left: var(--mdc-ripple-left, 0); }
    .lmdc-toolbar__icon.lmdc-ripple-upgraded--foreground-activation::after, .lmdc-toolbar__menu-icon.lmdc-ripple-upgraded--foreground-activation::after {
      -webkit-animation: 225ms mdc-ripple-fg-radius-in forwards, 75ms mdc-ripple-fg-opacity-in forwards;
              animation: 225ms mdc-ripple-fg-radius-in forwards, 75ms mdc-ripple-fg-opacity-in forwards; }
    .lmdc-toolbar__icon.lmdc-ripple-upgraded--foreground-deactivation::after, .lmdc-toolbar__menu-icon.lmdc-ripple-upgraded--foreground-deactivation::after {
      -webkit-animation: 150ms mdc-ripple-fg-opacity-out;
              animation: 150ms mdc-ripple-fg-opacity-out;
      -webkit-transform: translate(var(--mdc-ripple-fg-translate-end, 0)) scale(var(--mdc-ripple-fg-scale, 1));
              transform: translate(var(--mdc-ripple-fg-translate-end, 0)) scale(var(--mdc-ripple-fg-scale, 1)); }
    .lmdc-toolbar__icon::before, .lmdc-toolbar__icon::after, .lmdc-toolbar__menu-icon::before, .lmdc-toolbar__menu-icon::after {
      top: calc(50% - 50%);
      left: calc(50% - 50%);
      width: 100%;
      height: 100%; }
    .lmdc-toolbar__icon.lmdc-ripple-upgraded::before, .lmdc-toolbar__icon.lmdc-ripple-upgraded::after, .lmdc-toolbar__menu-icon.lmdc-ripple-upgraded::before, .lmdc-toolbar__menu-icon.lmdc-ripple-upgraded::after {
      top: var(--mdc-ripple-top, calc(50% - 50%));
      left: var(--mdc-ripple-left, calc(50% - 50%));
      width: var(--mdc-ripple-fg-size, 100%);
      height: var(--mdc-ripple-fg-size, 100%); }
    .lmdc-toolbar__icon.lmdc-ripple-upgraded::after, .lmdc-toolbar__menu-icon.lmdc-ripple-upgraded::after {
      width: var(--mdc-ripple-fg-size, 100%);
      height: var(--mdc-ripple-fg-size, 100%); }

.lmdc-toolbar__menu-icon + .lmdc-toolbar__title {
  margin-left: 8px;
  margin-right: 0; }
  [dir="rtl"] .lmdc-toolbar__menu-icon + .lmdc-toolbar__title, .lmdc-toolbar__menu-icon + .lmdc-toolbar__title[dir="rtl"] {
    margin-left: 0;
    margin-right: 8px; }

@media (max-width: 599px) {
  .lmdc-toolbar__title {
    margin-left: 16px;
    margin-right: 0; }
    [dir="rtl"] .lmdc-toolbar__title, .lmdc-toolbar__title[dir="rtl"] {
      margin-left: 0;
      margin-right: 16px; } }

.lmdc-toolbar--fixed {
  box-shadow: 0px 2px 4px -1px rgba(0, 0, 0, 0.2), 0px 4px 5px 0px rgba(0, 0, 0, 0.14), 0px 1px 10px 0px rgba(0, 0, 0, 0.12);
  position: fixed;
  top: 0;
  left: 0;
  z-index: 4; }

.lmdc-toolbar--flexible {
  --mdc-toolbar-ratio-to-extend-flexible: 4; }
  .lmdc-toolbar--flexible .lmdc-toolbar__row:first-child {
    height: 256px;
    height: calc(64px * var(--mdc-toolbar-ratio-to-extend-flexible, 4)); }
    @media (max-width: 599px) {
      .lmdc-toolbar--flexible .lmdc-toolbar__row:first-child {
        height: 224px;
        height: calc(56px * var(--mdc-toolbar-ratio-to-extend-flexible, 4)); } }
    .lmdc-toolbar--flexible .lmdc-toolbar__row:first-child::after {
      position: absolute;
      content: ""; }
  .lmdc-toolbar--flexible-default-behavior .lmdc-toolbar__title {
    font-family: Roboto, sans-serif;
    -moz-osx-font-smoothing: grayscale;
    -webkit-font-smoothing: antialiased;
    font-size: 2.125rem;
    line-height: 2.5rem;
    font-weight: 400;
    letter-spacing: normal;
    text-decoration: inherit;
    text-transform: inherit;
    align-self: flex-end;
    line-height: 1.5rem; }
  .lmdc-toolbar--flexible-default-behavior .lmdc-toolbar__row:first-child::after {
    top: 0;
    left: 0;
    width: 100%;
    height: 100%;
    transition: opacity .2s ease;
    opacity: 1; }
  .lmdc-toolbar--flexible-default-behavior.lmdc-toolbar--flexible-space-minimized .lmdc-toolbar__row:first-child::after {
    opacity: 0; }
  .lmdc-toolbar--flexible-default-behavior.lmdc-toolbar--flexible-space-minimized .lmdc-toolbar__title {
    font-weight: 500; }

.lmdc-toolbar--waterfall.lmdc-toolbar--fixed {
  box-shadow: 0px 0px 0px 0px rgba(0, 0, 0, 0.2), 0px 0px 0px 0px rgba(0, 0, 0, 0.14), 0px 0px 0px 0px rgba(0, 0, 0, 0.12);
  transition: box-shadow 280ms cubic-bezier(0.4, 0, 0.2, 1);
  will-change: box-shadow; }
  .lmdc-toolbar--waterfall.lmdc-toolbar--fixed.lmdc-toolbar--flexible-space-minimized {
    box-shadow: 0px 2px 4px -1px rgba(0, 0, 0, 0.2), 0px 4px 5px 0px rgba(0, 0, 0, 0.14), 0px 1px 10px 0px rgba(0, 0, 0, 0.12); }
  .lmdc-toolbar--waterfall.lmdc-toolbar--fixed.lmdc-toolbar--fixed-lastrow-only.lmdc-toolbar--flexible-space-minimized {
    box-shadow: 0px 0px 0px 0px rgba(0, 0, 0, 0.2), 0px 0px 0px 0px rgba(0, 0, 0, 0.14), 0px 0px 0px 0px rgba(0, 0, 0, 0.12); }
  .lmdc-toolbar--waterfall.lmdc-toolbar--fixed.lmdc-toolbar--fixed-lastrow-only.lmdc-toolbar--fixed-at-last-row {
    box-shadow: 0px 2px 4px -1px rgba(0, 0, 0, 0.2), 0px 4px 5px 0px rgba(0, 0, 0, 0.14), 0px 1px 10px 0px rgba(0, 0, 0, 0.12); }

.lmdc-toolbar-fixed-adjust {
  margin-top: 64px; }
  @media (max-width: 959px) and (max-height: 599px) {
    .lmdc-toolbar-fixed-adjust {
      margin-top: 48px; } }
  @media (max-width: 599px) {
    .lmdc-toolbar-fixed-adjust {
      margin-top: 56px; } }

.lmdc-toolbar__section--shrink-to-fit {
  flex: none; }

/* TODO(sgomes): Figure out what to do about desktop font sizes. */
/* TODO(sgomes): Figure out what to do about i18n and i18n font sizes. */
/* TODO(sgomes): Figure out what to do about desktop font sizes. */
/* TODO(sgomes): Figure out what to do about i18n and i18n font sizes. */
.lmdc-typography {
  font-family: Roboto, sans-serif;
  -moz-osx-font-smoothing: grayscale;
  -webkit-font-smoothing: antialiased; }

.lmdc-typography--display4 {
  font-family: Roboto, sans-serif;
  -moz-osx-font-smoothing: grayscale;
  -webkit-font-smoothing: antialiased;
  font-size: 7rem;
  line-height: 7rem;
  font-weight: 300;
  letter-spacing: -0.04em;
  text-decoration: inherit;
  text-transform: inherit; }

.lmdc-typography--adjust-margin.lmdc-typography--display4 {
  margin: -1rem 0 3.5rem -0.085em; }

.lmdc-typography--display3 {
  font-family: Roboto, sans-serif;
  -moz-osx-font-smoothing: grayscale;
  -webkit-font-smoothing: antialiased;
  font-size: 3.5rem;
  line-height: 3.5rem;
  font-weight: 400;
  letter-spacing: -0.02em;
  text-decoration: inherit;
  text-transform: inherit; }

.lmdc-typography--adjust-margin.lmdc-typography--display3 {
  margin: -8px 0 64px -0.07em; }

.lmdc-typography--display2 {
  font-family: Roboto, sans-serif;
  -moz-osx-font-smoothing: grayscale;
  -webkit-font-smoothing: antialiased;
  font-size: 2.8125rem;
  line-height: 3rem;
  font-weight: 400;
  letter-spacing: normal;
  text-decoration: inherit;
  text-transform: inherit; }

.lmdc-typography--adjust-margin.lmdc-typography--display2 {
  margin: -0.5rem 0 4rem -0.07em; }

.lmdc-typography--display1 {
  font-family: Roboto, sans-serif;
  -moz-osx-font-smoothing: grayscale;
  -webkit-font-smoothing: antialiased;
  font-size: 2.125rem;
  line-height: 2.5rem;
  font-weight: 400;
  letter-spacing: normal;
  text-decoration: inherit;
  text-transform: inherit; }

.lmdc-typography--adjust-margin.lmdc-typography--display1 {
  margin: -0.5rem 0 4rem -0.07em; }

.lmdc-typography--headline {
  font-family: Roboto, sans-serif;
  -moz-osx-font-smoothing: grayscale;
  -webkit-font-smoothing: antialiased;
  font-size: 1.5rem;
  line-height: 2rem;
  font-weight: 400;
  letter-spacing: normal;
  text-decoration: inherit;
  text-transform: inherit; }

.lmdc-typography--adjust-margin.lmdc-typography--headline {
  margin: -0.5rem 0 1rem -0.06em; }

.lmdc-typography--title {
  font-family: Roboto, sans-serif;
  -moz-osx-font-smoothing: grayscale;
  -webkit-font-smoothing: antialiased;
  font-size: 1.25rem;
  line-height: 2rem;
  font-weight: 500;
  letter-spacing: 0.02em;
  text-decoration: inherit;
  text-transform: inherit; }

.lmdc-typography--adjust-margin.lmdc-typography--title {
  margin: -0.5rem 0 1rem -0.05em; }

.lmdc-typography--subheading2 {
  font-family: Roboto, sans-serif;
  -moz-osx-font-smoothing: grayscale;
  -webkit-font-smoothing: antialiased;
  font-size: 1rem;
  line-height: 1.75rem;
  font-weight: 400;
  letter-spacing: 0.04em;
  text-decoration: inherit;
  text-transform: inherit; }

.lmdc-typography--adjust-margin.lmdc-typography--subheading2 {
  margin: -0.5rem 0 1rem -0.06em; }

.lmdc-typography--subheading1 {
  font-family: Roboto, sans-serif;
  -moz-osx-font-smoothing: grayscale;
  -webkit-font-smoothing: antialiased;
  font-size: 0.938rem;
  line-height: 1.5rem;
  font-weight: 400;
  letter-spacing: 0.04em;
  text-decoration: inherit;
  text-transform: inherit; }

.lmdc-typography--adjust-margin.lmdc-typography--subheading1 {
  margin: -0.313rem 0 0.813rem -0.06em; }

.lmdc-typography--body2 {
  font-family: Roboto, sans-serif;
  -moz-osx-font-smoothing: grayscale;
  -webkit-font-smoothing: antialiased;
  font-size: 0.875rem;
  line-height: 1.5rem;
  font-weight: 500;
  letter-spacing: 0.04em;
  text-decoration: inherit;
  text-transform: inherit; }

.lmdc-typography--adjust-margin.lmdc-typography--body2 {
  margin: -0.25rem 0 0.75rem 0; }

.lmdc-typography--body1 {
  font-family: Roboto, sans-serif;
  -moz-osx-font-smoothing: grayscale;
  -webkit-font-smoothing: antialiased;
  font-size: 0.875rem;
  line-height: 1.25rem;
  font-weight: 400;
  letter-spacing: 0.04em;
  text-decoration: inherit;
  text-transform: inherit; }

.lmdc-typography--adjust-margin.lmdc-typography--body1 {
  margin: -0.25rem 0 0.75rem 0; }

.lmdc-typography--caption {
  font-family: Roboto, sans-serif;
  -moz-osx-font-smoothing: grayscale;
  -webkit-font-smoothing: antialiased;
  font-size: 0.75rem;
  line-height: 1.25rem;
  font-weight: 400;
  letter-spacing: 0.08em;
  text-decoration: inherit;
  text-transform: inherit; }

.lmdc-typography--adjust-margin.lmdc-typography--caption {
  margin: -0.5rem 0 1rem -0.04em; }

.lmdc-typography--button {
  font-family: Roboto, sans-serif;
  -moz-osx-font-smoothing: grayscale;
  -webkit-font-smoothing: antialiased;
  font-size: 0.875rem;
  line-height: 2.25rem;
  font-weight: 500;
  letter-spacing: 0.04em;
  text-decoration: none;
  text-transform: uppercase; }

.lmdc-typography--adjust-margin.lmdc-typography--button {
  margin: inherit; }
