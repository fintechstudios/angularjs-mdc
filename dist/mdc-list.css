@-webkit-keyframes mdc-ripple-fg-radius-in {
  from {
    -webkit-animation-timing-function: cubic-bezier(0.4, 0, 0.2, 1);
            animation-timing-function: cubic-bezier(0.4, 0, 0.2, 1);
    -webkit-transform: translate(var(--mdc-ripple-fg-translate-start, 0)) scale(1);
            transform: translate(var(--mdc-ripple-fg-translate-start, 0)) scale(1); }
  to {
    -webkit-transform: translate(var(--mdc-ripple-fg-translate-end, 0)) scale(var(--mdc-ripple-fg-scale, 1));
            transform: translate(var(--mdc-ripple-fg-translate-end, 0)) scale(var(--mdc-ripple-fg-scale, 1)); } }

@keyframes mdc-ripple-fg-radius-in {
  from {
    -webkit-animation-timing-function: cubic-bezier(0.4, 0, 0.2, 1);
            animation-timing-function: cubic-bezier(0.4, 0, 0.2, 1);
    -webkit-transform: translate(var(--mdc-ripple-fg-translate-start, 0)) scale(1);
            transform: translate(var(--mdc-ripple-fg-translate-start, 0)) scale(1); }
  to {
    -webkit-transform: translate(var(--mdc-ripple-fg-translate-end, 0)) scale(var(--mdc-ripple-fg-scale, 1));
            transform: translate(var(--mdc-ripple-fg-translate-end, 0)) scale(var(--mdc-ripple-fg-scale, 1)); } }

@-webkit-keyframes mdc-ripple-fg-opacity-in {
  from {
    -webkit-animation-timing-function: linear;
            animation-timing-function: linear;
    opacity: 0; }
  to {
    opacity: var(--mdc-ripple-fg-opacity, 0.16); } }

@keyframes mdc-ripple-fg-opacity-in {
  from {
    -webkit-animation-timing-function: linear;
            animation-timing-function: linear;
    opacity: 0; }
  to {
    opacity: var(--mdc-ripple-fg-opacity, 0.16); } }

@-webkit-keyframes mdc-ripple-fg-opacity-out {
  from {
    -webkit-animation-timing-function: linear;
            animation-timing-function: linear;
    opacity: var(--mdc-ripple-fg-opacity, 0.16); }
  to {
    opacity: 0; } }

@keyframes mdc-ripple-fg-opacity-out {
  from {
    -webkit-animation-timing-function: linear;
            animation-timing-function: linear;
    opacity: var(--mdc-ripple-fg-opacity, 0.16); }
  to {
    opacity: 0; } }

.lmdc-ripple-surface--test-edge-var-bug {
  --mdc-ripple-surface-test-edge-var: 1px solid #000;
  visibility: hidden; }
  .lmdc-ripple-surface--test-edge-var-bug::before {
    border: var(--mdc-ripple-surface-test-edge-var); }

/**
 * Creates a rule that will be applied when an MDC Web component is within the context of an RTL layout.
 *
 * Usage Example:
 * ```scss
 * .mdc-foo {
 *   position: absolute;
 *   left: 0;
 *
 *   @include mdc-rtl {
 *     left: auto;
 *     right: 0;
 *   }
 *
 *   &__bar {
 *     margin-left: 4px;
 *     @include mdc-rtl(".mdc-foo") {
 *       margin-left: auto;
 *       margin-right: 4px;
 *     }
 *   }
 * }
 *
 * .mdc-foo--mod {
 *   padding-left: 4px;
 *
 *   @include mdc-rtl {
 *     padding-left: auto;
 *     padding-right: 4px;
 *   }
 * }
 * ```
 *
 * Note that this works by checking for [dir="rtl"] on an ancestor element. While this will work
 * in most cases, it will in some cases lead to false negatives, e.g.
 *
 * ```html
 * <html dir="rtl">
 *   <!-- ... -->
 *   <div dir="ltr">
 *     <div class="mdc-foo">Styled incorrectly as RTL!</div>
 *   </div>
 * </html>
 * ```
 *
 * In the future, selectors such as :dir (http://mdn.io/:dir) will help us mitigate this.
 */
/**
 * Takes a base box-model property - e.g. margin / border / padding - along with a default
 * direction and value, and emits rules which apply the value to the
 * "<base-property>-<default-direction>" property by default, but flips the direction
 * when within an RTL context.
 *
 * For example:
 *
 * ```scss
 * .mdc-foo {
 *   @include mdc-rtl-reflexive-box(margin, left, 8px);
 * }
 * ```
 * is equivalent to:
 *
 * ```scss
 * .mdc-foo {
 *   margin-left: 8px;
 *
 *   @include mdc-rtl {
 *     margin-right: 8px;
 *     margin-left: 0;
 *   }
 * }
 * ```
 * whereas:
 *
 * ```scss
 * .mdc-foo {
 *   @include mdc-rtl-reflexive-box(margin, right, 8px);
 * }
 * ```
 * is equivalent to:
 *
 * ```scss
 * .mdc-foo {
 *   margin-right: 8px;
 *
 *   @include mdc-rtl {
 *     margin-right: 0;
 *     margin-left: 8px;
 *   }
 * }
 * ```
 *
 * You can also pass a 4th optional $root-selector argument which will be forwarded to `mdc-rtl`,
 * e.g. `@include mdc-rtl-reflexive-box(margin, left, 8px, ".mdc-component")`.
 *
 * Note that this function will always zero out the original value in an RTL context. If you're
 * trying to flip the values, use mdc-rtl-reflexive-property().
 */
/**
 * Takes a base property and emits rules that assign <base-property>-left to <left-value> and
 * <base-property>-right to <right-value> in a LTR context, and vice versa in a RTL context.
 * For example:
 *
 * ```scss
 * .mdc-foo {
 *   @include mdc-rtl-reflexive-property(margin, auto, 12px);
 * }
 * ```
 * is equivalent to:
 *
 * ```scss
 * .mdc-foo {
 *   margin-left: auto;
 *   margin-right: 12px;
 *
 *   @include mdc-rtl {
 *     margin-left: 12px;
 *     margin-right: auto;
 *   }
 * }
 * ```
 *
 * A 4th optional $root-selector argument can be given, which will be passed to `mdc-rtl`.
 */
/**
 * Takes an argument specifying a horizontal position property (either "left" or "right") as well
 * as a value, and applies that value to the specified position in a LTR context, and flips it in a
 * RTL context. For example:
 *
 * ```scss
 * .mdc-foo {
 *   @include mdc-rtl-reflexive-position(left, 0);
 *   position: absolute;
 * }
 * ```
 * is equivalent to:
 *
 * ```scss
 *  .mdc-foo {
 *    position: absolute;
 *    left: 0;
 *    right: initial;
 *
 *    @include mdc-rtl {
 *      right: 0;
 *      left: initial;
 *    }
 *  }
 * ```
 * An optional third $root-selector argument may also be given, which is passed to `mdc-rtl`.
 */
/* TODO(sgomes): Figure out what to do about desktop font sizes. */
/* TODO(sgomes): Figure out what to do about i18n and i18n font sizes. */
/* TODO(sgomes): Figure out what to do about desktop font sizes. */
/* TODO(sgomes): Figure out what to do about i18n and i18n font sizes. */
/**
 * Creates a rule that will be applied when an MDC Web component is within the context of an RTL layout.
 *
 * Usage Example:
 * ```scss
 * .mdc-foo {
 *   position: absolute;
 *   left: 0;
 *
 *   @include mdc-rtl {
 *     left: auto;
 *     right: 0;
 *   }
 *
 *   &__bar {
 *     margin-left: 4px;
 *     @include mdc-rtl(".mdc-foo") {
 *       margin-left: auto;
 *       margin-right: 4px;
 *     }
 *   }
 * }
 *
 * .mdc-foo--mod {
 *   padding-left: 4px;
 *
 *   @include mdc-rtl {
 *     padding-left: auto;
 *     padding-right: 4px;
 *   }
 * }
 * ```
 *
 * Note that this works by checking for [dir="rtl"] on an ancestor element. While this will work
 * in most cases, it will in some cases lead to false negatives, e.g.
 *
 * ```html
 * <html dir="rtl">
 *   <!-- ... -->
 *   <div dir="ltr">
 *     <div class="mdc-foo">Styled incorrectly as RTL!</div>
 *   </div>
 * </html>
 * ```
 *
 * In the future, selectors such as :dir (http://mdn.io/:dir) will help us mitigate this.
 */
/**
 * Takes a base box-model property - e.g. margin / border / padding - along with a default
 * direction and value, and emits rules which apply the value to the
 * "<base-property>-<default-direction>" property by default, but flips the direction
 * when within an RTL context.
 *
 * For example:
 *
 * ```scss
 * .mdc-foo {
 *   @include mdc-rtl-reflexive-box(margin, left, 8px);
 * }
 * ```
 * is equivalent to:
 *
 * ```scss
 * .mdc-foo {
 *   margin-left: 8px;
 *
 *   @include mdc-rtl {
 *     margin-right: 8px;
 *     margin-left: 0;
 *   }
 * }
 * ```
 * whereas:
 *
 * ```scss
 * .mdc-foo {
 *   @include mdc-rtl-reflexive-box(margin, right, 8px);
 * }
 * ```
 * is equivalent to:
 *
 * ```scss
 * .mdc-foo {
 *   margin-right: 8px;
 *
 *   @include mdc-rtl {
 *     margin-right: 0;
 *     margin-left: 8px;
 *   }
 * }
 * ```
 *
 * You can also pass a 4th optional $root-selector argument which will be forwarded to `mdc-rtl`,
 * e.g. `@include mdc-rtl-reflexive-box(margin, left, 8px, ".mdc-component")`.
 *
 * Note that this function will always zero out the original value in an RTL context. If you're
 * trying to flip the values, use mdc-rtl-reflexive-property().
 */
/**
 * Takes a base property and emits rules that assign <base-property>-left to <left-value> and
 * <base-property>-right to <right-value> in a LTR context, and vice versa in a RTL context.
 * For example:
 *
 * ```scss
 * .mdc-foo {
 *   @include mdc-rtl-reflexive-property(margin, auto, 12px);
 * }
 * ```
 * is equivalent to:
 *
 * ```scss
 * .mdc-foo {
 *   margin-left: auto;
 *   margin-right: 12px;
 *
 *   @include mdc-rtl {
 *     margin-left: 12px;
 *     margin-right: auto;
 *   }
 * }
 * ```
 *
 * A 4th optional $root-selector argument can be given, which will be passed to `mdc-rtl`.
 */
/**
 * Takes an argument specifying a horizontal position property (either "left" or "right") as well
 * as a value, and applies that value to the specified position in a LTR context, and flips it in a
 * RTL context. For example:
 *
 * ```scss
 * .mdc-foo {
 *   @include mdc-rtl-reflexive-position(left, 0);
 *   position: absolute;
 * }
 * ```
 * is equivalent to:
 *
 * ```scss
 *  .mdc-foo {
 *    position: absolute;
 *    left: 0;
 *    right: initial;
 *
 *    @include mdc-rtl {
 *      right: 0;
 *      left: initial;
 *    }
 *  }
 * ```
 * An optional third $root-selector argument may also be given, which is passed to `mdc-rtl`.
 */
.lmdc-list {
  font-family: Roboto, sans-serif;
  -moz-osx-font-smoothing: grayscale;
  -webkit-font-smoothing: antialiased;
  font-size: 1rem;
  line-height: 1.75rem;
  font-weight: 400;
  letter-spacing: 0.04em;
  text-decoration: inherit;
  text-transform: inherit;
  /* @alternate */
  color: rgba(0, 0, 0, 0.87);
  color: var(--mdc-theme-text-primary-on-background, rgba(0, 0, 0, 0.87));
  margin: 0;
  padding: 8px 0;
  line-height: 1.5rem;
  list-style-type: none; }

.lmdc-list-item__secondary-text {
  /* @alternate */
  color: rgba(0, 0, 0, 0.54);
  color: var(--mdc-theme-text-secondary-on-background, rgba(0, 0, 0, 0.54)); }

.lmdc-list-item__graphic {
  background-color: transparent; }

.lmdc-list-item__graphic {
  /* @alternate */
  color: rgba(0, 0, 0, 0.38);
  color: var(--mdc-theme-text-icon-on-background, rgba(0, 0, 0, 0.38)); }

.lmdc-list-item__meta {
  /* @alternate */
  color: rgba(0, 0, 0, 0.38);
  color: var(--mdc-theme-text-hint-on-background, rgba(0, 0, 0, 0.38)); }

.lmdc-list--dense {
  padding-top: 4px;
  padding-bottom: 4px;
  font-size: .812rem; }

.lmdc-list-item {
  display: flex;
  position: relative;
  align-items: center;
  justify-content: flex-start;
  height: 48px;
  padding: 0 16px;
  overflow: hidden; }
  .lmdc-list-item:focus {
    outline: none; }

.lmdc-list-item--selected,
.lmdc-list-item--activated {
  /* @alternate */
  color: #6200ee;
  color: var(--mdc-theme-primary, #6200ee); }
  .lmdc-list-item--selected .lmdc-list-item__graphic,
  .lmdc-list-item--activated .lmdc-list-item__graphic {
    /* @alternate */
    color: #6200ee;
    color: var(--mdc-theme-primary, #6200ee); }

.lmdc-list-item__graphic {
  margin-left: 0;
  margin-right: 32px;
  width: 24px;
  height: 24px;
  display: inline-flex;
  flex-shrink: 0;
  align-items: center;
  justify-content: center; }
  .lmdc-list-item[dir="rtl"] .lmdc-list-item__graphic,
  [dir="rtl"] .lmdc-list-item .lmdc-list-item__graphic {
    margin-left: 32px;
    margin-right: 0; }

.lmdc-list-item__meta {
  margin-left: auto;
  margin-right: 0; }
  .lmdc-list-item[dir="rtl"] .lmdc-list-item__meta,
  [dir="rtl"] .lmdc-list-item .lmdc-list-item__meta {
    margin-left: 0;
    margin-right: auto; }

.lmdc-list-item__text,
.lmdc-list-item__secondary-text {
  text-overflow: ellipsis;
  white-space: nowrap;
  overflow: hidden;
  display: block; }

.lmdc-list-item__secondary-text {
  font-family: Roboto, sans-serif;
  -moz-osx-font-smoothing: grayscale;
  -webkit-font-smoothing: antialiased;
  font-size: 0.875rem;
  line-height: 1.25rem;
  font-weight: 400;
  letter-spacing: 0.04em;
  text-decoration: inherit;
  text-transform: inherit; }

.lmdc-list--dense .lmdc-list-item__secondary-text {
  font-size: inherit; }

.lmdc-list--dense .lmdc-list-item {
  height: 40px; }

.lmdc-list--dense .lmdc-list-item__graphic {
  margin-left: 0;
  margin-right: 36px;
  width: 20px;
  height: 20px; }
  .lmdc-list-item[dir="rtl"] .lmdc-list--dense .lmdc-list-item__graphic,
  [dir="rtl"] .lmdc-list-item .lmdc-list--dense .lmdc-list-item__graphic {
    margin-left: 36px;
    margin-right: 0; }

.lmdc-list--avatar-list .lmdc-list-item {
  height: 56px; }

.lmdc-list--avatar-list .lmdc-list-item__graphic {
  margin-left: 0;
  margin-right: 16px;
  width: 40px;
  height: 40px;
  border-radius: 50%; }
  .lmdc-list-item[dir="rtl"] .lmdc-list--avatar-list .lmdc-list-item__graphic,
  [dir="rtl"] .lmdc-list-item .lmdc-list--avatar-list .lmdc-list-item__graphic {
    margin-left: 16px;
    margin-right: 0; }

:not(.lmdc-list--non-interactive) > .lmdc-list-item {
  --mdc-ripple-fg-size: 0;
  --mdc-ripple-left: 0;
  --mdc-ripple-top: 0;
  --mdc-ripple-fg-scale: 1;
  --mdc-ripple-fg-translate-end: 0;
  --mdc-ripple-fg-translate-start: 0;
  -webkit-tap-highlight-color: rgba(0, 0, 0, 0);
  will-change: transform, opacity; }
  :not(.lmdc-list--non-interactive) > .lmdc-list-item::before, :not(.lmdc-list--non-interactive) > .lmdc-list-item::after {
    position: absolute;
    border-radius: 50%;
    opacity: 0;
    pointer-events: none;
    content: ""; }
  :not(.lmdc-list--non-interactive) > .lmdc-list-item::before {
    transition: opacity 15ms linear;
    z-index: 1; }
  :not(.lmdc-list--non-interactive) > .lmdc-list-item.lmdc-ripple-upgraded::before {
    -webkit-transform: scale(var(--mdc-ripple-fg-scale, 1));
            transform: scale(var(--mdc-ripple-fg-scale, 1)); }
  :not(.lmdc-list--non-interactive) > .lmdc-list-item.lmdc-ripple-upgraded::after {
    top: 0;
    left: 0;
    -webkit-transform: scale(0);
            transform: scale(0);
    -webkit-transform-origin: center center;
            transform-origin: center center; }
  :not(.lmdc-list--non-interactive) > .lmdc-list-item.lmdc-ripple-upgraded--unbounded::after {
    top: var(--mdc-ripple-top, 0);
    left: var(--mdc-ripple-left, 0); }
  :not(.lmdc-list--non-interactive) > .lmdc-list-item.lmdc-ripple-upgraded--foreground-activation::after {
    -webkit-animation: 225ms mdc-ripple-fg-radius-in forwards, 75ms mdc-ripple-fg-opacity-in forwards;
            animation: 225ms mdc-ripple-fg-radius-in forwards, 75ms mdc-ripple-fg-opacity-in forwards; }
  :not(.lmdc-list--non-interactive) > .lmdc-list-item.lmdc-ripple-upgraded--foreground-deactivation::after {
    -webkit-animation: 150ms mdc-ripple-fg-opacity-out;
            animation: 150ms mdc-ripple-fg-opacity-out;
    -webkit-transform: translate(var(--mdc-ripple-fg-translate-end, 0)) scale(var(--mdc-ripple-fg-scale, 1));
            transform: translate(var(--mdc-ripple-fg-translate-end, 0)) scale(var(--mdc-ripple-fg-scale, 1)); }
  :not(.lmdc-list--non-interactive) > .lmdc-list-item::before, :not(.lmdc-list--non-interactive) > .lmdc-list-item::after {
    top: calc(50% - 100%);
    left: calc(50% - 100%);
    width: 200%;
    height: 200%; }
  :not(.lmdc-list--non-interactive) > .lmdc-list-item.lmdc-ripple-upgraded::after {
    width: var(--mdc-ripple-fg-size, 100%);
    height: var(--mdc-ripple-fg-size, 100%); }
  :not(.lmdc-list--non-interactive) > .lmdc-list-item::before, :not(.lmdc-list--non-interactive) > .lmdc-list-item::after {
    background-color: black; }
  :not(.lmdc-list--non-interactive) > .lmdc-list-item:hover::before {
    opacity: 0.04; }
  :not(.lmdc-list--non-interactive) > .lmdc-list-item:not(.lmdc-ripple-upgraded):focus::before, :not(.lmdc-list--non-interactive) > .lmdc-list-item.lmdc-ripple-upgraded--background-focused::before {
    transition-duration: 75ms;
    opacity: 0.12; }
  :not(.lmdc-list--non-interactive) > .lmdc-list-item:not(.lmdc-ripple-upgraded)::after {
    transition: opacity 150ms linear; }
  :not(.lmdc-list--non-interactive) > .lmdc-list-item:not(.lmdc-ripple-upgraded):active::after {
    transition-duration: 75ms;
    opacity: 0.16; }
  :not(.lmdc-list--non-interactive) > .lmdc-list-item.lmdc-ripple-upgraded {
    --mdc-ripple-fg-opacity: $opacity; }
  :not(.lmdc-list--non-interactive) > .lmdc-list-item--activated::before {
    opacity: 0.12; }
  :not(.lmdc-list--non-interactive) > .lmdc-list-item--activated::before, :not(.lmdc-list--non-interactive) > .lmdc-list-item--activated::after {
    /* @alternate */
    background-color: #6200ee; }
    @supports not (-ms-ime-align: auto) {
      :not(.lmdc-list--non-interactive) > .lmdc-list-item--activated::before, :not(.lmdc-list--non-interactive) > .lmdc-list-item--activated::after {
        background-color: var(--mdc-theme-primary, #6200ee); } }
  :not(.lmdc-list--non-interactive) > .lmdc-list-item--activated:hover::before {
    opacity: 0.16; }
  :not(.lmdc-list--non-interactive) > .lmdc-list-item--activated:not(.lmdc-ripple-upgraded):focus::before, :not(.lmdc-list--non-interactive) > .lmdc-list-item--activated.lmdc-ripple-upgraded--background-focused::before {
    transition-duration: 75ms;
    opacity: 0.24; }
  :not(.lmdc-list--non-interactive) > .lmdc-list-item--activated:not(.lmdc-ripple-upgraded)::after {
    transition: opacity 150ms linear; }
  :not(.lmdc-list--non-interactive) > .lmdc-list-item--activated:not(.lmdc-ripple-upgraded):active::after {
    transition-duration: 75ms;
    opacity: 0.28; }
  :not(.lmdc-list--non-interactive) > .lmdc-list-item--activated.lmdc-ripple-upgraded {
    --mdc-ripple-fg-opacity: $opacity; }
  :not(.lmdc-list--non-interactive) > .lmdc-list-item--selected::before {
    opacity: 0.08; }
  :not(.lmdc-list--non-interactive) > .lmdc-list-item--selected::before, :not(.lmdc-list--non-interactive) > .lmdc-list-item--selected::after {
    /* @alternate */
    background-color: #6200ee; }
    @supports not (-ms-ime-align: auto) {
      :not(.lmdc-list--non-interactive) > .lmdc-list-item--selected::before, :not(.lmdc-list--non-interactive) > .lmdc-list-item--selected::after {
        background-color: var(--mdc-theme-primary, #6200ee); } }
  :not(.lmdc-list--non-interactive) > .lmdc-list-item--selected:hover::before {
    opacity: 0.12; }
  :not(.lmdc-list--non-interactive) > .lmdc-list-item--selected:not(.lmdc-ripple-upgraded):focus::before, :not(.lmdc-list--non-interactive) > .lmdc-list-item--selected.lmdc-ripple-upgraded--background-focused::before {
    transition-duration: 75ms;
    opacity: 0.2; }
  :not(.lmdc-list--non-interactive) > .lmdc-list-item--selected:not(.lmdc-ripple-upgraded)::after {
    transition: opacity 150ms linear; }
  :not(.lmdc-list--non-interactive) > .lmdc-list-item--selected:not(.lmdc-ripple-upgraded):active::after {
    transition-duration: 75ms;
    opacity: 0.24; }
  :not(.lmdc-list--non-interactive) > .lmdc-list-item--selected.lmdc-ripple-upgraded {
    --mdc-ripple-fg-opacity: $opacity; }

.lmdc-list--two-line .lmdc-list-item {
  height: 72px; }

.lmdc-list--two-line.lmdc-list--dense .lmdc-list-item {
  height: 60px; }

.lmdc-list--avatar-list.lmdc-list--dense .lmdc-list-item {
  height: 48px; }

.lmdc-list--avatar-list.lmdc-list--dense .lmdc-list-item__graphic {
  margin-left: 0;
  margin-right: 20px;
  width: 36px;
  height: 36px; }
  .lmdc-list-item[dir="rtl"] .lmdc-list--avatar-list.lmdc-list--dense .lmdc-list-item__graphic,
  [dir="rtl"] .lmdc-list-item .lmdc-list--avatar-list.lmdc-list--dense .lmdc-list-item__graphic {
    margin-left: 20px;
    margin-right: 0; }

a.lmdc-list-item {
  color: inherit;
  text-decoration: none; }

.lmdc-list-divider, mdc-divider, mdc-divider-inset {
  height: 0;
  margin: 0;
  border: none;
  border-bottom-width: 1px;
  border-bottom-style: solid; }

.lmdc-list-divider, mdc-divider, mdc-divider-inset {
  border-bottom-color: rgba(0, 0, 0, 0.12); }

.lmdc-list-divider--padded {
  margin: 0 16px; }

.lmdc-list-divider--inset, mdc-divider-inset {
  margin-left: 72px;
  margin-right: 0;
  width: calc(100% - 72px); }
  .lmdc-list-group[dir="rtl"] .lmdc-list-divider--inset, .lmdc-list-group[dir="rtl"] mdc-divider-inset, [dir="rtl"] .lmdc-list-group .lmdc-list-divider--inset, [dir="rtl"] .lmdc-list-group mdc-divider-inset {
    margin-left: 0;
    margin-right: 72px; }

.lmdc-list-divider--inset.lmdc-list-divider--padded, mdc-divider-inset.lmdc-list-divider--padded {
  width: calc(100% - 72px - 16px); }

.lmdc-list-group .lmdc-list {
  padding: 0; }

.lmdc-list-group__subheader {
  font-family: Roboto, sans-serif;
  -moz-osx-font-smoothing: grayscale;
  -webkit-font-smoothing: antialiased;
  font-size: 0.875rem;
  line-height: 1.5rem;
  font-weight: 500;
  letter-spacing: 0.04em;
  text-decoration: inherit;
  text-transform: inherit;
  margin: 0.75rem 16px; }

.lmdc-list-group__subheader {
  /* @alternate */
  color: rgba(0, 0, 0, 0.87);
  color: var(--mdc-theme-text-primary-on-background, rgba(0, 0, 0, 0.87)); }

mdc-list, mdc-list-item {
  display: block; }

mdc-divider {
  display: block; }

mdc-divider-inset {
  display: block; }
